!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ARAChunkCache	cc/meta/LayoutManager.h	/^		ARAChunkCache()$/;"	f	class:KFS::ARAChunkCache
ARAChunkCache	cc/meta/LayoutManager.h	/^	class ARAChunkCache$/;"	c	namespace:KFS
ARAMap	cc/chunk/AtomicRecordAppender.h	/^    typedef std::tr1::unordered_map<kfsChunkId_t, AtomicRecordAppender*> ARAMap;$/;"	t	class:KFS::AtomicRecordAppendManager
ARA_CHUNK_CACHE_EXPIRE_INTERVAL	cc/meta/LayoutManager.h	/^	const uint32_t ARA_CHUNK_CACHE_EXPIRE_INTERVAL = 600;$/;"	m	namespace:KFS
Accept	cc/libkfsIO/TcpSocket.cc	/^TcpSocket* TcpSocket::Accept()$/;"	f	class:TcpSocket
Acceptor	cc/libkfsIO/Acceptor.cc	/^Acceptor::Acceptor(NetManager& netManager, int port, IAcceptorOwner *owner)$/;"	f	class:Acceptor
Acceptor	cc/libkfsIO/Acceptor.cc	/^Acceptor::Acceptor(int port, IAcceptorOwner *owner)$/;"	f	class:Acceptor
Acceptor	cc/libkfsIO/Acceptor.h	/^class Acceptor : public KfsCallbackObj {$/;"	c	namespace:KFS
Add	cc/libkfsClient/KfsNetClient.h	/^        Stats& Add($/;"	f	struct:KFS::KfsNetClient::Stats
Add	cc/libkfsClient/WriteAppender.h	/^        Stats& Add($/;"	f	struct:KFS::WriteAppender::Stats
Add	cc/libkfsIO/NetManager.h	/^        virtual void Add(NetManager& netMgr, NetConnection& conn)    {}$/;"	f	class:KFS::NetManager::PollEventHook
Add	cc/qcdio/qcfdpoll.cpp	/^    int Add($/;"	f	class:QCFdPoll::Impl
Add	cc/qcdio/qcfdpoll.cpp	/^QCFdPoll::Add($/;"	f	class:QCFdPoll
Add	cc/qcdio/qcunittest.cpp	/^        QCDiskQueue::EnqueueStatus Add($/;"	f	class:QCDiskQueueTest::RequestWaiter
AddChunkToServerMapping	cc/meta/LayoutManager.cc	/^LayoutManager::AddChunkToServerMapping(chunkId_t chunkId, fid_t fid,$/;"	f	class:LayoutManager
AddConnection	cc/libkfsIO/NetManager.cc	/^NetManager::AddConnection(NetConnectionPtr &conn)$/;"	f	class:NetManager
AddCounter	cc/chunk/KfsOps.cc	/^AddCounter(const char *name, KfsOp_t opName)$/;"	f	file:
AddCounter	cc/libkfsIO/Counter.h	/^    void AddCounter(Counter *counter) {$/;"	f	class:KFS::CounterManager
AddCounter	cc/meta/request.cc	/^AddCounter(const char *name, MetaOp opName)$/;"	f	namespace:KFS
AddDiskQueue	cc/chunk/DiskIo.cc	/^    bool AddDiskQueue($/;"	f	class:KFS::DiskIoQueues
AddFileNamePrefix	cc/chunk/DiskIo.cc	/^    void AddFileNamePrefix($/;"	f	class:KFS::DiskQueue
AddLogFileNamePrefix	cc/common/BufferedLogWriter.cc	/^    bool AddLogFileNamePrefix($/;"	f	class:KFS::BufferedLogWriter::Impl
AddLogFileNamePrefix	cc/common/BufferedLogWriter.cc	/^BufferedLogWriter::AddLogFileNamePrefix($/;"	f	class:KFS::BufferedLogWriter
AddMapping	cc/chunk/ChunkManager.cc	/^ChunkManager::AddMapping(ChunkInfoHandle *cih)$/;"	f	class:KFS::ChunkManager
AddMapping	cc/chunk/ChunkManager.cc	/^ChunkManager::AddMapping(const ChunkInfo_t& ci)$/;"	f	class:KFS::ChunkManager
AddNewServer	cc/meta/LayoutManager.cc	/^LayoutManager::AddNewServer(MetaHello *r)$/;"	f	class:LayoutManager
AddNotStableChunk	cc/meta/LayoutManager.cc	/^LayoutManager::AddNotStableChunk($/;"	f	class:LayoutManager
AddPending	cc/meta/LayoutManager.cc	/^ARAChunkCache::Entry::AddPending(MetaAllocate& req)$/;"	f	class:ARAChunkCache::Entry
AddServer	cc/emulator/LayoutEmulator.cc	/^LayoutEmulator::AddServer(const ServerLocation &loc, int rack, uint64_t totalSpace, uint64_t usedSpace)$/;"	f	class:LayoutEmulator
AddServerToMakeStable	cc/meta/LayoutManager.cc	/^LayoutManager::AddServerToMakeStable($/;"	f	class:LayoutManager
AddToChunksToMove	cc/meta/ChunkServer.h	/^		void AddToChunksToMove(chunkId_t chunkId) {$/;"	f	class:KFS::ChunkServer
AddWaiter	cc/chunk/KfsOps.h	/^    void AddWaiter(KfsOp *op) {$/;"	f	struct:KFS::ReadChunkMetaOp
AdjustDataRead	cc/chunk/ChunkManager.cc	/^ChunkManager::AdjustDataRead(ReadOp *op)$/;"	f	class:KFS::ChunkManager
Alloc	cc/qcdio/qcfdpoll.cpp	/^    void Alloc($/;"	f	class:QCFdPoll::Impl	file:
AllocBuffer	cc/libkfsIO/IOBuffer.cc	/^inline static void* AllocBuffer(size_t allocSize)$/;"	f	file:
AllocChunk	cc/chunk/ChunkManager.cc	/^ChunkManager::AllocChunk(kfsFileId_t fileId, kfsChunkId_t chunkId, $/;"	f	class:KFS::ChunkManager
AllocChunk	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::AllocChunk(int fd, bool append)$/;"	f	class:KfsClientImpl
AllocChunkForAppend	cc/chunk/ChunkManager.cc	/^ChunkManager::AllocChunkForAppend(AllocChunkOp* op, int replicationPos, ServerLocation peerLoc)$/;"	f	class:KFS::ChunkManager
AllocChunkOp	cc/chunk/KfsOps.h	/^    AllocChunkOp(kfsSeq_t s) :$/;"	f	struct:KFS::AllocChunkOp
AllocChunkOp	cc/chunk/KfsOps.h	/^struct AllocChunkOp : public KfsOp {$/;"	s	namespace:KFS
AllocContentBuf	cc/libkfsClient/KfsOps.h	/^    void AllocContentBuf(size_t len) {$/;"	f	struct:KFS::KfsOp
AllocFileSpace	cc/qcdio/qcunittest.cpp	/^    int AllocFileSpace($/;"	f	class:QCDiskQueueTest
AllocFileTableEntry	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::AllocFileTableEntry(kfsFileId_t parentFid, const char *name,$/;"	f	class:KfsClientImpl
Allocate	cc/chunk/DiskIo.cc	/^        virtual char* Allocate()$/;"	f	class:KFS::DiskIoQueues::BufferAllocator
Allocate	cc/libkfsClient/KfsAsyncRW.h	/^        char *Allocate() {$/;"	f	class:KFS::NullAllocator
Allocate	cc/libkfsClient/KfsProtocolWorker.cc	/^        virtual char* Allocate()$/;"	f	class:KFS::KfsProtocolWorker::Impl::DoNotDeallocate
Allocate	cc/meta/metaserver_main.cc	/^    virtual char* Allocate()$/;"	f	class:BufferAllocator
AllocateChunk	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppendManager::AllocateChunk($/;"	f	class:KFS::AtomicRecordAppendManager
AllocateChunk	cc/libkfsClient/WriteAppender.cc	/^    void AllocateChunk()$/;"	f	class:KFS::WriteAppender::Impl	file:
AllocateChunk	cc/meta/ChunkServer.cc	/^ChunkServer::AllocateChunk(MetaAllocate *r, int64_t leaseId)$/;"	f	class:ChunkServer
AllocateChunk	cc/meta/LayoutManager.cc	/^LayoutManager::AllocateChunk(MetaAllocate *r)$/;"	f	class:LayoutManager
AllocateChunkForAppend	cc/meta/LayoutManager.cc	/^LayoutManager::AllocateChunkForAppend(MetaAllocate *req)$/;"	f	class:LayoutManager
AllocateChunkForAppendDone	cc/meta/LayoutManager.h	/^		void AllocateChunkForAppendDone(MetaAllocate& req) {$/;"	f	class:KFS::LayoutManager
AllocateFileSpace	cc/qcdio/qcdiskqueue.cpp	/^QCDiskQueue::AllocateFileSpace($/;"	f	class:QCDiskQueue
AllocateFileSpace	cc/qcdio/qcdiskqueue.cpp	/^QCDiskQueue::Queue::AllocateFileSpace($/;"	f	class:QCDiskQueue::Queue
AllocateFileSpace	cc/qcdio/qcutils.cpp	/^QCUtils::AllocateFileSpace($/;"	f	class:QCUtils
AllocateOp	cc/libkfsClient/KfsOps.h	/^    AllocateOp(kfsSeq_t s, kfsFileId_t f, const std::string &p) :$/;"	f	struct:KFS::AllocateOp
AllocateOp	cc/libkfsClient/KfsOps.h	/^struct AllocateOp : public KfsOp {$/;"	s	namespace:KFS
AllocateWriteId	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppendManager::AllocateWriteId($/;"	f	class:KFS::AtomicRecordAppendManager
AllocateWriteId	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppender::AllocateWriteId($/;"	f	class:KFS::AtomicRecordAppender
AllocateWriteId	cc/chunk/ChunkManager.cc	/^ChunkManager::AllocateWriteId(WriteIdAllocOp *wi, int replicationPos, ServerLocation peerLoc)$/;"	f	class:KFS::ChunkManager
AllocateWriteId	cc/libkfsClient/KfsWrite.cc	/^KfsClientImpl::AllocateWriteId(int fd, off_t offset, size_t numBytes,$/;"	f	class:KfsClientImpl
AllocateWriteId	cc/libkfsClient/WriteAppender.cc	/^    void AllocateWriteId()$/;"	f	class:KFS::WriteAppender::Impl	file:
Append	cc/chunk/KfsOps.cc	/^HeartbeatOp::Append(const char* key1, const char* key2, T val)$/;"	f	class:HeartbeatOp
Append	cc/common/BufferedLogWriter.cc	/^    void Append($/;"	f	class:KFS::BufferedLogWriter::Impl
Append	cc/common/BufferedLogWriter.cc	/^BufferedLogWriter::Append($/;"	f	class:KFS::BufferedLogWriter
Append	cc/common/BufferedLogWriter.h	/^    void Append($/;"	f	class:KFS::BufferedLogWriter
Append	cc/libkfsClient/WriteAppender.cc	/^    int Append($/;"	f	class:KFS::WriteAppender::Impl
Append	cc/libkfsClient/WriteAppender.cc	/^    void Append()$/;"	f	class:KFS::WriteAppender::Impl	file:
Append	cc/libkfsClient/WriteAppender.cc	/^WriteAppender::Append($/;"	f	class:KFS::WriteAppender
Append	cc/libkfsIO/IOBuffer.cc	/^int IOBuffer::Append(IOBuffer *ioBuf)$/;"	f	class:IOBuffer
Append	cc/libkfsIO/IOBuffer.cc	/^void IOBuffer::Append(const IOBufferData &buf)$/;"	f	class:IOBuffer
AppendBegin	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppendManager::AppendBegin($/;"	f	class:KFS::AtomicRecordAppendManager
AppendBegin	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppender::AppendBegin($/;"	f	class:KFS::AtomicRecordAppender
AppendCommit	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppender::AppendCommit(RecordAppendOp *op)$/;"	f	class:KFS::AtomicRecordAppender
AppendReplicationList	cc/chunk/AtomicRecordAppender.cc	/^typedef QCDLList<RecordAppendOp> AppendReplicationList;$/;"	t	namespace:KFS	file:
Appender	cc/libkfsClient/KfsProtocolWorker.cc	/^        Appender($/;"	f	class:KFS::KfsProtocolWorker::Impl::Appender
Appender	cc/libkfsClient/KfsProtocolWorker.cc	/^    class Appender : public WriteAppender::Completion$/;"	c	class:KFS::KfsProtocolWorker::Impl	file:
AppenderKey	cc/libkfsClient/KfsProtocolWorker.cc	/^    typedef std::pair<FileInstance, FileId> AppenderKey;$/;"	t	class:KFS::KfsProtocolWorker::Impl	file:
Appenders	cc/libkfsClient/KfsProtocolWorker.cc	/^    > Appenders;$/;"	t	class:KFS::KfsProtocolWorker::Impl	file:
AreChecksumsLoaded	cc/chunk/Chunk.h	/^    bool AreChecksumsLoaded() const {$/;"	f	struct:KFS::ChunkInfo_t
AssertionFailure	cc/qcdio/qcutils.cpp	/^QCUtils::AssertionFailure($/;"	f	class:QCUtils
AsyncReadReq	cc/libkfsClient/KfsAsyncRW.h	/^        AsyncReadReq() { }$/;"	f	struct:KFS::AsyncReadReq
AsyncReadReq	cc/libkfsClient/KfsAsyncRW.h	/^        AsyncReadReq(int f, TcpSocketPtr s, kfsSeq_t n, kfsChunkId_t c, int64_t v,$/;"	f	struct:KFS::AsyncReadReq
AsyncReadReq	cc/libkfsClient/KfsAsyncRW.h	/^    struct AsyncReadReq : public AsyncReq {$/;"	s	namespace:KFS
AsyncReadWorker	cc/libkfsClient/KfsAsyncRW.cc	/^AsyncReadWorker::AsyncReadWorker(Asyncer *p, AsyncReadReq *r) : $/;"	f	class:AsyncReadWorker
AsyncReadWorker	cc/libkfsClient/KfsAsyncRW.h	/^    class AsyncReadWorker : public AsyncWorker {$/;"	c	namespace:KFS
AsyncReq	cc/libkfsClient/KfsAsyncRW.h	/^        AsyncReq() : fd(-1) { }$/;"	f	struct:KFS::AsyncReq
AsyncReq	cc/libkfsClient/KfsAsyncRW.h	/^        AsyncReq(int f, TcpSocketPtr s, kfsSeq_t n, kfsChunkId_t c, int64_t v,$/;"	f	struct:KFS::AsyncReq
AsyncReq	cc/libkfsClient/KfsAsyncRW.h	/^    struct AsyncReq {$/;"	s	namespace:KFS
AsyncRequest	cc/libkfsClient/KfsProtocolWorker.cc	/^        AsyncRequest($/;"	f	class:KFS::KfsProtocolWorker::Impl::AsyncRequest	file:
AsyncRequest	cc/libkfsClient/KfsProtocolWorker.cc	/^    class AsyncRequest : public Request$/;"	c	class:KFS::KfsProtocolWorker::Impl	file:
AsyncWorker	cc/libkfsClient/KfsAsyncRW.cc	/^AsyncWorker::AsyncWorker(Asyncer *p, AsyncReq *r) : $/;"	f	class:AsyncWorker
AsyncWorker	cc/libkfsClient/KfsAsyncRW.h	/^    class AsyncWorker : public KfsCallbackObj {$/;"	c	namespace:KFS
AsyncWriteReq	cc/libkfsClient/KfsAsyncRW.h	/^        AsyncWriteReq(int f, TcpSocketPtr s, kfsSeq_t n, kfsChunkId_t c, int64_t v,$/;"	f	struct:KFS::AsyncWriteReq
AsyncWriteReq	cc/libkfsClient/KfsAsyncRW.h	/^    struct AsyncWriteReq : public AsyncReq {$/;"	s	namespace:KFS
AsyncWriteWorker	cc/libkfsClient/KfsAsyncRW.cc	/^AsyncWriteWorker::AsyncWriteWorker(Asyncer *p, AsyncWriteReq *r) :$/;"	f	class:AsyncWriteWorker
AsyncWriteWorker	cc/libkfsClient/KfsAsyncRW.h	/^    class AsyncWriteWorker : public AsyncWorker {$/;"	c	namespace:KFS
Asyncer	cc/libkfsClient/KfsAsyncRW.h	/^        Asyncer() : mNumRunning(0), mStopFlag(true) { }$/;"	f	class:KFS::Asyncer
Asyncer	cc/libkfsClient/KfsAsyncRW.h	/^    class Asyncer : public QCRunnable, public ITimeout {$/;"	c	namespace:KFS
AtomicRecordAppend	cc/libkfsClient/KfsClient.cc	/^KfsClient::AtomicRecordAppend(int fd, const char *buf, int reclen)$/;"	f	class:KfsClient
AtomicRecordAppend	cc/libkfsClient/KfsWrite.cc	/^KfsClientImpl::AtomicRecordAppend(int fd, const char *buf, int reclen)$/;"	f	class:KfsClientImpl
AtomicRecordAppend	cc/libkfsClient/KfsWrite.cc	/^KfsClientImpl::AtomicRecordAppend(int fd, const char *buf, int reclen, MutexLock& lock)$/;"	f	class:KfsClientImpl
AtomicRecordAppendManager	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppendManager::AtomicRecordAppendManager()$/;"	f	class:KFS::AtomicRecordAppendManager
AtomicRecordAppendManager	cc/chunk/AtomicRecordAppender.h	/^class AtomicRecordAppendManager {$/;"	c	namespace:KFS
AtomicRecordAppender	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppender::AtomicRecordAppender($/;"	f	class:KFS::AtomicRecordAppender
AtomicRecordAppender	cc/chunk/AtomicRecordAppender.cc	/^class AtomicRecordAppender : public KfsCallbackObj$/;"	c	namespace:KFS	file:
Attach	cc/qcdio/qcstutils.h	/^    void Attach($/;"	f	class:QCStMutexLocker
Attach	cc/qcdio/qcstutils.h	/^    void Attach($/;"	f	class:QCStMutexUnlocker
AttachContentBuf	cc/libkfsClient/KfsOps.h	/^    void AttachContentBuf(char *buf, size_t len) {$/;"	f	struct:KFS::KfsOp
AttachContentBuf	cc/libkfsClient/KfsOps.h	/^    void AttachContentBuf(const char *buf, size_t len) {$/;"	f	struct:KFS::KfsOp
AvoidRenewingLease	cc/chunk/LeaseClerk.cc	/^LeaseClerk::AvoidRenewingLease(kfsChunkId_t chunkId)$/;"	f	class:LeaseClerk
AvoidServer	cc/libkfsClient/KfsAttr.h	/^    void AvoidServer(ServerLocation &loc) {$/;"	f	struct:KFS::ChunkAttr
AvoidServer	cc/libkfsClient/KfsClientInt.h	/^    void AvoidServer(const ServerLocation &loc) {$/;"	f	struct:KFS::FilePosition
BList	cc/libkfsIO/IOBuffer.h	/^    > BList;$/;"	t	class:KFS::IOBuffer
BPClient	cc/qcdio/qcunittest.cpp	/^        BPClient($/;"	f	class:QCDiskQueueTest::BPClient
BPClient	cc/qcdio/qcunittest.cpp	/^    class BPClient : public QCIoBufferPool::Client$/;"	c	class:QCDiskQueueTest	file:
BUFFEREDLOGWRITER_H	cc/common/BufferedLogWriter.h	26;"	d
BUFFER_MANAGER_H	cc/chunk/BufferManager.h	26;"	d
BUF_SIZE	cc/libkfsIO/BufferedSocket.h	/^    const static int BUF_SIZE = 4096;$/;"	m	class:KFS::BufferedSocket
Back	cc/qcdio/qcdllist.h	/^    static NodeT* Back($/;"	f	class:QCDLList
BackupDir	cc/tools/KfsToolsCommon.cc	/^KFS::tools::BackupDir(KfsClientPtr kfsClient, const string &dirname, string &kfsdirname)$/;"	f	class:KFS::tools
BackupDir	cc/tools/cptokfs_main.cc	/^BackupDir(const string &dirname, string &kfsdirname)$/;"	f
BackupFile	cc/tools/KfsToolsCommon.cc	/^KFS::tools::BackupFile(KfsClientPtr kfsClient, const string &sourcePath, const string &kfsPath)$/;"	f	class:KFS::tools
BackupFile	cc/tools/cptokfs_main.cc	/^BackupFile(const string &sourcePath, const string &kfsPath)$/;"	f
BackupFile2	cc/tools/KfsToolsCommon.cc	/^BackupFile2(KfsClientPtr kfsClient, string srcfilename, string kfsfilename)$/;"	f	file:
BackupFile2	cc/tools/cptokfs_main.cc	/^BackupFile2(string srcfilename, string kfsfilename)$/;"	f
BadRequest	cc/chunk/ClientManager.h	/^    void BadRequest() {$/;"	f	class:KFS::ClientManager
BadRequestHeader	cc/chunk/ClientManager.h	/^    void BadRequestHeader() {$/;"	f	class:KFS::ClientManager
BasicStatsChunkServer	cc/tools/kfsstats_main.cc	/^BasicStatsChunkServer(TcpSocket &chunkServerSock, int numSecs)$/;"	f
BasicStatsMetaServer	cc/tools/kfsstats_main.cc	/^BasicStatsMetaServer(TcpSocket &metaServerSock, int numSecs)$/;"	f
BeginMakeChunkStable	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppendManager::BeginMakeChunkStable(BeginMakeChunkStableOp* op)$/;"	f	class:KFS::AtomicRecordAppendManager
BeginMakeChunkStable	cc/meta/ChunkServer.cc	/^ChunkServer::BeginMakeChunkStable(fid_t fid, chunkId_t chunkId, seq_t chunkVersion)$/;"	f	class:ChunkServer
BeginMakeChunkStable	cc/meta/LayoutManager.cc	/^	BeginMakeChunkStable(fid_t f, chunkId_t c, seq_t v)$/;"	f	class:BeginMakeChunkStable
BeginMakeChunkStable	cc/meta/LayoutManager.cc	/^class BeginMakeChunkStable$/;"	c	file:
BeginMakeChunkStableDone	cc/meta/LayoutManager.cc	/^LayoutManager::BeginMakeChunkStableDone(const MetaBeginMakeChunkStable* req)$/;"	f	class:LayoutManager
BeginMakeChunkStableOp	cc/chunk/KfsOps.h	/^    BeginMakeChunkStableOp(kfsSeq_t s) :$/;"	f	struct:KFS::BeginMakeChunkStableOp
BeginMakeChunkStableOp	cc/chunk/KfsOps.h	/^struct BeginMakeChunkStableOp : public KfsOp {$/;"	s	namespace:KFS
BeginMakeStable	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppender::BeginMakeStable($/;"	f	class:KFS::AtomicRecordAppender
BlockIdx	cc/qcdio/qcdiskqueue.h	/^    typedef int64_t  BlockIdx;$/;"	t	class:QCDiskQueue
BufferAllocator	cc/chunk/DiskIo.cc	/^        BufferAllocator()$/;"	f	class:KFS::DiskIoQueues::BufferAllocator
BufferAllocator	cc/chunk/DiskIo.cc	/^    class BufferAllocator : public libkfsio::IOBufferAllocator$/;"	c	class:KFS::DiskIoQueues	file:
BufferAllocator	cc/meta/metaserver_main.cc	/^    BufferAllocator()$/;"	f	class:BufferAllocator
BufferAllocator	cc/meta/metaserver_main.cc	/^class BufferAllocator : public libkfsio::IOBufferAllocator$/;"	c	file:
BufferIndex	cc/qcdio/qciobufferpool.cpp	/^    typedef unsigned int BufferIndex;$/;"	t	class:QCIoBufferPool::Partition	file:
BufferManager	cc/chunk/BufferManager.cc	/^BufferManager::BufferManager($/;"	f	class:KFS::BufferManager
BufferManager	cc/chunk/BufferManager.h	/^class BufferManager : private ITimeout$/;"	c	namespace:KFS
BufferedLogWriter	cc/common/BufferedLogWriter.cc	/^BufferedLogWriter::BufferedLogWriter($/;"	f	class:KFS::BufferedLogWriter
BufferedLogWriter	cc/common/BufferedLogWriter.h	/^class BufferedLogWriter$/;"	c	namespace:KFS
BufferedSocket	cc/libkfsIO/BufferedSocket.h	/^    BufferedSocket() {$/;"	f	class:KFS::BufferedSocket
BufferedSocket	cc/libkfsIO/BufferedSocket.h	/^    BufferedSocket(int fd) : TcpSocket(fd) {$/;"	f	class:KFS::BufferedSocket
BufferedSocket	cc/libkfsIO/BufferedSocket.h	/^class BufferedSocket : public TcpSocket {$/;"	c	namespace:KFS
BuffersIterator	cc/qcdio/qcdiskqueue.cpp	/^        BuffersIterator($/;"	f	class:QCDiskQueue::Queue::BuffersIterator
BuffersIterator	cc/qcdio/qcdiskqueue.cpp	/^    class BuffersIterator :$/;"	c	class:QCDiskQueue::Queue	file:
BuildRebalancePlan	cc/emulator/LayoutEmulator.cc	/^LayoutEmulator::BuildRebalancePlan()$/;"	f	class:LayoutEmulator
ByteCount	cc/chunk/BufferManager.h	/^        typedef BufferManager::ByteCount ByteCount;$/;"	t	class:KFS::BufferManager::Client
ByteCount	cc/chunk/BufferManager.h	/^    typedef int64_t ByteCount;$/;"	t	class:KFS::BufferManager
BytesConsumable	cc/libkfsIO/IOBuffer.h	/^    int BytesConsumable() const { return mProducer - mConsumer; }$/;"	f	class:KFS::IOBufferData
BytesConsumable	cc/libkfsIO/IOBuffer.h	/^    int BytesConsumable() const$/;"	f	class:KFS::IOBuffer
BytesConsumableLast	cc/libkfsIO/IOBuffer.h	/^    int BytesConsumableLast() const$/;"	f	class:KFS::IOBuffer
CC_CONFIG_H	cc/common/config.h	27;"	d
CHECKSUM_BLOCKSIZE	cc/libkfsIO/Checksum.h	/^const uint32_t CHECKSUM_BLOCKSIZE = 65536;$/;"	m	namespace:KFS
CHUNKSERVER_CHECKSUM_H	cc/libkfsIO/Checksum.h	27;"	d
CHUNKSERVER_LEASECLERK_H	cc/chunk/LeaseClerk.h	33;"	d
CHUNKSERVER_LOGGER_H	cc/chunk/Logger.h	29;"	d
CHUNKSERVER_METASERVERSM_H	cc/chunk/MetaServerSM.h	30;"	d
CHUNKSERVER_REMOTESYNCSM_H	cc/chunk/RemoteSyncSM.h	27;"	d
CHUNKSERVER_REPLICATOR_H	cc/chunk/Replicator.h	27;"	d
CHUNKSERVER_UTILS_H	cc/chunk/Utils.h	27;"	d
CHUNKSIZE	cc/common/kfstypes.h	/^const size_t CHUNKSIZE = 64u << 20; \/\/!< (64MB)$/;"	m	namespace:KFS
CHUNK_ATOMICRECORDAPPENDER_H	cc/chunk/AtomicRecordAppender.h	26;"	d
CHUNK_META_MAGIC	cc/chunk/Chunk.h	/^const int CHUNK_META_MAGIC = 0xCAFECAFE;$/;"	m	namespace:KFS
CHUNK_META_VERSION	cc/chunk/Chunk.h	/^const int CHUNK_META_VERSION = 0x1;$/;"	m	namespace:KFS
CLEANUP_INTERVAL_MSECS	cc/meta/LeaseCleaner.h	/^	static const int CLEANUP_INTERVAL_MSECS = CLEANUP_INTERVAL_SECS * 1000;$/;"	m	class:KFS::LeaseCleaner
CLEANUP_INTERVAL_SECS	cc/meta/LeaseCleaner.h	/^	static const int CLEANUP_INTERVAL_SECS = 60;$/;"	m	class:KFS::LeaseCleaner
CLIENT_SM_LOG_STREAM	cc/chunk/ClientSM.cc	45;"	d	file:
CLIENT_SM_LOG_STREAM_DEBUG	cc/chunk/ClientSM.cc	46;"	d	file:
CLIENT_SM_LOG_STREAM_ERROR	cc/chunk/ClientSM.cc	49;"	d	file:
CLIENT_SM_LOG_STREAM_FATAL	cc/chunk/ClientSM.cc	50;"	d	file:
CLIENT_SM_LOG_STREAM_INFO	cc/chunk/ClientSM.cc	48;"	d	file:
CLIENT_SM_LOG_STREAM_PREFIX	cc/chunk/ClientSM.cc	44;"	d	file:
CLIENT_SM_LOG_STREAM_WARN	cc/chunk/ClientSM.cc	47;"	d	file:
CMAKE_BINARY_DIR	cc/access/Makefile	/^CMAKE_BINARY_DIR = \/home\/sumedh\/kfs$/;"	m
CMAKE_BINARY_DIR	cc/chunk/Makefile	/^CMAKE_BINARY_DIR = \/home\/sumedh\/kfs$/;"	m
CMAKE_BINARY_DIR	cc/common/Makefile	/^CMAKE_BINARY_DIR = \/home\/sumedh\/kfs$/;"	m
CMAKE_BINARY_DIR	cc/emulator/Makefile	/^CMAKE_BINARY_DIR = \/home\/sumedh\/kfs$/;"	m
CMAKE_BINARY_DIR	cc/libkfsClient/Makefile	/^CMAKE_BINARY_DIR = \/home\/sumedh\/kfs$/;"	m
CMAKE_BINARY_DIR	cc/libkfsIO/Makefile	/^CMAKE_BINARY_DIR = \/home\/sumedh\/kfs$/;"	m
CMAKE_BINARY_DIR	cc/meta/Makefile	/^CMAKE_BINARY_DIR = \/home\/sumedh\/kfs$/;"	m
CMAKE_BINARY_DIR	cc/qcdio/Makefile	/^CMAKE_BINARY_DIR = \/home\/sumedh\/kfs$/;"	m
CMAKE_BINARY_DIR	cc/rebalancer/Makefile	/^CMAKE_BINARY_DIR = \/home\/sumedh\/kfs$/;"	m
CMAKE_BINARY_DIR	cc/telemetry/Makefile	/^CMAKE_BINARY_DIR = \/home\/sumedh\/kfs$/;"	m
CMAKE_BINARY_DIR	cc/tests/Makefile	/^CMAKE_BINARY_DIR = \/home\/sumedh\/kfs$/;"	m
CMAKE_BINARY_DIR	cc/tools/Makefile	/^CMAKE_BINARY_DIR = \/home\/sumedh\/kfs$/;"	m
CMAKE_COMMAND	cc/access/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	cc/chunk/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	cc/common/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	cc/emulator/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	cc/libkfsClient/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	cc/libkfsIO/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	cc/meta/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	cc/qcdio/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	cc/rebalancer/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	cc/telemetry/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	cc/tests/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMMAND	cc/tools/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	cc/access/Makefile	/^CMAKE_SOURCE_DIR = \/home\/sumedh\/kfs$/;"	m
CMAKE_SOURCE_DIR	cc/chunk/Makefile	/^CMAKE_SOURCE_DIR = \/home\/sumedh\/kfs$/;"	m
CMAKE_SOURCE_DIR	cc/common/Makefile	/^CMAKE_SOURCE_DIR = \/home\/sumedh\/kfs$/;"	m
CMAKE_SOURCE_DIR	cc/emulator/Makefile	/^CMAKE_SOURCE_DIR = \/home\/sumedh\/kfs$/;"	m
CMAKE_SOURCE_DIR	cc/libkfsClient/Makefile	/^CMAKE_SOURCE_DIR = \/home\/sumedh\/kfs$/;"	m
CMAKE_SOURCE_DIR	cc/libkfsIO/Makefile	/^CMAKE_SOURCE_DIR = \/home\/sumedh\/kfs$/;"	m
CMAKE_SOURCE_DIR	cc/meta/Makefile	/^CMAKE_SOURCE_DIR = \/home\/sumedh\/kfs$/;"	m
CMAKE_SOURCE_DIR	cc/qcdio/Makefile	/^CMAKE_SOURCE_DIR = \/home\/sumedh\/kfs$/;"	m
CMAKE_SOURCE_DIR	cc/rebalancer/Makefile	/^CMAKE_SOURCE_DIR = \/home\/sumedh\/kfs$/;"	m
CMAKE_SOURCE_DIR	cc/telemetry/Makefile	/^CMAKE_SOURCE_DIR = \/home\/sumedh\/kfs$/;"	m
CMAKE_SOURCE_DIR	cc/tests/Makefile	/^CMAKE_SOURCE_DIR = \/home\/sumedh\/kfs$/;"	m
CMAKE_SOURCE_DIR	cc/tools/Makefile	/^CMAKE_SOURCE_DIR = \/home\/sumedh\/kfs$/;"	m
CMD_ALLOCATE	cc/libkfsClient/KfsOps.h	/^    CMD_ALLOCATE,$/;"	e	enum:KFS::KfsOp_t
CMD_ALLOC_CHUNK	cc/chunk/KfsOps.h	/^    CMD_ALLOC_CHUNK,$/;"	e	enum:KFS::KfsOp_t
CMD_BEGIN_MAKE_CHUNK_STABLE	cc/chunk/KfsOps.h	/^    CMD_BEGIN_MAKE_CHUNK_STABLE,$/;"	e	enum:KFS::KfsOp_t
CMD_BUF_SIZE	cc/libkfsClient/KfsClient.cc	/^const int CMD_BUF_SIZE = 1024;$/;"	v
CMD_BUF_SIZE	cc/meta/kfsfsck_main.cc	/^int CMD_BUF_SIZE = 4096;$/;"	v
CMD_BUF_SIZE	cc/tools/MonUtils.cc	/^static const int CMD_BUF_SIZE = 1 << 20;$/;"	v	file:
CMD_CHANGE_CHUNK_VERS	cc/chunk/KfsOps.h	/^    CMD_CHANGE_CHUNK_VERS,$/;"	e	enum:KFS::KfsOp_t
CMD_CHANGE_FILE_REPLICATION	cc/libkfsClient/KfsOps.h	/^    CMD_CHANGE_FILE_REPLICATION,$/;"	e	enum:KFS::KfsOp_t
CMD_CHECKPOINT	cc/chunk/KfsOps.h	/^    CMD_CHECKPOINT,$/;"	e	enum:KFS::KfsOp_t
CMD_CHUNKPING	cc/tools/MonUtils.h	/^        CMD_CHUNKPING,$/;"	e	enum:KFS_MON::KfsMonOp_t
CMD_CHUNKSTATS	cc/tools/MonUtils.h	/^        CMD_CHUNKSTATS,$/;"	e	enum:KFS_MON::KfsMonOp_t
CMD_CHUNK_SPACE_RELEASE	cc/libkfsClient/KfsOps.h	/^    CMD_CHUNK_SPACE_RELEASE,$/;"	e	enum:KFS::KfsOp_t
CMD_CHUNK_SPACE_RESERVE	cc/libkfsClient/KfsOps.h	/^    CMD_CHUNK_SPACE_RESERVE,$/;"	e	enum:KFS::KfsOp_t
CMD_CLOSE	cc/chunk/KfsOps.h	/^    CMD_CLOSE,$/;"	e	enum:KFS::KfsOp_t
CMD_CLOSE	cc/libkfsClient/KfsOps.h	/^    CMD_CLOSE,$/;"	e	enum:KFS::KfsOp_t
CMD_COALESCE_BLOCK	cc/chunk/KfsOps.h	/^    CMD_COALESCE_BLOCK,$/;"	e	enum:KFS::KfsOp_t
CMD_COALESCE_BLOCKS	cc/libkfsClient/KfsOps.h	/^    CMD_COALESCE_BLOCKS,$/;"	e	enum:KFS::KfsOp_t
CMD_CORRUPT_CHUNK	cc/chunk/KfsOps.h	/^    CMD_CORRUPT_CHUNK,$/;"	e	enum:KFS::KfsOp_t
CMD_CREATE	cc/libkfsClient/KfsOps.h	/^    CMD_CREATE,$/;"	e	enum:KFS::KfsOp_t
CMD_DELETE_CHUNK	cc/chunk/KfsOps.h	/^    CMD_DELETE_CHUNK,$/;"	e	enum:KFS::KfsOp_t
CMD_DISKIO_COMPLETION	cc/chunk/KfsOps.h	/^    CMD_DISKIO_COMPLETION,$/;"	e	enum:KFS::KfsOp_t
CMD_DUMP_CHUNKMAP	cc/chunk/KfsOps.h	/^    CMD_DUMP_CHUNKMAP,$/;"	e	enum:KFS::KfsOp_t
CMD_DUMP_CHUNKMAP	cc/libkfsClient/KfsOps.h	/^    CMD_DUMP_CHUNKMAP$/;"	e	enum:KFS::KfsOp_t
CMD_DUMP_CHUNKTOSERVERMAP	cc/libkfsClient/KfsOps.h	/^    CMD_DUMP_CHUNKTOSERVERMAP,$/;"	e	enum:KFS::KfsOp_t
CMD_GETALLOC	cc/libkfsClient/KfsOps.h	/^    CMD_GETALLOC,$/;"	e	enum:KFS::KfsOp_t
CMD_GETDIRSUMMARY	cc/libkfsClient/KfsOps.h	/^    CMD_GETDIRSUMMARY,$/;"	e	enum:KFS::KfsOp_t
CMD_GETLAYOUT	cc/libkfsClient/KfsOps.h	/^    CMD_GETLAYOUT,$/;"	e	enum:KFS::KfsOp_t
CMD_GET_CHUNK_METADATA	cc/chunk/KfsOps.h	/^    CMD_GET_CHUNK_METADATA,$/;"	e	enum:KFS::KfsOp_t
CMD_GET_CHUNK_METADATA	cc/libkfsClient/KfsOps.h	/^    CMD_GET_CHUNK_METADATA,$/;"	e	enum:KFS::KfsOp_t
CMD_GET_RECORD_APPEND_STATUS	cc/chunk/KfsOps.h	/^    CMD_GET_RECORD_APPEND_STATUS,$/;"	e	enum:KFS::KfsOp_t
CMD_GET_RECORD_APPEND_STATUS	cc/libkfsClient/KfsOps.h	/^    CMD_GET_RECORD_APPEND_STATUS,$/;"	e	enum:KFS::KfsOp_t
CMD_HEARTBEAT	cc/chunk/KfsOps.h	/^    CMD_HEARTBEAT,$/;"	e	enum:KFS::KfsOp_t
CMD_KILL_REMOTE_SYNC	cc/chunk/KfsOps.h	/^    CMD_KILL_REMOTE_SYNC,$/;"	e	enum:KFS::KfsOp_t
CMD_LEASE_ACQUIRE	cc/libkfsClient/KfsOps.h	/^    CMD_LEASE_ACQUIRE,$/;"	e	enum:KFS::KfsOp_t
CMD_LEASE_RELINQUISH	cc/chunk/KfsOps.h	/^    CMD_LEASE_RELINQUISH,$/;"	e	enum:KFS::KfsOp_t
CMD_LEASE_RELINQUISH	cc/libkfsClient/KfsOps.h	/^    CMD_LEASE_RELINQUISH,$/;"	e	enum:KFS::KfsOp_t
CMD_LEASE_RENEW	cc/chunk/KfsOps.h	/^    CMD_LEASE_RENEW,$/;"	e	enum:KFS::KfsOp_t
CMD_LEASE_RENEW	cc/libkfsClient/KfsOps.h	/^    CMD_LEASE_RENEW,$/;"	e	enum:KFS::KfsOp_t
CMD_LOOKUP	cc/libkfsClient/KfsOps.h	/^    CMD_LOOKUP,$/;"	e	enum:KFS::KfsOp_t
CMD_MAKE_CHUNK_STABLE	cc/chunk/KfsOps.h	/^    CMD_MAKE_CHUNK_STABLE,$/;"	e	enum:KFS::KfsOp_t
CMD_METAPING	cc/tools/MonUtils.h	/^        CMD_METAPING,$/;"	e	enum:KFS_MON::KfsMonOp_t
CMD_METASTATS	cc/tools/MonUtils.h	/^        CMD_METASTATS,$/;"	e	enum:KFS_MON::KfsMonOp_t
CMD_METATOGGLE_WORM	cc/tools/MonUtils.h	/^        CMD_METATOGGLE_WORM,$/;"	e	enum:KFS_MON::KfsMonOp_t
CMD_META_HELLO	cc/chunk/KfsOps.h	/^    CMD_META_HELLO,$/;"	e	enum:KFS::KfsOp_t
CMD_MKDIR	cc/libkfsClient/KfsOps.h	/^    CMD_MKDIR,$/;"	e	enum:KFS::KfsOp_t
CMD_NCMDS	cc/chunk/KfsOps.h	/^    CMD_NCMDS$/;"	e	enum:KFS::KfsOp_t
CMD_NCMDS	cc/libkfsClient/KfsOps.h	/^    CMD_NCMDS,$/;"	e	enum:KFS::KfsOp_t
CMD_OPEN	cc/chunk/KfsOps.h	/^    CMD_OPEN,$/;"	e	enum:KFS::KfsOp_t
CMD_OPEN	cc/libkfsClient/KfsOps.h	/^    CMD_OPEN,$/;"	e	enum:KFS::KfsOp_t
CMD_PING	cc/chunk/KfsOps.h	/^    CMD_PING,$/;"	e	enum:KFS::KfsOp_t
CMD_READ	cc/chunk/KfsOps.h	/^    CMD_READ,$/;"	e	enum:KFS::KfsOp_t
CMD_READ	cc/libkfsClient/KfsOps.h	/^    CMD_READ,$/;"	e	enum:KFS::KfsOp_t
CMD_READDIR	cc/libkfsClient/KfsOps.h	/^    CMD_READDIR,$/;"	e	enum:KFS::KfsOp_t
CMD_READDIRPLUS	cc/libkfsClient/KfsOps.h	/^    CMD_READDIRPLUS,$/;"	e	enum:KFS::KfsOp_t
CMD_READ_CHUNKMETA	cc/chunk/KfsOps.h	/^    CMD_READ_CHUNKMETA, \/\/ read out the chunk meta-data$/;"	e	enum:KFS::KfsOp_t
CMD_RECORD_APPEND	cc/chunk/KfsOps.h	/^    CMD_RECORD_APPEND,$/;"	e	enum:KFS::KfsOp_t
CMD_RECORD_APPEND	cc/libkfsClient/KfsOps.h	/^    CMD_RECORD_APPEND,$/;"	e	enum:KFS::KfsOp_t
CMD_REMOVE	cc/libkfsClient/KfsOps.h	/^    CMD_REMOVE,$/;"	e	enum:KFS::KfsOp_t
CMD_RENAME	cc/libkfsClient/KfsOps.h	/^    CMD_RENAME,$/;"	e	enum:KFS::KfsOp_t
CMD_REPLICATE_CHUNK	cc/chunk/KfsOps.h	/^    CMD_REPLICATE_CHUNK,$/;"	e	enum:KFS::KfsOp_t
CMD_RESTART_CHUNK_SERVER	cc/chunk/KfsOps.h	/^    CMD_RESTART_CHUNK_SERVER,$/;"	e	enum:KFS::KfsOp_t
CMD_RETIRE	cc/chunk/KfsOps.h	/^    CMD_RETIRE,$/;"	e	enum:KFS::KfsOp_t
CMD_RETIRE_CHUNKSERVER	cc/tools/MonUtils.h	/^        CMD_RETIRE_CHUNKSERVER$/;"	e	enum:KFS_MON::KfsMonOp_t
CMD_RMDIR	cc/libkfsClient/KfsOps.h	/^    CMD_RMDIR,$/;"	e	enum:KFS::KfsOp_t
CMD_SETMTIME	cc/libkfsClient/KfsOps.h	/^    CMD_SETMTIME,$/;"	e	enum:KFS::KfsOp_t
CMD_SET_PROPERTIES	cc/chunk/KfsOps.h	/^    CMD_SET_PROPERTIES,$/;"	e	enum:KFS::KfsOp_t
CMD_SIZE	cc/chunk/KfsOps.h	/^    CMD_SIZE,$/;"	e	enum:KFS::KfsOp_t
CMD_SIZE	cc/libkfsClient/KfsOps.h	/^    CMD_SIZE,$/;"	e	enum:KFS::KfsOp_t
CMD_SPC_RELEASE	cc/chunk/KfsOps.h	/^    CMD_SPC_RELEASE,$/;"	e	enum:KFS::KfsOp_t
CMD_SPC_RESERVE	cc/chunk/KfsOps.h	/^    CMD_SPC_RESERVE,$/;"	e	enum:KFS::KfsOp_t
CMD_STALE_CHUNKS	cc/chunk/KfsOps.h	/^    CMD_STALE_CHUNKS,$/;"	e	enum:KFS::KfsOp_t
CMD_STATS	cc/chunk/KfsOps.h	/^    CMD_STATS,$/;"	e	enum:KFS::KfsOp_t
CMD_SYNC	cc/chunk/KfsOps.h	/^    CMD_SYNC,$/;"	e	enum:KFS::KfsOp_t
CMD_TIMEOUT	cc/chunk/KfsOps.h	/^    CMD_TIMEOUT,$/;"	e	enum:KFS::KfsOp_t
CMD_TRUNCATE	cc/libkfsClient/KfsOps.h	/^    CMD_TRUNCATE,$/;"	e	enum:KFS::KfsOp_t
CMD_TRUNCATE_CHUNK	cc/chunk/KfsOps.h	/^    CMD_TRUNCATE_CHUNK,$/;"	e	enum:KFS::KfsOp_t
CMD_UNKNOWN	cc/chunk/KfsOps.h	/^    CMD_UNKNOWN,$/;"	e	enum:KFS::KfsOp_t
CMD_UNKNOWN	cc/libkfsClient/KfsOps.h	/^    CMD_UNKNOWN,$/;"	e	enum:KFS::KfsOp_t
CMD_UPSERVERS	cc/libkfsClient/KfsOps.h	/^    CMD_UPSERVERS,$/;"	e	enum:KFS::KfsOp_t
CMD_WRITE	cc/chunk/KfsOps.h	/^    CMD_WRITE,$/;"	e	enum:KFS::KfsOp_t
CMD_WRITE_CHUNKMETA	cc/chunk/KfsOps.h	/^    CMD_WRITE_CHUNKMETA, \/\/ write out the chunk meta-data$/;"	e	enum:KFS::KfsOp_t
CMD_WRITE_ID_ALLOC	cc/chunk/KfsOps.h	/^    CMD_WRITE_ID_ALLOC,$/;"	e	enum:KFS::KfsOp_t
CMD_WRITE_ID_ALLOC	cc/libkfsClient/KfsOps.h	/^    CMD_WRITE_ID_ALLOC,$/;"	e	enum:KFS::KfsOp_t
CMD_WRITE_PREPARE	cc/chunk/KfsOps.h	/^    CMD_WRITE_PREPARE,$/;"	e	enum:KFS::KfsOp_t
CMD_WRITE_PREPARE	cc/libkfsClient/KfsOps.h	/^    CMD_WRITE_PREPARE,$/;"	e	enum:KFS::KfsOp_t
CMD_WRITE_PREPARE_FWD	cc/chunk/KfsOps.h	/^    CMD_WRITE_PREPARE_FWD,$/;"	e	enum:KFS::KfsOp_t
CMD_WRITE_SYNC	cc/chunk/KfsOps.h	/^    CMD_WRITE_SYNC,$/;"	e	enum:KFS::KfsOp_t
CMD_WRITE_SYNC	cc/libkfsClient/KfsOps.h	/^    CMD_WRITE_SYNC,$/;"	e	enum:KFS::KfsOp_t
CMI	cc/chunk/ChunkManager.h	/^    typedef CMap::const_iterator CMI;$/;"	t	class:KFS::ChunkManager
CMap	cc/chunk/ChunkManager.h	/^    > CMap;$/;"	t	class:KFS::ChunkManager
COMMON_CXXUTIL_H	cc/common/cxxutil.h	28;"	d
COMMON_DAILYROLLINGFILEAPPENDER_H	cc/common/DailyRollingFileAppender.h	26;"	d
COMMON_HSIEH_HASH_H	cc/common/hsieh_hash.h	27;"	d
COMMON_KFSDECLS_H	cc/common/kfsdecls.h	28;"	d
COMMON_KFSTYPES_H	cc/common/kfstypes.h	28;"	d
COMMON_KFSVERSION_H	cc/common/Version.h	27;"	d
COMMON_LOG_H	cc/common/log.h	28;"	d
COMMON_PROPERTIES_H	cc/common/properties.h	28;"	d
CONCURRENT_WRITES_PER_NODE_WATERMARK	cc/meta/LayoutManager.cc	/^const uint32_t CONCURRENT_WRITES_PER_NODE_WATERMARK = 10;$/;"	v
CRCandidateSet	cc/meta/LayoutManager.h	/^	typedef ChunkIdSet CRCandidateSet;$/;"	t	namespace:KFS
CRCandidateSetIter	cc/meta/LayoutManager.h	/^	typedef CRCandidateSet::iterator CRCandidateSetIter;$/;"	t	namespace:KFS
CSCounters	cc/meta/LayoutManager.h	/^        > CSCounters;$/;"	t	namespace:KFS
CSMap	cc/meta/LayoutManager.h	/^		CSMap() : mMap(), mIt(mMap.end()), mKey(), mKeyValidFlag(false) {}$/;"	f	class:KFS::CSMap
CSMap	cc/meta/LayoutManager.h	/^	class CSMap {$/;"	c	namespace:KFS
CSMapConstIter	cc/meta/LayoutManager.h	/^	typedef CSMap::const_iterator CSMapConstIter;$/;"	t	namespace:KFS
CSMapIter	cc/meta/LayoutManager.h	/^	typedef CSMap::iterator CSMapIter;$/;"	t	namespace:KFS
CanAppend	cc/libkfsClient/WriteAppender.cc	/^    bool CanAppend()$/;"	f	class:KFS::WriteAppender::Impl	file:
CanBeChunkMaster	cc/meta/ChunkServer.h	/^		bool CanBeChunkMaster() const {$/;"	f	class:KFS::ChunkServer
CanDoLowOnBuffersFlush	cc/chunk/AtomicRecordAppender.cc	/^    bool CanDoLowOnBuffersFlush() const$/;"	f	class:KFS::AtomicRecordAppender
CanReplicateChunkNow	cc/meta/LayoutManager.cc	/^LayoutManager::CanReplicateChunkNow(chunkId_t chunkId,$/;"	f	class:LayoutManager
Cancel	cc/chunk/DiskIo.cc	/^    bool Cancel($/;"	f	class:KFS::DiskIoQueues
Cancel	cc/chunk/KfsOps.h	/^    void Cancel() {$/;"	f	struct:KFS::KfsOp
Cancel	cc/libkfsClient/KfsNetClient.cc	/^        void Cancel()$/;"	f	struct:KFS::KfsNetClient::Impl::OpQueueEntry
Cancel	cc/libkfsClient/KfsNetClient.cc	/^    bool Cancel($/;"	f	class:KFS::KfsNetClient::Impl
Cancel	cc/libkfsClient/KfsNetClient.cc	/^    bool Cancel()$/;"	f	class:KFS::KfsNetClient::Impl
Cancel	cc/libkfsClient/KfsNetClient.cc	/^    void Cancel($/;"	f	class:KFS::KfsNetClient::Impl	file:
Cancel	cc/libkfsClient/KfsNetClient.cc	/^KfsNetClient::Cancel($/;"	f	class:KFS::KfsNetClient
Cancel	cc/libkfsClient/KfsNetClient.cc	/^KfsNetClient::Cancel()$/;"	f	class:KFS::KfsNetClient
Cancel	cc/libkfsIO/DiskEvent.h	/^    int Cancel(int fd) {$/;"	f	struct:KFS::DiskEvent_t
Cancel	cc/libkfsIO/Event.h	/^    void Cancel() {$/;"	f	class:KFS::Event
Cancel	cc/qcdio/qcdiskqueue.cpp	/^    bool Cancel($/;"	f	class:QCDiskQueue::Queue	file:
Cancel	cc/qcdio/qcdiskqueue.cpp	/^QCDiskQueue::Cancel($/;"	f	class:QCDiskQueue
Cancel	cc/qcdio/qcdiskqueue.cpp	/^QCDiskQueue::Queue::Cancel($/;"	f	class:QCDiskQueue::Queue
Cancel	cc/qcdio/qcstutils.h	/^    void Cancel()$/;"	f	class:QCStValueChanger
Cancel	cc/qcdio/qcstutils.h	/^    void Cancel()$/;"	f	class:QCStValueIncrementor
CancelAll	cc/chunk/Replicator.cc	/^Replicator::CancelAll()$/;"	f	class:Replicator
CancelChunkOp	cc/chunk/ChunkManager.cc	/^ChunkManager::CancelChunkOp(KfsCallbackObj *cont, kfsChunkId_t chunkId)$/;"	f	class:KFS::ChunkManager
CancelNonAdjacentPendingRead	cc/libkfsClient/KfsClientInt.h	/^    void CancelNonAdjacentPendingRead() {$/;"	f	struct:KFS::FilePosition
CancelOrSetCompletionIfInFlight	cc/qcdio/qcdiskqueue.cpp	/^QCDiskQueue::CancelOrSetCompletionIfInFlight($/;"	f	class:QCDiskQueue
CancelOrSetCompletionIfInFlight	cc/qcdio/qcdiskqueue.cpp	/^QCDiskQueue::Queue::CancelOrSetCompletionIfInFlight($/;"	f	class:QCDiskQueue::Queue
CancelPendingMakeStable	cc/meta/LayoutManager.cc	/^LayoutManager::CancelPendingMakeStable(fid_t fid, chunkId_t chunkId)$/;"	f	class:LayoutManager
CancelPendingRead	cc/libkfsClient/KfsClientInt.h	/^    void CancelPendingRead() {$/;"	f	struct:KFS::FilePosition
CancelRequest	cc/chunk/BufferManager.cc	/^BufferManager::CancelRequest($/;"	f	class:KFS::BufferManager
CancelRequest	cc/chunk/BufferManager.h	/^        void CancelRequest()$/;"	f	class:KFS::BufferManager::Client
Cd	cc/libkfsClient/KfsClient.cc	/^KfsClient::Cd(const char *pathname)$/;"	f	class:KfsClient
Cd	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::Cd(const char *pathname)$/;"	f	class:KfsClientImpl
ChangeChunkReplication	cc/meta/LayoutManager.cc	/^LayoutManager::ChangeChunkReplication(chunkId_t chunkId)$/;"	f	class:LayoutManager
ChangeChunkSpaceReservaton	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppender::ChangeChunkSpaceReservaton($/;"	f	class:KFS::AtomicRecordAppender
ChangeChunkVers	cc/chunk/ChunkManager.cc	/^ChunkManager::ChangeChunkVers(kfsFileId_t fileId,$/;"	f	class:KFS::ChunkManager
ChangeChunkVersOp	cc/chunk/KfsOps.h	/^    ChangeChunkVersOp(kfsSeq_t s) :$/;"	f	struct:KFS::ChangeChunkVersOp
ChangeChunkVersOp	cc/chunk/KfsOps.h	/^struct ChangeChunkVersOp : public KfsOp {$/;"	s	namespace:KFS
ChangeDiskOverloadState	cc/libkfsIO/NetManager.cc	/^NetManager::ChangeDiskOverloadState(bool v)$/;"	f	class:NetManager
ChangeFileReplicationOp	cc/libkfsClient/KfsOps.h	/^    ChangeFileReplicationOp(kfsSeq_t s, kfsFileId_t f, int16_t r) :$/;"	f	struct:KFS::ChangeFileReplicationOp
ChangeFileReplicationOp	cc/libkfsClient/KfsOps.h	/^struct ChangeFileReplicationOp : public KfsOp {$/;"	s	namespace:KFS
ChangeIncarnationNumber	cc/meta/request.cc	/^ChangeIncarnationNumber(MetaRequest *r)$/;"	f	namespace:KFS
CharBufInputStream	cc/libkfsClient/KfsClient.cc	/^    CharBufInputStream(const char* InBuf, int len)$/;"	f	struct:CharBufInputStream
CharBufInputStream	cc/libkfsClient/KfsClient.cc	/^struct CharBufInputStream :$/;"	s	file:
CheckAllLeases	cc/meta/LayoutManager.cc	/^LayoutManager::CheckAllLeases()$/;"	f	class:LayoutManager
CheckChunkDirs	cc/chunk/ChunkManager.cc	/^ChunkManager::CheckChunkDirs()$/;"	f	class:KFS::ChunkManager
CheckFatalSysError	cc/libkfsIO/NetManager.cc	/^inline static int CheckFatalSysError(int err, const char* msg)$/;"	f	file:
CheckHibernatingServersStatus	cc/meta/LayoutManager.cc	/^LayoutManager::CheckHibernatingServersStatus()$/;"	f	class:LayoutManager
CheckIfOverloaded	cc/chunk/DiskIo.cc	/^    void CheckIfOverloaded()$/;"	f	class:KFS::DiskIoQueues	file:
CheckIfOverloaded	cc/libkfsIO/NetManager.cc	/^NetManager::CheckIfOverloaded()$/;"	f	class:NetManager
CheckLeaseAndChunk	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppender::CheckLeaseAndChunk(const char* prefix)$/;"	f	class:KFS::AtomicRecordAppender
CheckParameters	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppender::CheckParameters($/;"	f	class:KFS::AtomicRecordAppender
Checkpoint	cc/chunk/ChunkManager.cc	/^ChunkManager::Checkpoint()$/;"	f	class:KFS::ChunkManager
Checkpoint	cc/chunk/Logger.cc	/^Logger::Checkpoint(KfsOp *op)$/;"	f	class:Logger
Checkpoint	cc/meta/checkpoint.h	/^	Checkpoint(string d): cpdir(d), cpcount(0) { } $/;"	f	class:KFS::Checkpoint
Checkpoint	cc/meta/checkpoint.h	/^class Checkpoint {$/;"	c	namespace:KFS
CheckpointOp	cc/chunk/KfsOps.h	/^    CheckpointOp(kfsSeq_t s) :$/;"	f	struct:KFS::CheckpointOp
CheckpointOp	cc/chunk/KfsOps.h	/^struct CheckpointOp : public KfsOp {$/;"	s	namespace:KFS
ChildProcessTrackingTimer	cc/meta/ChildProcessTracker.h	/^		ChildProcessTrackingTimer(int timeoutMilliSec = 500) {$/;"	f	class:KFS::ChildProcessTrackingTimer
ChildProcessTrackingTimer	cc/meta/ChildProcessTracker.h	/^	class ChildProcessTrackingTimer : public ITimeout {$/;"	c	namespace:KFS
ChunkAttr	cc/libkfsClient/KfsAttr.h	/^    ChunkAttr(): chunkId(-1), chunkVersion(-1), didAllocation(false),$/;"	f	struct:KFS::ChunkAttr
ChunkAttr	cc/libkfsClient/KfsAttr.h	/^struct ChunkAttr {$/;"	s	namespace:KFS
ChunkBuffer	cc/libkfsClient/KfsClientInt.h	/^    ChunkBuffer():chunkno(-1), start(0), length(0), dirty(false), buf(NULL), bufsz(0) { }$/;"	f	struct:KFS::ChunkBuffer
ChunkBuffer	cc/libkfsClient/KfsClientInt.h	/^struct ChunkBuffer {$/;"	s	namespace:KFS
ChunkCorrupt	cc/meta/LayoutManager.cc	/^LayoutManager::ChunkCorrupt(MetaChunkCorrupt *r)$/;"	f	class:LayoutManager
ChunkDeletor	cc/meta/LayoutManager.cc	/^	ChunkDeletor(chunkId_t c)$/;"	f	class:ChunkDeletor
ChunkDeletor	cc/meta/LayoutManager.cc	/^class ChunkDeletor {$/;"	c	file:
ChunkDirInfo_t	cc/chunk/ChunkManager.h	/^        ChunkDirInfo_t() : usedSpace(0), availableSpace(0) { }$/;"	f	struct:KFS::ChunkManager::ChunkDirInfo_t
ChunkDirInfo_t	cc/chunk/ChunkManager.h	/^    ChunkDirInfo_t() : usedSpace(0), availableSpace(0) { }$/;"	f	struct:KFS::ChunkDirInfo_t
ChunkDirInfo_t	cc/chunk/ChunkManager.h	/^    struct ChunkDirInfo_t {$/;"	s	class:KFS::ChunkManager
ChunkDirInfo_t	cc/chunk/ChunkManager.h	/^struct ChunkDirInfo_t {$/;"	s	namespace:KFS
ChunkIOFailed	cc/chunk/ChunkManager.h	/^    void ChunkIOFailed(kfsChunkId_t chunkId, int err) {$/;"	f	class:KFS::ChunkManager
ChunkIdHash	cc/emulator/LayoutEmulator.h	/^        struct ChunkIdHash$/;"	s	class:KFS::LayoutEmulator
ChunkIdLt	cc/meta/kfsops.cc	/^ChunkIdLt(MetaChunkInfo *m, chunkId_t myid) $/;"	f	file:
ChunkIdMap	cc/chunk/ChunkManager.h	/^        > ChunkIdMap;$/;"	t	class:KFS::ChunkManager::PendingWrites
ChunkIdMatch	cc/meta/kfsops.cc	/^	ChunkIdMatch(seq_t c) : myid(c) { }$/;"	f	class:ChunkIdMatch
ChunkIdMatch	cc/meta/kfsops.cc	/^class ChunkIdMatch {$/;"	c	file:
ChunkIdMatcher	cc/emulator/LayoutEmulator.cc	/^    ChunkIdMatcher(chunkId_t c) : myid(c) { }$/;"	f	class:ChunkIdMatcher
ChunkIdMatcher	cc/emulator/LayoutEmulator.cc	/^class ChunkIdMatcher {$/;"	c	file:
ChunkIdMatcher	cc/meta/LayoutManager.cc	/^	ChunkIdMatcher(chunkId_t c) : myid(c) { }$/;"	f	class:ChunkIdMatcher
ChunkIdMatcher	cc/meta/LayoutManager.cc	/^class ChunkIdMatcher {$/;"	c	file:
ChunkIdSet	cc/meta/ChunkServer.h	/^        	> ChunkIdSet;$/;"	t	class:KFS::ChunkServer
ChunkIdSet	cc/meta/LayoutManager.h	/^	typedef ChunkServer::ChunkIdSet ChunkIdSet;$/;"	t	namespace:KFS
ChunkIdSz	cc/rebalancer/rebalancer.h	/^    struct ChunkIdSz {$/;"	s	namespace:KFS
ChunkInfo	cc/meta/request.h	/^struct ChunkInfo {$/;"	s	namespace:KFS
ChunkInfoHandle	cc/chunk/ChunkManager.cc	/^    ChunkInfoHandle()$/;"	f	class:KFS::ChunkInfoHandle
ChunkInfoHandle	cc/chunk/ChunkManager.cc	/^class ChunkInfoHandle : public KfsCallbackObj$/;"	c	namespace:KFS	file:
ChunkInfo_compare	cc/meta/kfsops.cc	/^ChunkInfo_compare(MetaChunkInfo *first, MetaChunkInfo *second)$/;"	f	file:
ChunkInfo_t	cc/chunk/Chunk.h	/^    ChunkInfo_t() : fileId(0), chunkId(0), chunkVersion(0), chunkSize(0), $/;"	f	struct:KFS::ChunkInfo_t
ChunkInfo_t	cc/chunk/Chunk.h	/^    ChunkInfo_t(const ChunkInfo_t &other) :$/;"	f	struct:KFS::ChunkInfo_t
ChunkInfo_t	cc/chunk/Chunk.h	/^struct ChunkInfo_t {$/;"	s	namespace:KFS
ChunkLayoutInfo	cc/libkfsClient/KfsOps.h	/^    ChunkLayoutInfo() : fileOffset(-1), chunkId(0) { };$/;"	f	struct:KFS::ChunkLayoutInfo
ChunkLayoutInfo	cc/libkfsClient/KfsOps.h	/^struct ChunkLayoutInfo {$/;"	s	namespace:KFS
ChunkLayoutInfo	cc/meta/request.h	/^struct ChunkLayoutInfo {$/;"	s	namespace:KFS
ChunkLru	cc/chunk/ChunkManager.cc	/^typedef QCDLList<ChunkInfoHandle, 0> ChunkLru;$/;"	t	namespace:KFS	file:
ChunkManager	cc/chunk/ChunkManager.cc	/^ChunkManager::ChunkManager()$/;"	f	class:KFS::ChunkManager
ChunkManager	cc/chunk/ChunkManager.h	/^class ChunkManager {$/;"	c	namespace:KFS
ChunkManagerTimeoutImpl	cc/chunk/ChunkManager.cc	/^    ChunkManagerTimeoutImpl(ChunkManager *mgr) : mTimeoutOp(0) {$/;"	f	class:KFS::ChunkManager::ChunkManagerTimeoutImpl
ChunkManagerTimeoutImpl	cc/chunk/ChunkManager.cc	/^class ChunkManager::ChunkManagerTimeoutImpl : public ITimeout {$/;"	c	class:KFS::ChunkManager	file:
ChunkPingOp	cc/tools/MonUtils.h	/^        ChunkPingOp(int32_t s) :$/;"	f	struct:KFS_MON::ChunkPingOp
ChunkPingOp	cc/tools/MonUtils.h	/^    struct ChunkPingOp : public KfsMonOp {$/;"	s	namespace:KFS_MON
ChunkPlacementInfo	cc/meta/LayoutManager.h	/^		ChunkPlacementInfo() :$/;"	f	struct:KFS::ChunkPlacementInfo
ChunkPlacementInfo	cc/meta/LayoutManager.h	/^	struct ChunkPlacementInfo {$/;"	s	namespace:KFS
ChunkReplicationChecker	cc/meta/LayoutManager.cc	/^LayoutManager::ChunkReplicationChecker()$/;"	f	class:LayoutManager
ChunkReplicationDone	cc/emulator/LayoutEmulator.cc	/^LayoutEmulator::ChunkReplicationDone(MetaChunkReplicate *req)$/;"	f	class:LayoutEmulator
ChunkReplicationDone	cc/meta/LayoutManager.cc	/^LayoutManager::ChunkReplicationDone(MetaChunkReplicate *req)$/;"	f	class:LayoutManager
ChunkReplicator	cc/meta/ChunkReplicator.cc	/^ChunkReplicator::ChunkReplicator() :$/;"	f	class:ChunkReplicator
ChunkReplicator	cc/meta/ChunkReplicator.h	/^class ChunkReplicator : public KfsCallbackObj {$/;"	c	namespace:KFS
ChunkReplicatorTimeoutImpl	cc/meta/ChunkReplicator.h	/^	ChunkReplicatorTimeoutImpl(ChunkReplicator *c) : mOwner(c) {$/;"	f	class:KFS::ChunkReplicatorTimeoutImpl
ChunkReplicatorTimeoutImpl	cc/meta/ChunkReplicator.h	/^class ChunkReplicatorTimeoutImpl : public ITimeout {$/;"	c	namespace:KFS
ChunkServer	cc/chunk/ChunkServer.h	/^    ChunkServer() : mOpCount(0), mKickNetThread(false) { };$/;"	f	class:KFS::ChunkServer
ChunkServer	cc/chunk/ChunkServer.h	/^class ChunkServer {$/;"	c	namespace:KFS
ChunkServer	cc/libkfsClient/WriteAppender.cc	/^    typedef KfsNetClient           ChunkServer;$/;"	t	class:KFS::WriteAppender::Impl	file:
ChunkServer	cc/meta/ChunkServer.cc	/^ChunkServer::ChunkServer() :$/;"	f	class:ChunkServer
ChunkServer	cc/meta/ChunkServer.cc	/^ChunkServer::ChunkServer(NetConnectionPtr &conn) :$/;"	f	class:ChunkServer
ChunkServer	cc/meta/ChunkServer.h	/^        class ChunkServer : public KfsCallbackObj,$/;"	c	namespace:KFS
ChunkServer	cc/rebalancer/rebalancer.h	/^        ChunkServer(const ServerLocation &loc, int rack, off_t usedSpace, off_t freeSpace) :$/;"	f	class:KFS::ChunkServer
ChunkServer	cc/rebalancer/rebalancer.h	/^    class ChunkServer {$/;"	c	namespace:KFS
ChunkServerConn	cc/libkfsClient/KfsClientInt.h	/^    ChunkServerConn(const ServerLocation &l) :$/;"	f	struct:KFS::ChunkServerConn
ChunkServerConn	cc/libkfsClient/KfsClientInt.h	/^struct ChunkServerConn {$/;"	s	namespace:KFS
ChunkServerEmulator	cc/emulator/ChunkServerEmulator.cc	/^ChunkServerEmulator::ChunkServerEmulator(const ServerLocation &loc, int rack) : mOutFd(-1)$/;"	f	class:ChunkServerEmulator
ChunkServerEmulator	cc/emulator/ChunkServerEmulator.h	/^    class ChunkServerEmulator : public ChunkServer {$/;"	c	namespace:KFS
ChunkServerEmulatorPtr	cc/emulator/ChunkServerEmulator.h	/^    typedef boost::shared_ptr<ChunkServerEmulator> ChunkServerEmulatorPtr;$/;"	t	namespace:KFS
ChunkServerFactory	cc/meta/ChunkServerFactory.h	/^                ChunkServerFactory() {$/;"	f	class:KFS::ChunkServerFactory
ChunkServerFactory	cc/meta/ChunkServerFactory.h	/^        class ChunkServerFactory : public IAcceptorOwner {$/;"	c	namespace:KFS
ChunkServerHeartbeater	cc/meta/ChunkServerHeartbeater.h	/^		ChunkServerHeartbeater(int heartbeatIntervalSec = 60) {$/;"	f	class:KFS::ChunkServerHeartbeater
ChunkServerHeartbeater	cc/meta/ChunkServerHeartbeater.h	/^	class ChunkServerHeartbeater : public ITimeout {$/;"	c	namespace:KFS
ChunkServerMatcher	cc/meta/ChunkServer.h	/^		ChunkServerMatcher(const ChunkServer *t): target(t) { };$/;"	f	class:KFS::ChunkServerMatcher
ChunkServerMatcher	cc/meta/ChunkServer.h	/^	class ChunkServerMatcher {$/;"	c	namespace:KFS
ChunkServerPtr	cc/meta/request.h	/^typedef boost::shared_ptr<ChunkServer> ChunkServerPtr;$/;"	t	namespace:KFS
ChunkServerPtr	cc/rebalancer/rebalancer.h	/^    typedef boost::shared_ptr<ChunkServer> ChunkServerPtr;$/;"	t	namespace:KFS
ChunkSize	cc/chunk/ChunkManager.cc	/^ChunkManager::ChunkSize(kfsChunkId_t chunkId, kfsFileId_t &fid, off_t *chunkSize, bool *araStableFlag)$/;"	f	class:KFS::ChunkManager
ChunkSizeMap	cc/emulator/LayoutEmulator.h	/^        typedef std::tr1::unordered_map<chunkId_t, std::vector<size_t>, ChunkIdHash > ChunkSizeMap;$/;"	t	class:KFS::LayoutEmulator
ChunkSpaceRelease	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppendManager::ChunkSpaceRelease($/;"	f	class:KFS::AtomicRecordAppendManager
ChunkSpaceReleaseOp	cc/chunk/KfsOps.h	/^    ChunkSpaceReleaseOp(kfsSeq_t s) :$/;"	f	struct:KFS::ChunkSpaceReleaseOp
ChunkSpaceReleaseOp	cc/chunk/KfsOps.h	/^    ChunkSpaceReleaseOp(kfsSeq_t s, kfsChunkId_t c, int n) :$/;"	f	struct:KFS::ChunkSpaceReleaseOp
ChunkSpaceReleaseOp	cc/chunk/KfsOps.h	/^struct ChunkSpaceReleaseOp : public KfsOp {$/;"	s	namespace:KFS
ChunkSpaceReleaseOp	cc/libkfsClient/KfsOps.h	/^    ChunkSpaceReleaseOp(kfsSeq_t s, kfsChunkId_t c, int64_t v, std::vector<WriteInfo> &w, size_t n) :$/;"	f	struct:KFS::ChunkSpaceReleaseOp
ChunkSpaceReleaseOp	cc/libkfsClient/KfsOps.h	/^struct ChunkSpaceReleaseOp : public KfsOp {$/;"	s	namespace:KFS
ChunkSpaceResMap	cc/chunk/ClientSM.h	/^    > ChunkSpaceResMap;$/;"	t	namespace:KFS
ChunkSpaceReservationKey_t	cc/chunk/ClientSM.h	/^        ChunkSpaceReservationKey_t(kfsChunkId_t c, int64_t t) : $/;"	f	struct:KFS::ChunkSpaceReservationKey_t
ChunkSpaceReservationKey_t	cc/chunk/ClientSM.h	/^    struct ChunkSpaceReservationKey_t {$/;"	s	namespace:KFS
ChunkSpaceReserve	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppendManager::ChunkSpaceReserve($/;"	f	class:KFS::AtomicRecordAppendManager
ChunkSpaceReserve	cc/chunk/ClientSM.h	/^    void ChunkSpaceReserve(kfsChunkId_t chunkId, int64_t writeId, size_t nbytes) {$/;"	f	class:KFS::ClientSM
ChunkSpaceReserveOp	cc/chunk/KfsOps.h	/^    ChunkSpaceReserveOp(kfsSeq_t s) :$/;"	f	struct:KFS::ChunkSpaceReserveOp
ChunkSpaceReserveOp	cc/chunk/KfsOps.h	/^    ChunkSpaceReserveOp(kfsSeq_t s, kfsChunkId_t c, size_t n) :$/;"	f	struct:KFS::ChunkSpaceReserveOp
ChunkSpaceReserveOp	cc/chunk/KfsOps.h	/^struct ChunkSpaceReserveOp : public KfsOp {$/;"	s	namespace:KFS
ChunkSpaceReserveOp	cc/libkfsClient/KfsOps.h	/^    ChunkSpaceReserveOp(kfsSeq_t s, kfsChunkId_t c, int64_t v, std::vector<WriteInfo> &w, size_t n) :$/;"	f	struct:KFS::ChunkSpaceReserveOp
ChunkSpaceReserveOp	cc/libkfsClient/KfsOps.h	/^struct ChunkSpaceReserveOp : public KfsOp {$/;"	s	namespace:KFS
ChunkStatsOp	cc/tools/MonUtils.h	/^        ChunkStatsOp(int32_t s) :$/;"	f	struct:KFS_MON::ChunkStatsOp
ChunkStatsOp	cc/tools/MonUtils.h	/^    struct ChunkStatsOp : public KfsMonOp {$/;"	s	namespace:KFS_MON
ChunkVersionChanger	cc/meta/request.cc	/^	ChunkVersionChanger(fid_t f, chunkId_t c, seq_t v) :$/;"	f	class:KFS::ChunkVersionChanger
ChunkVersionChanger	cc/meta/request.cc	/^class ChunkVersionChanger {$/;"	c	namespace:KFS	file:
ChunkWrites	cc/chunk/ChunkManager.h	/^            boost::fast_pool_allocator<OpListEntry> > ChunkWrites;$/;"	t	class:KFS::ChunkManager::PendingWrites
ChunkserverMatcher	cc/libkfsClient/KfsClient.cc	/^    ChunkserverMatcher(const string &l) :$/;"	f	class:ChunkserverMatcher
ChunkserverMatcher	cc/libkfsClient/KfsClient.cc	/^class ChunkserverMatcher {$/;"	c	file:
ChunkserverMatcherByIp	cc/libkfsClient/KfsClient.cc	/^    ChunkserverMatcherByIp(const string &hostname) {$/;"	f	class:ChunkserverMatcherByIp
ChunkserverMatcherByIp	cc/libkfsClient/KfsClient.cc	/^class ChunkserverMatcherByIp {$/;"	c	file:
ClaimFileTableEntry	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::ClaimFileTableEntry(kfsFileId_t parentFid, const char *name,$/;"	f	class:KfsClientImpl
CleanUp	cc/libkfsIO/NetManager.cc	/^NetManager::CleanUp()$/;"	f	class:NetManager
Cleanup	cc/chunk/ChunkServer_main.cc	/^    void Cleanup()$/;"	f	class:Restarter	file:
Cleanup	cc/libkfsIO/NetManager.cc	/^NetManager::Timer::Handler::Cleanup()$/;"	f	class:NetManager::Timer::Handler
CleanupExpiredLeases	cc/chunk/LeaseClerk.cc	/^LeaseClerk::CleanupExpiredLeases()$/;"	f	class:LeaseClerk
CleanupInactiveFds	cc/chunk/ChunkManager.cc	/^ChunkManager::CleanupInactiveFds(time_t now)$/;"	f	class:KFS::ChunkManager
CleanupList	cc/libkfsClient/KfsProtocolWorker.cc	/^    typedef QCDLList<Appender, 0> CleanupList;$/;"	t	class:KFS::KfsProtocolWorker::Impl	file:
Clear	cc/chunk/AtomicRecordAppender.h	/^        void Clear()$/;"	f	struct:KFS::AtomicRecordAppendManager::Counters
Clear	cc/chunk/BufferManager.h	/^        void Clear()$/;"	f	struct:KFS::BufferManager::Counters
Clear	cc/chunk/ChunkManager.h	/^        void Clear()$/;"	f	struct:KFS::ChunkManager::Counters
Clear	cc/chunk/ClientManager.h	/^        void Clear() {$/;"	f	struct:KFS::ClientManager::Counters
Clear	cc/chunk/DiskIo.h	/^        void Clear()$/;"	f	struct:KFS::DiskIo::Counters
Clear	cc/chunk/MetaServerSM.h	/^        void Clear()$/;"	f	struct:KFS::MetaServerSM::Counters
Clear	cc/libkfsClient/KfsAttr.h	/^    void Clear() {$/;"	f	struct:KFS::KfsFileAttr
Clear	cc/libkfsClient/KfsNetClient.cc	/^        void Clear()$/;"	f	struct:KFS::KfsNetClient::Impl::OpQueueEntry
Clear	cc/libkfsClient/KfsNetClient.h	/^        void Clear()$/;"	f	struct:KFS::KfsNetClient::Stats
Clear	cc/libkfsClient/WriteAppender.h	/^        void Clear()$/;"	f	struct:KFS::WriteAppender::Stats
Clear	cc/libkfsIO/IOBuffer.h	/^    void Clear()$/;"	f	class:KFS::IOBuffer
Clear	cc/qcdio/qcdllist.h	/^    static void Clear($/;"	f	class:QCDLList
ClearChunksToMove	cc/meta/ChunkServer.h	/^		void ClearChunksToMove() {$/;"	f	class:KFS::ChunkServer
ClearCurrChunkAttr	cc/libkfsClient/KfsClientInt.h	/^    void ClearCurrChunkAttr(int fd) {$/;"	f	class:KFS::KfsClientImpl
ClearLogFileNamePrefixes	cc/common/BufferedLogWriter.cc	/^    void ClearLogFileNamePrefixes()$/;"	f	class:KFS::BufferedLogWriter::Impl
ClearLogFileNamePrefixes	cc/common/BufferedLogWriter.cc	/^BufferedLogWriter::ClearLogFileNamePrefixes()$/;"	f	class:KFS::BufferedLogWriter
Client	cc/chunk/BufferManager.cc	/^BufferManager::Client::Client()$/;"	f	class:KFS::BufferManager::Client
Client	cc/chunk/BufferManager.h	/^    class Client$/;"	c	class:KFS::BufferManager
Client	cc/qcdio/qciobufferpool.cpp	/^QCIoBufferPool::Client::Client()$/;"	f	class:QCIoBufferPool::Client
Client	cc/qcdio/qciobufferpool.h	/^    class Client$/;"	c	class:QCIoBufferPool
ClientManager	cc/chunk/ClientManager.h	/^    ClientManager()$/;"	f	class:KFS::ClientManager
ClientManager	cc/chunk/ClientManager.h	/^class ClientManager : public IAcceptorOwner {$/;"	c	namespace:KFS
ClientManager	cc/meta/ClientManager.h	/^        ClientManager() {$/;"	f	class:KFS::ClientManager
ClientManager	cc/meta/ClientManager.h	/^    class ClientManager : public IAcceptorOwner {$/;"	c	namespace:KFS
ClientSM	cc/chunk/ClientSM.cc	/^ClientSM::ClientSM(NetConnectionPtr &conn)$/;"	f	class:ClientSM
ClientSM	cc/chunk/ClientSM.h	/^class ClientSM : public KfsCallbackObj, private BufferManager::Client {$/;"	c	namespace:KFS
ClientSM	cc/meta/ClientSM.cc	/^ClientSM::ClientSM(NetConnectionPtr &conn)$/;"	f	class:ClientSM
ClientSM	cc/meta/ClientSM.h	/^    class ClientSM : public KfsCallbackObj {$/;"	c	namespace:KFS
Client_dealloc	cc/access/KfsModulePy.cc	/^Client_dealloc(PyObject *pself)$/;"	f	file:
Client_init	cc/access/KfsModulePy.cc	/^Client_init(PyObject *pself, PyObject *args, PyObject *kwds)$/;"	f	file:
Client_members	cc/access/KfsModulePy.cc	/^static PyMemberDef Client_members[] = {$/;"	v	file:
Client_methods	cc/access/KfsModulePy.cc	/^static PyMethodDef Client_methods[] = {$/;"	v	file:
Client_new	cc/access/KfsModulePy.cc	/^Client_new(PyTypeObject *type, PyObject *args, PyObject *kwds)$/;"	f	file:
Client_print	cc/access/KfsModulePy.cc	/^Client_print(PyObject *pself, FILE *fp, int flags)$/;"	f	file:
Client_repr	cc/access/KfsModulePy.cc	/^Client_repr(PyObject *pself)$/;"	f	file:
Clone	cc/libkfsIO/IOBuffer.cc	/^IOBuffer *IOBuffer::Clone() const$/;"	f	class:IOBuffer
CloneWriteOp	cc/chunk/ChunkManager.cc	/^ChunkManager::CloneWriteOp(int64_t writeId)$/;"	f	class:KFS::ChunkManager
Close	cc/chunk/DiskIo.cc	/^DiskIo::Close()$/;"	f	class:KFS::DiskIo
Close	cc/chunk/DiskIo.cc	/^DiskIo::File::Close($/;"	f	class:KFS::DiskIo::File
Close	cc/common/BufferedLogWriter.cc	/^    void Close()$/;"	f	class:KFS::BufferedLogWriter::Impl
Close	cc/common/BufferedLogWriter.cc	/^BufferedLogWriter::Close()$/;"	f	class:KFS::BufferedLogWriter
Close	cc/libkfsClient/KfsClient.cc	/^KfsClient::Close(int fd)$/;"	f	class:KfsClient
Close	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::Close(int fd)$/;"	f	class:KfsClientImpl
Close	cc/libkfsClient/WriteAppender.cc	/^    int Close()$/;"	f	class:KFS::WriteAppender::Impl
Close	cc/libkfsClient/WriteAppender.cc	/^WriteAppender::Close()$/;"	f	class:KFS::WriteAppender
Close	cc/libkfsIO/FileHandle.h	/^        void Close() {$/;"	f	struct:KFS::FileHandle_t
Close	cc/libkfsIO/NetConnection.h	/^    void Close() {$/;"	f	class:KFS::NetConnection
Close	cc/libkfsIO/TcpSocket.cc	/^void TcpSocket::Close()$/;"	f	class:TcpSocket
CloseChunk	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppendManager::CloseChunk($/;"	f	class:KFS::AtomicRecordAppendManager
CloseChunk	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppender::CloseChunk(CloseOp* op, int64_t writeId, bool& forwardFlag)$/;"	f	class:KFS::AtomicRecordAppender
CloseChunk	cc/chunk/ChunkManager.cc	/^ChunkManager::CloseChunk(kfsChunkId_t chunkId)$/;"	f	class:KFS::ChunkManager
CloseChunk	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::CloseChunk(int fd)$/;"	f	class:KfsClientImpl
CloseChunk	cc/libkfsClient/WriteAppender.cc	/^    void CloseChunk()$/;"	f	class:KFS::WriteAppender::Impl	file:
CloseFile	cc/qcdio/qcdiskqueue.cpp	/^QCDiskQueue::CloseFile($/;"	f	class:QCDiskQueue
CloseFile	cc/qcdio/qcdiskqueue.cpp	/^QCDiskQueue::Queue::CloseFile($/;"	f	class:QCDiskQueue::Queue
CloseFileStatus	cc/qcdio/qcdiskqueue.h	/^    typedef Status CloseFileStatus;$/;"	t	class:QCDiskQueue
CloseOp	cc/chunk/KfsOps.h	/^    CloseOp(kfsSeq_t s, const CloseOp* op = 0) :$/;"	f	struct:KFS::CloseOp
CloseOp	cc/chunk/KfsOps.h	/^struct CloseOp : public KfsOp {$/;"	s	namespace:KFS
CloseOp	cc/libkfsClient/KfsOps.h	/^    CloseOp(kfsSeq_t s, kfsChunkId_t c) :$/;"	f	struct:KFS::CloseOp
CloseOp	cc/libkfsClient/KfsOps.h	/^    CloseOp(kfsSeq_t s, kfsChunkId_t c, const std::vector<WriteInfo>& wi) :$/;"	f	struct:KFS::CloseOp
CloseOp	cc/libkfsClient/KfsOps.h	/^struct CloseOp : public KfsOp {$/;"	s	namespace:KFS
CmdHandlers	cc/tools/kfsshell_main.cc	/^typedef map <string, cmdHandler> CmdHandlers;$/;"	t	file:
CmdHandlersIter	cc/tools/kfsshell_main.cc	/^typedef map <string, cmdHandler>::iterator CmdHandlersIter;$/;"	t	file:
Cntrs	cc/chunk/AtomicRecordAppender.cc	/^    static AtomicRecordAppendManager::Counters& Cntrs()$/;"	f	class:KFS::AtomicRecordAppender	file:
Cntrs	cc/chunk/AtomicRecordAppender.cc	/^inline AtomicRecordAppendManager::Counters& AtomicRecordAppendManager::Cntrs()$/;"	f	class:KFS::AtomicRecordAppendManager
CoalesceBlock	cc/chunk/ChunkManager.cc	/^ChunkManager::CoalesceBlock(kfsFileId_t srcFid, kfsChunkId_t srcChunkId,$/;"	f	class:KFS::ChunkManager
CoalesceBlockOp	cc/chunk/KfsOps.h	/^    CoalesceBlockOp(kfsSeq_t s) :$/;"	f	struct:KFS::CoalesceBlockOp
CoalesceBlockOp	cc/chunk/KfsOps.h	/^struct CoalesceBlockOp : public KfsOp {$/;"	s	namespace:KFS
CoalesceBlocks	cc/libkfsClient/KfsClient.cc	/^KfsClient::CoalesceBlocks(const char *srcPath, const char *dstPath, off_t *dstStartOffset)$/;"	f	class:KfsClient
CoalesceBlocks	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::CoalesceBlocks(const char *srcPath, const char *dstPath, off_t *dstStartOffset)$/;"	f	class:KfsClientImpl
CoalesceBlocks	cc/meta/LayoutManager.cc	/^LayoutManager::CoalesceBlocks(const vector<chunkId_t>& srcChunks, fid_t srcFid,$/;"	f	class:LayoutManager
CoalesceBlocksOp	cc/libkfsClient/KfsOps.h	/^    CoalesceBlocksOp(kfsSeq_t s, std::string o, std::string n) :$/;"	f	struct:KFS::CoalesceBlocksOp
CoalesceBlocksOp	cc/libkfsClient/KfsOps.h	/^struct CoalesceBlocksOp: public KfsOp {$/;"	s	namespace:KFS
Compact	cc/qcdio/qcfdpoll.cpp	/^    void Compact()$/;"	f	class:QCFdPoll::Impl	file:
CompareChunkReplicas	cc/libkfsClient/KfsClient.cc	/^KfsClient::CompareChunkReplicas(const char *pathname, string &md5sum)$/;"	f	class:KfsClient
CompareChunkReplicas	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::CompareChunkReplicas(const char *pathname, string &md5sum)$/;"	f	class:KfsClientImpl
Completion	cc/libkfsClient/WriteAppender.h	/^        Completion($/;"	f	class:KFS::WriteAppender::Completion
Completion	cc/libkfsClient/WriteAppender.h	/^        Completion()$/;"	f	class:KFS::WriteAppender::Completion
Completion	cc/libkfsClient/WriteAppender.h	/^    class Completion$/;"	c	class:KFS::WriteAppender
CompletionStatus	cc/qcdio/qcdiskqueue.cpp	/^    typedef QCDiskQueue::CompletionStatus CompletionStatus;$/;"	t	class:QCDiskQueue::RequestWaiter	file:
CompletionStatus	cc/qcdio/qcdiskqueue.h	/^        CompletionStatus($/;"	f	class:QCDiskQueue::CompletionStatus
CompletionStatus	cc/qcdio/qcdiskqueue.h	/^    class CompletionStatus : public Status$/;"	c	class:QCDiskQueue
ComputeBlockChecksum	cc/libkfsIO/Checksum.cc	/^ComputeBlockChecksum(const IOBuffer *data, size_t len)$/;"	f	namespace:KFS
ComputeBlockChecksum	cc/libkfsIO/Checksum.cc	/^ComputeBlockChecksum(const char *buf, size_t len)$/;"	f	namespace:KFS
ComputeChecksum	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppender::ComputeChecksum($/;"	f	class:KFS::AtomicRecordAppender
ComputeChecksum	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppender::ComputeChecksum()$/;"	f	class:KFS::AtomicRecordAppender
ComputeChecksums	cc/libkfsIO/Checksum.cc	/^ComputeChecksums(const IOBuffer *data, size_t len)$/;"	f	namespace:KFS
ComputeChecksums	cc/libkfsIO/Checksum.cc	/^ComputeChecksums(const char *buf, size_t len)$/;"	f	namespace:KFS
ComputeFilesize	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::ComputeFilesize(kfsFileId_t kfsfid)$/;"	f	class:KfsClientImpl
ComputeFilesizes	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::ComputeFilesizes(vector<KfsFileAttr> &fattrs, vector<FileChunkInfo> &lastChunkInfo)$/;"	f	class:KfsClientImpl
ComputeFilesizes	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::ComputeFilesizes(vector<KfsFileAttr> &fattrs, vector<FileChunkInfo> &lastChunkInfo,$/;"	f	class:KfsClientImpl
ComputeTimeDiff	cc/chunk/Utils.cc	/^float KFS::ComputeTimeDiff(const struct timeval &startTime, const struct timeval &endTime)$/;"	f	class:KFS
ComputeTimeDiff	cc/libkfsClient/KfsRead.cc	/^static double ComputeTimeDiff(const struct timeval &startTime, const struct timeval &endTime)$/;"	f	file:
ComputeTimeDiff	cc/meta/util.cc	/^float KFS::ComputeTimeDiff(const struct timeval &startTime, $/;"	f	class:KFS
ConfigParser	python/flogger/flogger.py	/^import ConfigParser$/;"	i
ConfigParser	python/rw/rw.py	/^import ConfigParser$/;"	i
ConfigParser	python/unittests/dirops.py	/^import ConfigParser$/;"	i
ConfigParser	python/unittests/worm.py	/^import ConfigParser$/;"	i
ConfigParser	python/unittests/write-flush.py	/^import ConfigParser$/;"	i
ConfigParser	python/unittests/write.py	/^import ConfigParser$/;"	i
ConnEntry	cc/libkfsIO/NetErrorSimulator.cc	/^        ConnEntry($/;"	f	struct:KFS::NetErrorSimulator::ConnEntry
ConnEntry	cc/libkfsIO/NetErrorSimulator.cc	/^    struct ConnEntry$/;"	s	class:KFS::NetErrorSimulator	file:
ConnMap	cc/libkfsIO/NetErrorSimulator.cc	/^    > ConnMap;$/;"	t	class:KFS::NetErrorSimulator	file:
Connect	cc/chunk/MetaServerSM.cc	/^MetaServerSM::Connect()$/;"	f	class:MetaServerSM
Connect	cc/chunk/RemoteSyncSM.cc	/^RemoteSyncSM::Connect()$/;"	f	class:RemoteSyncSM
Connect	cc/libkfsClient/KfsClientInt.h	/^    void Connect(bool nonblockingConnect = false) {$/;"	f	struct:KFS::ChunkServerConn
Connect	cc/libkfsIO/TcpSocket.cc	/^int TcpSocket::Connect(const ServerLocation &location, bool nonblockingConnect)$/;"	f	class:TcpSocket
Connect	cc/libkfsIO/TcpSocket.cc	/^int TcpSocket::Connect(const struct sockaddr_in *remoteAddr, bool nonblockingConnect)$/;"	f	class:TcpSocket
ConnectToMetaServer	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::ConnectToMetaServer()$/;"	f	class:KfsClientImpl
ConnectionUptime	cc/chunk/MetaServerSM.cc	/^MetaServerSM::ConnectionUptime() const$/;"	f	class:MetaServerSM
Consume	cc/libkfsIO/BufferedSocket.h	/^    void Consume(int nbytes) {$/;"	f	class:KFS::BufferedSocket
Consume	cc/libkfsIO/IOBuffer.cc	/^int IOBuffer::Consume(int numBytes)$/;"	f	class:IOBuffer
Consume	cc/libkfsIO/IOBuffer.cc	/^int IOBufferData::Consume(int numBytes)$/;"	f	class:IOBufferData
Consumer	cc/libkfsIO/IOBuffer.h	/^    char *Consumer() { return mConsumer; }$/;"	f	class:KFS::IOBufferData
Consumer	cc/libkfsIO/IOBuffer.h	/^    const char *Consumer() const { return mConsumer; }$/;"	f	class:KFS::IOBufferData
Copy	cc/libkfsIO/IOBuffer.cc	/^IOBuffer::Copy(const IOBuffer* buf, int numBytes)$/;"	f	class:IOBuffer
CopyBufs	cc/qcdio/qcdiskqueue.cpp	/^    void CopyBufs($/;"	f	class:QCDiskQueue::RequestWaiter	file:
CopyDir	cc/tools/KfsCp.cc	/^CopyDir(const string &srcDirname, string dstDirname)$/;"	f
CopyDir	cc/tools/KfsToolsCommon.cc	/^KFS::tools::CopyDir(KfsClientPtr kfsClient, const string & srcDirname, string dstDirname)$/;"	f	class:KFS::tools
CopyFile	cc/tools/KfsCp.cc	/^CopyFile(const string &srcPath, const string &dstPath)$/;"	f
CopyFile	cc/tools/KfsToolsCommon.cc	/^KFS::tools::CopyFile(KfsClientPtr kfsClient, const string &srcPath, const string &dstPath)$/;"	f	class:KFS::tools
CopyFile2	cc/tools/KfsCp.cc	/^CopyFile2(string srcfilename, string dstfilename)$/;"	f
CopyFile2	cc/tools/KfsToolsCommon.cc	/^CopyFile2(KfsClientPtr kfsClient, string srcfilename, string dstfilename)$/;"	f	file:
CopyFromChunkBuf	cc/libkfsClient/KfsRead.cc	/^KfsClientImpl::CopyFromChunkBuf(int fd, char *buf, size_t numBytes)$/;"	f	class:KfsClientImpl
CopyIn	cc/libkfsIO/IOBuffer.cc	/^int IOBuffer::CopyIn(const char *buf, int numBytes)$/;"	f	class:IOBuffer
CopyIn	cc/libkfsIO/IOBuffer.cc	/^int IOBufferData::CopyIn(const IOBufferData *other, int numBytes)$/;"	f	class:IOBufferData
CopyIn	cc/libkfsIO/IOBuffer.cc	/^int IOBufferData::CopyIn(const char *buf, int numBytes)$/;"	f	class:IOBufferData
CopyOut	cc/libkfsIO/IOBuffer.cc	/^int IOBuffer::CopyOut(char *buf, int numBytes) const$/;"	f	class:IOBuffer
CopyOut	cc/libkfsIO/IOBuffer.cc	/^int IOBufferData::CopyOut(char *buf, int numBytes) const$/;"	f	class:IOBufferData
CorruptChunkOp	cc/chunk/KfsOps.h	/^    CorruptChunkOp(kfsSeq_t s, kfsFileId_t f, kfsChunkId_t c) :$/;"	f	struct:KFS::CorruptChunkOp
CorruptChunkOp	cc/chunk/KfsOps.h	/^struct CorruptChunkOp : public KfsOp {$/;"	s	namespace:KFS
Count	cc/common/BufferedLogWriter.cc	/^    typedef uint64_t Count;$/;"	t	class:KFS::BufferedLogWriter::Impl	file:
Counter	cc/chunk/AtomicRecordAppender.h	/^        typedef int64_t Counter;$/;"	t	struct:KFS::AtomicRecordAppendManager::Counters
Counter	cc/chunk/BufferManager.h	/^        typedef int64_t Counter;$/;"	t	struct:KFS::BufferManager::Counters
Counter	cc/chunk/ChunkManager.h	/^        typedef int64_t Counter;$/;"	t	struct:KFS::ChunkManager::Counters
Counter	cc/chunk/ClientManager.h	/^        typedef int64_t Counter;$/;"	t	struct:KFS::ClientManager::Counters
Counter	cc/chunk/DiskIo.h	/^        typedef int64_t Counter;$/;"	t	struct:KFS::DiskIo::Counters
Counter	cc/chunk/MetaServerSM.h	/^        typedef int64_t Counter;$/;"	t	struct:KFS::MetaServerSM::Counters
Counter	cc/libkfsClient/KfsNetClient.h	/^        typedef int64_t Counter;$/;"	t	struct:KFS::KfsNetClient::Stats
Counter	cc/libkfsClient/WriteAppender.h	/^        typedef int64_t Counter;$/;"	t	struct:KFS::WriteAppender::Stats
Counter	cc/libkfsIO/Counter.h	/^    Counter() : mName(""), mCount(0), mTimeSpent(0.0) { }$/;"	f	class:KFS::Counter
Counter	cc/libkfsIO/Counter.h	/^    Counter(const char *name) : mName(name), mCount(0), mTimeSpent(0.0) { }$/;"	f	class:KFS::Counter
Counter	cc/libkfsIO/Counter.h	/^class Counter {$/;"	c	namespace:KFS
Counter	cc/meta/ClientSM.cc	/^		Counter()$/;"	f	struct:RequestStatsGatherer::Counter
Counter	cc/meta/ClientSM.cc	/^	struct Counter {$/;"	s	class:RequestStatsGatherer	file:
CounterManager	cc/libkfsIO/Counter.h	/^    CounterManager() { };$/;"	f	class:KFS::CounterManager
CounterManager	cc/libkfsIO/Counter.h	/^class CounterManager {$/;"	c	namespace:KFS
CounterMap	cc/libkfsIO/Counter.h	/^typedef std::tr1::unordered_map<std::string, Counter *> CounterMap;$/;"	t	namespace:KFS
CounterMapIterator	cc/libkfsIO/Counter.h	/^typedef std::tr1::unordered_map<std::string, Counter *>::const_iterator CounterMapIterator;$/;"	t	namespace:KFS
Counters	cc/chunk/AtomicRecordAppender.h	/^    struct Counters$/;"	s	class:KFS::AtomicRecordAppendManager
Counters	cc/chunk/BufferManager.h	/^    struct Counters$/;"	s	class:KFS::BufferManager
Counters	cc/chunk/ChunkManager.h	/^    struct Counters$/;"	s	class:KFS::ChunkManager
Counters	cc/chunk/ClientManager.h	/^    struct Counters$/;"	s	class:KFS::ClientManager
Counters	cc/chunk/DiskIo.cc	/^    typedef DiskIo::Counters Counters;$/;"	t	class:KFS::DiskIoQueues	file:
Counters	cc/chunk/DiskIo.h	/^    struct Counters$/;"	s	class:KFS::DiskIo
Counters	cc/chunk/MetaServerSM.h	/^    struct Counters$/;"	s	class:KFS::MetaServerSM
Counters	cc/common/BufferedLogWriter.h	/^    struct Counters$/;"	s	class:KFS::BufferedLogWriter
Create	cc/libkfsClient/KfsClient.cc	/^KfsClient::Create(const char *pathname, int numReplicas, bool exclusive, const std::string optionalHandler)$/;"	f	class:KfsClient
Create	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::Create(const char *pathname, int numReplicas, bool exclusive, const std::string optionalHandler)$/;"	f	class:KfsClientImpl
Create	cc/libkfsClient/KfsProtocolWorker.cc	/^        static AsyncRequest& Create($/;"	f	class:KFS::KfsProtocolWorker::Impl::AsyncRequest
Create	cc/libkfsClient/WriteAppender.cc	/^    void Create()$/;"	f	class:KFS::WriteAppender::Impl	file:
Create	cc/qcdio/qciobufferpool.cpp	/^    int Create($/;"	f	class:QCIoBufferPool::Partition
Create	cc/qcdio/qciobufferpool.cpp	/^QCIoBufferPool::Create($/;"	f	class:QCIoBufferPool
CreateKfsCallbackObj	cc/chunk/ClientManager.h	/^    KfsCallbackObj *CreateKfsCallbackObj(NetConnectionPtr &conn) {$/;"	f	class:KFS::ClientManager
CreateKfsCallbackObj	cc/meta/ChunkServerFactory.h	/^                KfsCallbackObj *CreateKfsCallbackObj(NetConnectionPtr &conn) {$/;"	f	class:KFS::ChunkServerFactory
CreateKfsCallbackObj	cc/meta/ClientManager.h	/^        KfsCallbackObj *CreateKfsCallbackObj(NetConnectionPtr &conn) {$/;"	f	class:KFS::ClientManager
CreateOp	cc/libkfsClient/KfsOps.h	/^    CreateOp(kfsSeq_t s, kfsFileId_t p, const char *f, int n, bool e, const std::string h="") :$/;"	f	struct:KFS::CreateOp
CreateOp	cc/libkfsClient/KfsOps.h	/^struct CreateOp : public KfsOp {$/;"	s	namespace:KFS
Ctl	cc/qcdio/qcfdpoll.cpp	/^    int Ctl($/;"	f	class:QCFdPoll::Impl	file:
Ctl	cc/qcdio/qcfdpoll.cpp	/^    int Ctl(Fd inFd, int inOpType, bool inRemoveFlag) $/;"	f	class:QCFdPoll::Impl	file:
DEFAULT_BUF_SIZE	java/org/kosmix/kosmosfs/access/KfsInputChannel.java	/^    private static final int DEFAULT_BUF_SIZE = 1 << 20;$/;"	f	class:KfsInputChannel	file:
DEFAULT_BUF_SIZE	java/org/kosmix/kosmosfs/access/KfsOutputChannel.java	/^    private static final int DEFAULT_BUF_SIZE = 1 << 20;$/;"	f	class:KfsOutputChannel	file:
DEFAULT_NUM_RETRIES_PER_OP	cc/libkfsClient/KfsClientInt.h	/^const int DEFAULT_NUM_RETRIES_PER_OP = 6;$/;"	m	namespace:KFS
DailyRollingFileAppender	cc/common/DailyRollingFileAppender.cc	/^DailyRollingFileAppender::DailyRollingFileAppender(const string &name, const string &fileName,$/;"	f	class:log4cpp::DailyRollingFileAppender
DailyRollingFileAppender	cc/common/DailyRollingFileAppender.h	/^    class LOG4CPP_EXPORT DailyRollingFileAppender : public LayoutAppender {$/;"	c	namespace:log4cpp
DeallocContentBuf	cc/libkfsClient/KfsOps.h	/^    void DeallocContentBuf() {$/;"	f	struct:KFS::KfsOp
Deallocate	cc/chunk/DiskIo.cc	/^        virtual void Deallocate($/;"	f	class:KFS::DiskIoQueues::BufferAllocator
Deallocate	cc/libkfsClient/KfsAsyncRW.h	/^        void Deallocate(char *buf) {  }$/;"	f	class:KFS::NullAllocator
Deallocate	cc/libkfsClient/KfsProtocolWorker.cc	/^        virtual void Deallocate($/;"	f	class:KFS::KfsProtocolWorker::Impl::DoNotDeallocate
Deallocate	cc/meta/metaserver_main.cc	/^    virtual void Deallocate($/;"	f	class:BufferAllocator
DebugChecksum	cc/libkfsIO/IOBuffer.cc	/^inline void IOBuffer::DebugChecksum(const IOBuffer& buf, int numBytes) {}$/;"	f	class:IOBuffer
DebugChecksum	cc/libkfsIO/IOBuffer.cc	/^inline void IOBuffer::DebugChecksum(const IOBuffer& buf, int numBytes)$/;"	f	class:IOBuffer
DebugChecksum	cc/libkfsIO/IOBuffer.cc	/^inline void IOBuffer::DebugChecksum(const IOBufferData& buf)           {}$/;"	f	class:IOBuffer
DebugChecksum	cc/libkfsIO/IOBuffer.cc	/^inline void IOBuffer::DebugChecksum(const IOBufferData& buf)$/;"	f	class:IOBuffer
DebugChecksum	cc/libkfsIO/IOBuffer.cc	/^inline void IOBuffer::DebugChecksum(const char* buf, int len)          {}$/;"	f	class:IOBuffer
DebugChecksum	cc/libkfsIO/IOBuffer.cc	/^inline void IOBuffer::DebugChecksum(const char* buf, int len)$/;"	f	class:IOBuffer
DebugVerify	cc/libkfsIO/IOBuffer.cc	/^inline void IOBuffer::DebugVerify() const                              {}$/;"	f	class:IOBuffer
DebugVerify	cc/libkfsIO/IOBuffer.cc	/^inline void IOBuffer::DebugVerify() const$/;"	f	class:IOBuffer
DebugVerify	cc/libkfsIO/IOBuffer.cc	/^inline void IOBuffer::DebugVerify(bool updateChecksum)                 {}$/;"	f	class:IOBuffer
DebugVerify	cc/libkfsIO/IOBuffer.cc	/^inline void IOBuffer::DebugVerify(bool updateChecksum)$/;"	f	class:IOBuffer
DecAppendersWithWidCount	cc/chunk/AtomicRecordAppender.cc	/^    void DecAppendersWithWidCount()$/;"	f	class:KFS::AtomicRecordAppender	file:
DecAppendersWithWidCount	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppendManager::DecAppendersWithWidCount()$/;"	f	class:KFS::AtomicRecordAppendManager
DecChunkWriteCount	cc/meta/LayoutManager.cc	/^	DecChunkWriteCount(const CSMap& map, fid_t fid, chunkId_t chunkId)$/;"	f	class:DecChunkWriteCount
DecChunkWriteCount	cc/meta/LayoutManager.cc	/^class DecChunkWriteCount {$/;"	c	file:
DecLongtermWait	cc/libkfsIO/Event.h	/^    int DecLongtermWait(int numMs) {$/;"	f	class:KFS::Event
DecOpenAppenderCount	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppendManager::DecOpenAppenderCount()$/;"	f	class:KFS::AtomicRecordAppendManager
Decrement	cc/qcdio/qcstutils.h	/^    void Decrement()$/;"	f	class:QCStValueIncrementor
Delete	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppender::Delete()$/;"	f	class:KFS::AtomicRecordAppender
Delete	cc/chunk/ChunkManager.cc	/^    void Delete(ChunkInfoHandle** chunkInfoLists)$/;"	f	class:KFS::ChunkInfoHandle
Delete	cc/chunk/ChunkManager.cc	/^inline void ChunkManager::Delete(ChunkInfoHandle& cih) {$/;"	f	class:KFS::ChunkManager
Delete	cc/chunk/ChunkManager.h	/^        bool Delete(kfsChunkId_t chunkId, kfsSeq_t chunkVersion)$/;"	f	class:KFS::ChunkManager::PendingWrites
Delete	cc/chunk/DiskIo.cc	/^    void Delete($/;"	f	class:KFS::DiskQueue
DeleteAddlChunkReplicas	cc/meta/LayoutManager.cc	/^LayoutManager::DeleteAddlChunkReplicas(chunkId_t chunkId, ChunkPlacementInfo &clli,$/;"	f	class:LayoutManager
DeleteAll	cc/meta/ClientSM.cc	/^DeleteAll(LIST& list)$/;"	f	file:
DeleteChunk	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppendManager:: DeleteChunk(kfsChunkId_t chunkId)$/;"	f	class:KFS::AtomicRecordAppendManager
DeleteChunk	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppender::DeleteChunk()$/;"	f	class:KFS::AtomicRecordAppender
DeleteChunk	cc/chunk/ChunkManager.cc	/^ChunkManager::DeleteChunk(kfsChunkId_t chunkId)$/;"	f	class:KFS::ChunkManager
DeleteChunk	cc/meta/ChunkServer.cc	/^ChunkServer::DeleteChunk(chunkId_t chunkId)$/;"	f	class:ChunkServer
DeleteChunk	cc/meta/LayoutManager.cc	/^LayoutManager::DeleteChunk(chunkId_t chunkId)$/;"	f	class:LayoutManager
DeleteChunk	cc/meta/meta.cc	/^MetaChunkInfo::DeleteChunk()$/;"	f	class:MetaChunkInfo
DeleteChunkOp	cc/chunk/KfsOps.h	/^    DeleteChunkOp(kfsSeq_t s) :$/;"	f	struct:KFS::DeleteChunkOp
DeleteChunkOp	cc/chunk/KfsOps.h	/^struct DeleteChunkOp : public KfsOp {$/;"	s	namespace:KFS
DeleteIfNeeded	cc/chunk/AtomicRecordAppender.cc	/^    bool DeleteIfNeeded()$/;"	f	class:KFS::AtomicRecordAppender	file:
DeleteOldLogsFiles	cc/common/BufferedLogWriter.cc	/^    static void DeleteOldLogsFiles($/;"	f	class:KFS::BufferedLogWriter::Impl	file:
Dequeue	cc/libkfsClient/KfsAsyncRW.cc	/^Asyncer::Dequeue(AsyncReadReq **req)$/;"	f	class:Asyncer
Dequeue	cc/libkfsClient/KfsAsyncRW.cc	/^Asyncer::Dequeue(AsyncWriteReq **req)$/;"	f	class:Asyncer
Dequeue	cc/qcdio/qcdiskqueue.cpp	/^    Request* Dequeue()$/;"	f	class:QCDiskQueue::Queue	file:
Deserialize	cc/chunk/Chunk.h	/^    int Deserialize(const DiskChunkInfo_t &dci, bool validate) {$/;"	f	struct:KFS::ChunkInfo_t
Deserialize	cc/chunk/chunkscrubber_main.cc	/^static int Deserialize(ChunkInfo_t& chunkInfo, int fd, bool validate)$/;"	f	file:
Destroy	cc/libkfsIO/Globals.cc	/^Globals_t::Destroy()$/;"	f	class:KFS::libkfsio::Globals_t
Destroy	cc/qcdio/qciobufferpool.cpp	/^    void Destroy()$/;"	f	class:QCIoBufferPool::Partition
Destroy	cc/qcdio/qciobufferpool.cpp	/^QCIoBufferPool::Destroy()$/;"	f	class:QCIoBufferPool
DestroyGlobals	cc/libkfsIO/Globals.h	/^        inline static void DestroyGlobals()$/;"	f	namespace:KFS::libkfsio
Detach	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppendManager::Detach(AtomicRecordAppender& appender)$/;"	f	class:KFS::AtomicRecordAppendManager
Detach	cc/qcdio/qcstutils.h	/^    void Detach()$/;"	f	class:QCStMutexLocker
Detach	cc/qcdio/qcstutils.h	/^    void Detach()$/;"	f	class:QCStMutexUnlocker
DirList	cc/tools/KfsToolsCommon.cc	/^KFS::tools::DirList(KfsClientPtr kfsClient, string kfsdirname, bool longMode, bool humanReadable, bool timeInSecs)$/;"	f	class:KFS::tools
DirMatch	cc/meta/meta.h	/^	DirMatch(const string s): searchname(s) { }$/;"	f	class:KFS::DirMatch
DirMatch	cc/meta/meta.h	/^class DirMatch {$/;"	c	namespace:KFS
DirOpsTestCase	python/unittests/dirops.py	/^class DirOpsTestCase(unittest.TestCase):$/;"	c
Disable	cc/libkfsIO/ITimeout.h	/^    void Disable() {$/;"	f	class:KFS::ITimeout
DisableAsyncRW	cc/libkfsClient/KfsClient.cc	/^KfsClient::DisableAsyncRW()$/;"	f	class:KfsClient
DisableAsyncRW	cc/libkfsClient/KfsClientInt.h	/^    void DisableAsyncRW() {$/;"	f	class:KFS::KfsClientImpl
DiscardRead	cc/libkfsIO/NetConnection.h	/^    void DiscardRead() {$/;"	f	class:KFS::NetConnection
DiscardWrite	cc/libkfsIO/NetConnection.h	/^    void DiscardWrite() {$/;"	f	class:KFS::NetConnection
DiskChunkInfoV1_t	cc/chunk/chunkupgrade_main.cc	/^    DiskChunkInfoV1_t() : metaMagic (CHUNK_META_MAGIC), metaVersion(CHUNK_META_VERSION) { }$/;"	f	struct:DiskChunkInfoV1_t
DiskChunkInfoV1_t	cc/chunk/chunkupgrade_main.cc	/^    DiskChunkInfoV1_t(kfsFileId_t f, kfsChunkId_t c, off_t s, kfsSeq_t v) :$/;"	f	struct:DiskChunkInfoV1_t
DiskChunkInfoV1_t	cc/chunk/chunkupgrade_main.cc	/^struct DiskChunkInfoV1_t {$/;"	s	file:
DiskChunkInfo_t	cc/chunk/Chunk.h	/^    DiskChunkInfo_t() : metaMagic (CHUNK_META_MAGIC), metaVersion(CHUNK_META_VERSION) { }$/;"	f	struct:KFS::DiskChunkInfo_t
DiskChunkInfo_t	cc/chunk/Chunk.h	/^    DiskChunkInfo_t(kfsFileId_t f, kfsChunkId_t c, off_t s, kfsSeq_t v) :$/;"	f	struct:KFS::DiskChunkInfo_t
DiskChunkInfo_t	cc/chunk/Chunk.h	/^struct DiskChunkInfo_t {$/;"	s	namespace:KFS
DiskConnection	cc/libkfsIO/DiskConnection.h	/^class DiskConnection : $/;"	c	namespace:KFS
DiskConnectionPtr	cc/libkfsIO/DiskConnection.h	/^typedef boost::shared_ptr<DiskConnection> DiskConnectionPtr;$/;"	t	namespace:KFS
DiskEntry	cc/meta/entry.h	/^class DiskEntry {$/;"	c	namespace:KFS
DiskEventOp_t	cc/libkfsIO/DiskEvent.h	/^enum DiskEventOp_t {$/;"	g	namespace:KFS
DiskEventPtr	cc/libkfsIO/DiskEvent.h	/^typedef boost::shared_ptr<DiskEvent_t> DiskEventPtr;$/;"	t	namespace:KFS
DiskEvent_t	cc/libkfsIO/DiskEvent.h	/^    DiskEvent_t(DiskConnectionPtr c, DiskEventOp_t o) {$/;"	f	struct:KFS::DiskEvent_t
DiskEvent_t	cc/libkfsIO/DiskEvent.h	/^    DiskEvent_t(DiskConnectionPtr c, const IOBufferData &d,$/;"	f	struct:KFS::DiskEvent_t
DiskEvent_t	cc/libkfsIO/DiskEvent.h	/^struct DiskEvent_t {$/;"	s	namespace:KFS
DiskIORequest	cc/libkfsIO/DiskConnection.h	/^    DiskIORequest() : op(OP_NONE), offset(0), numBytes(0) { }$/;"	f	struct:KFS::DiskIORequest
DiskIORequest	cc/libkfsIO/DiskConnection.h	/^    DiskIORequest(DiskEventOp_t o, off_t f, size_t n) : $/;"	f	struct:KFS::DiskIORequest
DiskIORequest	cc/libkfsIO/DiskConnection.h	/^struct DiskIORequest {$/;"	s	namespace:KFS
DiskIo	cc/chunk/DiskIo.cc	/^DiskIo::DiskIo($/;"	f	class:KFS::DiskIo
DiskIo	cc/chunk/DiskIo.h	/^class DiskIo : private QCDiskQueue::IoCompletion$/;"	c	namespace:KFS
DiskIoPtr	cc/chunk/DiskIo.h	/^typedef boost::shared_ptr<DiskIo> DiskIoPtr;$/;"	t	namespace:KFS
DiskIoQueues	cc/chunk/DiskIo.cc	/^    DiskIoQueues($/;"	f	class:KFS::DiskIoQueues
DiskIoQueues	cc/chunk/DiskIo.cc	/^class DiskIoQueues : private ITimeout$/;"	c	namespace:KFS	file:
DiskIoReportError	cc/chunk/DiskIo.cc	/^static void DiskIoReportError($/;"	f	namespace:KFS
DiskManager	cc/libkfsIO/DiskManager.h	/^class DiskManager {$/;"	c	namespace:KFS
DiskQueue	cc/chunk/DiskIo.cc	/^    DiskQueue($/;"	f	class:KFS::DiskQueue
DiskQueue	cc/chunk/DiskIo.cc	/^class DiskQueue : public QCDiskQueue$/;"	c	namespace:KFS	file:
DiskQueueList	cc/chunk/DiskIo.cc	/^    typedef DiskQueue::DiskQueueList DiskQueueList;$/;"	t	class:KFS::DiskIoQueues	file:
DiskQueueList	cc/chunk/DiskIo.cc	/^    typedef QCDLList<DiskQueue, 0> DiskQueueList;$/;"	t	class:KFS::DiskQueue	file:
Dispatch	cc/chunk/Logger.cc	/^Logger::Dispatch()$/;"	f	class:Logger
Dispatch	cc/emulator/ChunkServerEmulator.cc	/^ChunkServerEmulator::Dispatch()$/;"	f	class:ChunkServerEmulator
Dispatch	cc/libkfsClient/WriteAppender.cc	/^    template<typename T> bool Dispatch($/;"	f	class:KFS::WriteAppender::Impl	file:
Dispatch	cc/meta/ChunkServer.cc	/^ChunkServer::Dispatch()$/;"	f	class:ChunkServer
Dispatch	cc/meta/LayoutManager.cc	/^LayoutManager::Dispatch()$/;"	f	class:LayoutManager
Dispatch	cc/meta/NetDispatch.cc	/^NetDispatch::Dispatch(MetaRequest *r)$/;"	f	class:NetDispatch
DispatchHello	cc/chunk/MetaServerSM.cc	/^MetaServerSM::DispatchHello()$/;"	f	class:MetaServerSM
DispatchOps	cc/chunk/MetaServerSM.cc	/^MetaServerSM::DispatchOps()$/;"	f	class:MetaServerSM
DispatchResponse	cc/chunk/MetaServerSM.cc	/^MetaServerSM::DispatchResponse()$/;"	f	class:MetaServerSM
Dispatched	cc/meta/ChunkServer.h	/^		void Dispatched(MetaChunkRequest *r) {$/;"	f	class:KFS::ChunkServer
DispatchedReqs	cc/meta/ChunkServer.h	/^		typedef std::list <MetaChunkRequest *> DispatchedReqs;$/;"	t	class:KFS::ChunkServer
Dispatcher	cc/meta/LayoutManager.cc	/^	Dispatcher() { }$/;"	f	class:Dispatcher
Dispatcher	cc/meta/LayoutManager.cc	/^class Dispatcher {$/;"	c	file:
Display	cc/libkfsClient/KfsNetClient.h	/^        std::ostream& Display($/;"	f	struct:KFS::KfsNetClient::Stats
Display	cc/libkfsClient/WriteAppender.h	/^        std::ostream& Display($/;"	f	struct:KFS::WriteAppender::Stats
DisplayPollFlags	cc/libkfsIO/NetErrorSimulator.cc	/^    static std::string DisplayPollFlags($/;"	f	class:KFS::NetErrorSimulator	file:
Distance	cc/common/kfsdecls.h	/^    int Distance(const std::string &otherhost) {$/;"	f	struct:KFS::ServerLocation
DoAllocation	cc/libkfsClient/KfsWrite.cc	/^KfsClientImpl::DoAllocation(int fd, bool force)$/;"	f	class:KfsClientImpl
DoCat	cc/tools/KfsCat_main.cc	/^DoCat(const char *pathname)$/;"	f
DoLargeReadFromServer	cc/libkfsClient/KfsRead.cc	/^KfsClientImpl::DoLargeReadFromServer(int fd, char *buf, size_t numBytes)$/;"	f	class:KfsClientImpl
DoLargeWriteToServer	cc/libkfsClient/KfsWrite.cc	/^KfsClientImpl::DoLargeWriteToServer(int fd, off_t offset, const char *buf, size_t numBytes)$/;"	f	class:KfsClientImpl
DoMetaOpWithRetry	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::DoMetaOpWithRetry(KfsOp *op)$/;"	f	class:KfsClientImpl
DoNotDeallocate	cc/libkfsClient/KfsProtocolWorker.cc	/^        DoNotDeallocate()$/;"	f	class:KFS::KfsProtocolWorker::Impl::DoNotDeallocate
DoNotDeallocate	cc/libkfsClient/KfsProtocolWorker.cc	/^    class DoNotDeallocate : public libkfsio::IOBufferAllocator$/;"	c	class:KFS::KfsProtocolWorker::Impl	file:
DoOpCommon	cc/libkfsClient/KfsClient.cc	/^KFS::DoOpCommon(KfsOp *op, TcpSocket *sock)$/;"	f	class:KFS
DoOpCommon	cc/tools/MonUtils.cc	/^KFS_MON::DoOpCommon(KfsMonOp *op, TcpSocket *sock)$/;"	f	class:KFS_MON
DoOpResponse	cc/libkfsClient/KfsClient.cc	/^KFS::DoOpResponse(KfsOp *op, TcpSocket *sock)$/;"	f	class:KFS
DoOpSend	cc/libkfsClient/KfsClient.cc	/^KFS::DoOpSend(KfsOp *op, TcpSocket *sock)$/;"	f	class:KFS
DoPipelinedRead	cc/libkfsClient/KfsRead.cc	/^KfsClientImpl::DoPipelinedRead(int fd, vector<ReadOp *> &ops, TcpSocket *sock)$/;"	f	class:KfsClientImpl
DoPipelinedWrite	cc/libkfsClient/KfsWrite.cc	/^KfsClientImpl::DoPipelinedWrite(int fd, vector<WritePrepareOp *> &ops, TcpSocket *masterSock)$/;"	f	class:KfsClientImpl
DoSmallReadFromServer	cc/libkfsClient/KfsRead.cc	/^KfsClientImpl::DoSmallReadFromServer(int fd, char *buf, size_t numBytes)$/;"	f	class:KfsClientImpl
DoSmallWriteToServer	cc/libkfsClient/KfsWrite.cc	/^KfsClientImpl::DoSmallWriteToServer(int fd, off_t offset, const char *buf, size_t numBytes)$/;"	f	class:KfsClientImpl
DoSynchDiscard	cc/libkfsIO/TcpSocket.cc	/^int TcpSocket::DoSynchDiscard(int nbytes, struct timeval &timeout)$/;"	f	class:TcpSocket
DoSynchPeek	cc/libkfsIO/TcpSocket.cc	/^int TcpSocket::DoSynchPeek(char *buf, int bufLen, struct timeval &timeout)$/;"	f	class:TcpSocket
DoSynchRecv	cc/libkfsIO/BufferedSocket.cc	/^BufferedSocket::DoSynchRecv(char *buf, int bufLen, struct timeval &timeout)$/;"	f	class:BufferedSocket
DoSynchRecv	cc/libkfsIO/TcpSocket.cc	/^int TcpSocket::DoSynchRecv(char *buf, int bufLen, struct timeval &timeout)$/;"	f	class:TcpSocket
DoSynchSend	cc/libkfsIO/TcpSocket.cc	/^int TcpSocket::DoSynchSend(const char *buf, int bufLen)$/;"	f	class:TcpSocket
DoSysErrorMsg	cc/qcdio/qcutils.cpp	/^DoSysErrorMsg($/;"	f	file:
DoTest	cc/qcdio/qcunittest.cpp	/^    int DoTest($/;"	f	class:QCDiskQueueTest
DoingWrite	cc/chunk/LeaseClerk.cc	/^LeaseClerk::DoingWrite(kfsChunkId_t chunkId)$/;"	f	class:LeaseClerk
Done	cc/chunk/DiskIo.cc	/^        virtual bool Done($/;"	f	class:KFS::DiskIoQueues::WriteCancelWaiter
Done	cc/chunk/DiskIo.cc	/^DiskIo::Done($/;"	f	class:KFS::DiskIo
Done	cc/chunk/KfsOps.cc	/^WriteIdAllocOp::Done(int code, void *data)$/;"	f	class:WriteIdAllocOp
Done	cc/chunk/KfsOps.cc	/^WritePrepareOp::Done(int code, void *data)$/;"	f	class:WritePrepareOp
Done	cc/chunk/KfsOps.cc	/^WriteSyncOp::Done(int code, void *data)$/;"	f	class:WriteSyncOp
Done	cc/libkfsClient/KfsAsyncRW.cc	/^AsyncWorker::Done()$/;"	f	class:AsyncWorker
Done	cc/libkfsClient/KfsAsyncRW.cc	/^Asyncer::Done(AsyncReadReq *req)$/;"	f	class:Asyncer
Done	cc/libkfsClient/KfsAsyncRW.cc	/^Asyncer::Done(AsyncWriteReq *req)$/;"	f	class:Asyncer
Done	cc/libkfsClient/KfsNetClient.cc	/^        void Done()$/;"	f	struct:KFS::KfsNetClient::Impl::OpQueueEntry
Done	cc/libkfsClient/KfsProtocolWorker.cc	/^        virtual void Done($/;"	f	class:KFS::KfsProtocolWorker::Impl::Appender
Done	cc/libkfsClient/KfsProtocolWorker.cc	/^        virtual void Done($/;"	f	class:KFS::KfsProtocolWorker::Impl::AsyncRequest
Done	cc/libkfsClient/KfsProtocolWorker.cc	/^        virtual void Done($/;"	f	class:KFS::KfsProtocolWorker::Impl::StopRequest
Done	cc/libkfsClient/KfsProtocolWorker.cc	/^        virtual void Done($/;"	f	class:KFS::KfsProtocolWorker::Impl::SyncRequest
Done	cc/libkfsClient/KfsProtocolWorker.cc	/^        void Done($/;"	f	class:KFS::KfsProtocolWorker::Impl::Appender
Done	cc/libkfsClient/KfsProtocolWorker.cc	/^    void Done($/;"	f	class:KFS::KfsProtocolWorker::Impl	file:
Done	cc/libkfsClient/WriteAppender.cc	/^        void Done($/;"	f	struct:KFS::WriteAppender::Impl::NopDispatch
Done	cc/libkfsClient/WriteAppender.cc	/^    void Done($/;"	f	class:KFS::WriteAppender::Impl	file:
Done	cc/qcdio/qcdiskqueue.cpp	/^    virtual bool Done($/;"	f	class:QCDiskQueue::RequestWaiter
Done	cc/qcdio/qcunittest.cpp	/^        virtual bool Done($/;"	f	class:QCDiskQueueTest::RequestWaiter
DoneQueue	cc/chunk/DiskIo.cc	/^    typedef QCDLList<DiskIo, 0> DoneQueue;$/;"	t	class:KFS::DiskIoQueues	file:
DoneSelf	cc/libkfsClient/KfsAsyncRW.cc	/^AsyncReadWorker::DoneSelf()$/;"	f	class:AsyncReadWorker
DoneSelf	cc/libkfsClient/KfsAsyncRW.cc	/^AsyncWriteWorker::DoneSelf()$/;"	f	class:AsyncWriteWorker
DownReason	cc/meta/ChunkServer.h	/^                string DownReason() const {$/;"	f	class:KFS::ChunkServer
DownServers	cc/meta/LayoutManager.h	/^                typedef std::deque<string> DownServers;$/;"	t	class:KFS::LayoutManager
Drain	cc/libkfsIO/NetKicker.cc	/^    int Drain()$/;"	f	class:NetKicker::Impl
Drain	cc/libkfsIO/NetKicker.cc	/^NetKicker::Drain()$/;"	f	class:NetKicker
DriveInfo	cc/rebalancer/rebalancer.h	/^    struct DriveInfo {$/;"	s	namespace:KFS
DumpChunkMap	cc/chunk/ChunkManager.cc	/^ChunkManager::DumpChunkMap()$/;"	f	class:KFS::ChunkManager
DumpChunkMap	cc/chunk/ChunkManager.cc	/^ChunkManager::DumpChunkMap(ostringstream &ofs)$/;"	f	class:KFS::ChunkManager
DumpChunkMapOp	cc/chunk/KfsOps.h	/^    DumpChunkMapOp(kfsSeq_t s) :$/;"	f	struct:KFS::DumpChunkMapOp
DumpChunkMapOp	cc/chunk/KfsOps.h	/^struct DumpChunkMapOp : public KfsOp {$/;"	s	namespace:KFS
DumpChunkMapOp	cc/libkfsClient/KfsOps.h	/^	DumpChunkMapOp(kfsSeq_t s):$/;"	f	struct:KFS::DumpChunkMapOp
DumpChunkMapOp	cc/libkfsClient/KfsOps.h	/^struct DumpChunkMapOp : public KfsOp {$/;"	s	namespace:KFS
DumpChunkReplicationCandidates	cc/meta/LayoutManager.cc	/^LayoutManager::DumpChunkReplicationCandidates(ostringstream &os)$/;"	f	class:LayoutManager
DumpChunkServerMapOp	cc/libkfsClient/KfsOps.h	/^	DumpChunkServerMapOp(kfsSeq_t s):$/;"	f	struct:KFS::DumpChunkServerMapOp
DumpChunkServerMapOp	cc/libkfsClient/KfsOps.h	/^struct DumpChunkServerMapOp : public KfsOp {$/;"	s	namespace:KFS
DumpChunkToServerMap	cc/meta/LayoutManager.cc	/^LayoutManager::DumpChunkToServerMap(const string &dirToUse)$/;"	f	class:LayoutManager
DumpChunkToServerMap	cc/meta/LayoutManager.cc	/^LayoutManager::DumpChunkToServerMap(ostringstream &os)$/;"	f	class:LayoutManager
EALLOCFAILED	cc/common/kfstypes.h	/^const int EALLOCFAILED = 1005;$/;"	m	namespace:KFS
EBADCKSUM	cc/common/kfstypes.h	/^const int EBADCKSUM = 1002;$/;"	m	namespace:KFS
EBADCLUSTERKEY	cc/common/kfstypes.h	/^const int EBADCLUSTERKEY = 1006;$/;"	m	namespace:KFS
EBADVERS	cc/common/kfstypes.h	/^const int EBADVERS = 1000;$/;"	m	namespace:KFS
EDATAUNAVAIL	cc/common/kfstypes.h	/^const int EDATAUNAVAIL = 1003;$/;"	m	namespace:KFS
ELEASEEXPIRED	cc/common/kfstypes.h	/^const int ELEASEEXPIRED = 1001;$/;"	m	namespace:KFS
EMULATOR_CHUNKSERVEREMULATOR_H	cc/emulator/ChunkServerEmulator.h	28;"	d
EMULATOR_EMULATORSETUP_H	cc/emulator/EmulatorSetup.h	28;"	d
EMULATOR_LAYOUTEMULATOR_H	cc/emulator/LayoutEmulator.h	29;"	d
EPollEventMask	cc/qcdio/qcfdpoll.cpp	/^    int EPollEventMask($/;"	f	class:QCFdPoll::Impl	file:
ESERVERBUSY	cc/common/kfstypes.h	/^const int ESERVERBUSY = 1004;$/;"	m	namespace:KFS
EVENT_CANCELLED	cc/libkfsIO/Event.h	/^    EVENT_CANCELLED$/;"	e	enum:KFS::EventStatus_t
EVENT_CMD_DONE	cc/libkfsIO/Event.h	/^    EVENT_CMD_DONE,$/;"	e	enum:KFS::EventCode_t
EVENT_DISK_ERROR	cc/libkfsIO/Event.h	/^    EVENT_DISK_ERROR,$/;"	e	enum:KFS::EventCode_t
EVENT_DISK_READ	cc/libkfsIO/Event.h	/^    EVENT_DISK_READ,$/;"	e	enum:KFS::EventCode_t
EVENT_DISK_WROTE	cc/libkfsIO/Event.h	/^    EVENT_DISK_WROTE,$/;"	e	enum:KFS::EventCode_t
EVENT_DONE	cc/libkfsIO/Event.h	/^    EVENT_DONE,$/;"	e	enum:KFS::EventStatus_t
EVENT_GRANULARITY_MS	cc/libkfsIO/EventManager.h	/^    static const int EVENT_GRANULARITY_MS = 10;$/;"	m	class:KFS::EventManager
EVENT_INACTIVITY_TIMEOUT	cc/libkfsIO/Event.h	/^    EVENT_INACTIVITY_TIMEOUT,$/;"	e	enum:KFS::EventCode_t
EVENT_NET_ERROR	cc/libkfsIO/Event.h	/^    EVENT_NET_ERROR,$/;"	e	enum:KFS::EventCode_t
EVENT_NET_READ	cc/libkfsIO/Event.h	/^    EVENT_NET_READ,$/;"	e	enum:KFS::EventCode_t
EVENT_NET_WROTE	cc/libkfsIO/Event.h	/^    EVENT_NET_WROTE,$/;"	e	enum:KFS::EventCode_t
EVENT_NEW_CONNECTION	cc/libkfsIO/Event.h	/^    EVENT_NEW_CONNECTION,$/;"	e	enum:KFS::EventCode_t
EVENT_SCHEDULED	cc/libkfsIO/Event.h	/^    EVENT_SCHEDULED,$/;"	e	enum:KFS::EventStatus_t
EVENT_STATUS_NONE	cc/libkfsIO/Event.h	/^    EVENT_STATUS_NONE,$/;"	e	enum:KFS::EventStatus_t
EVENT_SYNC_DONE	cc/libkfsIO/Event.h	/^    EVENT_SYNC_DONE,$/;"	e	enum:KFS::EventCode_t
EVENT_TIMEOUT	cc/libkfsIO/Event.h	/^    EVENT_TIMEOUT$/;"	e	enum:KFS::EventCode_t
EmulatorSetup	cc/emulator/EmulatorSetup.cc	/^KFS::EmulatorSetup(string &logdir, string &cpdir, string &networkFn, $/;"	f	class:KFS
EnableAsyncRW	cc/libkfsClient/KfsClient.cc	/^KfsClient::EnableAsyncRW()$/;"	f	class:KfsClient
EnableAsyncRW	cc/libkfsClient/KfsClientInt.h	/^    void EnableAsyncRW() {$/;"	f	class:KFS::KfsClientImpl
EnableReadIfOverloaded	cc/libkfsIO/NetConnection.h	/^        void EnableReadIfOverloaded()     { mEnableReadIfOverloaded  = true; }$/;"	f	class:KFS::NetConnection::NetManagerEntry
EnableReadIfOverloaded	cc/libkfsIO/NetConnection.h	/^    void EnableReadIfOverloaded() {$/;"	f	class:KFS::NetConnection
EndsWith	cc/chunk/ChunkManager.cc	/^EndsWith(const string& str, const string& suf)$/;"	f	namespace:KFS
Enqueue	cc/chunk/RemoteSyncSM.cc	/^RemoteSyncSM::Enqueue(KfsOp *op)$/;"	f	class:RemoteSyncSM
Enqueue	cc/emulator/ChunkServerEmulator.cc	/^ChunkServerEmulator::Enqueue(MetaChunkRequest *r)$/;"	f	class:ChunkServerEmulator
Enqueue	cc/libkfsClient/KfsAsyncRW.cc	/^Asyncer::Enqueue(AsyncReadReq *req)$/;"	f	class:Asyncer
Enqueue	cc/libkfsClient/KfsAsyncRW.cc	/^Asyncer::Enqueue(AsyncWriteReq *req)$/;"	f	class:Asyncer
Enqueue	cc/libkfsClient/KfsNetClient.cc	/^    bool Enqueue($/;"	f	class:KFS::KfsNetClient::Impl
Enqueue	cc/libkfsClient/KfsNetClient.cc	/^KfsNetClient::Enqueue($/;"	f	class:KFS::KfsNetClient
Enqueue	cc/libkfsClient/KfsProtocolWorker.cc	/^    void Enqueue($/;"	f	class:KFS::KfsProtocolWorker::Impl
Enqueue	cc/libkfsClient/KfsProtocolWorker.cc	/^KfsProtocolWorker::Enqueue($/;"	f	class:KFS::KfsProtocolWorker
Enqueue	cc/libkfsClient/WriteAppender.cc	/^    void Enqueue($/;"	f	class:KFS::WriteAppender::Impl	file:
Enqueue	cc/meta/ChunkServer.cc	/^ChunkServer::Enqueue(MetaChunkRequest *r) $/;"	f	class:ChunkServer
Enqueue	cc/qcdio/qcdiskqueue.cpp	/^    void Enqueue($/;"	f	class:QCDiskQueue::Queue	file:
Enqueue	cc/qcdio/qcdiskqueue.cpp	/^QCDiskQueue::Enqueue($/;"	f	class:QCDiskQueue
Enqueue	cc/qcdio/qcdiskqueue.cpp	/^QCDiskQueue::Queue::Enqueue($/;"	f	class:QCDiskQueue::Queue
EnqueueMeta	cc/libkfsClient/WriteAppender.cc	/^    void EnqueueMeta($/;"	f	class:KFS::WriteAppender::Impl	file:
EnqueueOp	cc/chunk/MetaServerSM.cc	/^MetaServerSM::EnqueueOp(KfsOp *op)$/;"	f	class:MetaServerSM
EnqueueResponse	cc/chunk/MetaServerSM.cc	/^MetaServerSM::EnqueueResponse(KfsOp *op)$/;"	f	class:MetaServerSM
EnqueueSelf	cc/libkfsClient/KfsNetClient.cc	/^    bool EnqueueSelf($/;"	f	class:KFS::KfsNetClient::Impl	file:
EnqueueSelf	cc/libkfsClient/WriteAppender.cc	/^    void EnqueueSelf($/;"	f	class:KFS::WriteAppender::Impl	file:
EnqueueStatus	cc/qcdio/qcdiskqueue.h	/^        EnqueueStatus($/;"	f	class:QCDiskQueue::EnqueueStatus
EnqueueStatus	cc/qcdio/qcdiskqueue.h	/^    class EnqueueStatus$/;"	c	class:QCDiskQueue
EnqueueWrite	cc/chunk/ChunkManager.cc	/^ChunkManager::EnqueueWrite(WritePrepareOp *wp)$/;"	f	class:KFS::ChunkManager
EnsureConnected	cc/libkfsClient/KfsNetClient.cc	/^    void EnsureConnected($/;"	f	class:KFS::KfsNetClient::Impl	file:
Entry	cc/meta/LayoutManager.h	/^			Entry($/;"	f	struct:KFS::ARAChunkCache::Entry
Entry	cc/meta/LayoutManager.h	/^		struct Entry {$/;"	s	class:KFS::ARAChunkCache
EnumerateBlocks	cc/libkfsClient/KfsClient.cc	/^KfsClient::EnumerateBlocks(const char *pathname)$/;"	f	class:KfsClient
EnumerateBlocks	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::EnumerateBlocks(const char *pathname)$/;"	f	class:KfsClientImpl
EnumerateLocations	cc/meta/request.cc	/^	EnumerateLocations(vector <ServerLocation> &result): v(result) { }$/;"	f	class:KFS::EnumerateLocations
EnumerateLocations	cc/meta/request.cc	/^class EnumerateLocations {$/;"	c	namespace:KFS	file:
EnumerateReaddirPlusInfo	cc/meta/request.cc	/^	EnumerateReaddirPlusInfo(ostream &o) : os(o) { }$/;"	f	class:KFS::EnumerateReaddirPlusInfo
EnumerateReaddirPlusInfo	cc/meta/request.cc	/^class EnumerateReaddirPlusInfo {$/;"	c	namespace:KFS	file:
Erase	cc/chunk/ChunkManager.h	/^        bool Erase(WriteIdSet::iterator i)$/;"	f	class:KFS::ChunkManager::PendingWrites
EraseReallocIfNeeded	cc/meta/LayoutManager.cc	/^template<typename T, typename I> static T& EraseReallocIfNeeded(T& vec, I b, I e) {$/;"	f	file:
Error	cc/meta/ChunkServer.cc	/^ChunkServer::Error(const char* errorMsg)$/;"	f	class:ChunkServer
Error	cc/qcdio/qcdiskqueue.h	/^    enum Error$/;"	g	class:QCDiskQueue
ErrorCodeToStr	cc/libkfsClient/KfsClient.cc	/^KFS::ErrorCodeToStr(int status)$/;"	f	class:KFS
EvacuateChunk	cc/meta/ChunkServer.h	/^		void EvacuateChunk(chunkId_t chunkId) {$/;"	f	class:KFS::ChunkServer
EvacuateChunkChecker	cc/meta/LayoutManager.cc	/^	EvacuateChunkChecker(ReplicationCandidates &c, CSMap &m) :$/;"	f	class:EvacuateChunkChecker
EvacuateChunkChecker	cc/meta/LayoutManager.cc	/^class EvacuateChunkChecker {$/;"	c	file:
EvacuateChunkDone	cc/meta/ChunkServer.cc	/^ChunkServer::EvacuateChunkDone(chunkId_t chunkId)$/;"	f	class:ChunkServer
Event	cc/libkfsIO/Event.h	/^    Event (KfsCallbackObj *callbackObj, void *data, int timeoutMs, bool periodic) {$/;"	f	class:KFS::Event
Event	cc/libkfsIO/Event.h	/^class Event {$/;"	c	namespace:KFS
Event	cc/libkfsIO/NetErrorSimulator.cc	/^    virtual void Event($/;"	f	class:KFS::NetErrorSimulator
EventCode_t	cc/libkfsIO/Event.h	/^enum EventCode_t {$/;"	g	namespace:KFS
EventHandler	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppender::EventHandler(int code, void* data)$/;"	f	class:KFS::AtomicRecordAppender
EventHandler	cc/libkfsClient/KfsNetClient.cc	/^    int EventHandler($/;"	f	class:KFS::KfsNetClient::Impl
EventHandler	cc/libkfsIO/NetManager.cc	/^NetManager::Timer::Handler::EventHandler(int type, void* \/* data *\/)$/;"	f	class:NetManager::Timer::Handler
EventManager	cc/libkfsIO/EventManager.cc	/^EventManager::EventManager()$/;"	f	class:EventManager
EventManager	cc/libkfsIO/EventManager.h	/^class EventManager {$/;"	c	namespace:KFS
EventManagerTimeoutImpl	cc/libkfsIO/EventManager.h	/^    EventManagerTimeoutImpl(EventManager *mgr) {$/;"	f	class:KFS::EventManagerTimeoutImpl
EventManagerTimeoutImpl	cc/libkfsIO/EventManager.h	/^class EventManagerTimeoutImpl : public ITimeout {$/;"	c	namespace:KFS
EventObserver	cc/libkfsClient/KfsNetClient.h	/^        EventObserver()  {}$/;"	f	class:KFS::KfsNetClient::EventObserver
EventObserver	cc/libkfsClient/KfsNetClient.h	/^    class EventObserver$/;"	c	class:KFS::KfsNetClient
EventOccurred	cc/libkfsIO/Event.h	/^    int EventOccurred() {$/;"	f	class:KFS::Event
EventPtr	cc/libkfsIO/Event.h	/^typedef boost::shared_ptr<Event> EventPtr;$/;"	t	namespace:KFS
EventStatus_t	cc/libkfsIO/Event.h	/^enum EventStatus_t {$/;"	g	namespace:KFS
Exec	cc/chunk/ChunkServer_main.cc	/^    void Exec()$/;"	f	class:Restarter	file:
ExecRebalance	cc/tools/kfsrebalance_main.cc	/^ExecRebalance(const ServerLocation &location, string &planfile)$/;"	f
Execute	cc/chunk/KfsOps.cc	/^AllocChunkOp::Execute()$/;"	f	class:AllocChunkOp
Execute	cc/chunk/KfsOps.cc	/^BeginMakeChunkStableOp::Execute()$/;"	f	class:BeginMakeChunkStableOp
Execute	cc/chunk/KfsOps.cc	/^ChangeChunkVersOp::Execute()$/;"	f	class:ChangeChunkVersOp
Execute	cc/chunk/KfsOps.cc	/^ChunkSpaceReleaseOp::Execute()$/;"	f	class:ChunkSpaceReleaseOp
Execute	cc/chunk/KfsOps.cc	/^ChunkSpaceReserveOp::Execute()$/;"	f	class:ChunkSpaceReserveOp
Execute	cc/chunk/KfsOps.cc	/^CloseOp::Execute()$/;"	f	class:CloseOp
Execute	cc/chunk/KfsOps.cc	/^CoalesceBlockOp::Execute()$/;"	f	class:CoalesceBlockOp
Execute	cc/chunk/KfsOps.cc	/^DeleteChunkOp::Execute()$/;"	f	class:DeleteChunkOp
Execute	cc/chunk/KfsOps.cc	/^DumpChunkMapOp::Execute()$/;"	f	class:DumpChunkMapOp
Execute	cc/chunk/KfsOps.cc	/^GetChunkMetadataOp::Execute()$/;"	f	class:GetChunkMetadataOp
Execute	cc/chunk/KfsOps.cc	/^GetRecordAppendOpStatus::Execute()$/;"	f	class:GetRecordAppendOpStatus
Execute	cc/chunk/KfsOps.cc	/^HeartbeatOp::Execute()$/;"	f	class:HeartbeatOp
Execute	cc/chunk/KfsOps.cc	/^HelloMetaOp::Execute()$/;"	f	class:HelloMetaOp
Execute	cc/chunk/KfsOps.cc	/^KillRemoteSyncOp::Execute()$/;"	f	class:KillRemoteSyncOp
Execute	cc/chunk/KfsOps.cc	/^MakeChunkStableOp::Execute()$/;"	f	class:MakeChunkStableOp
Execute	cc/chunk/KfsOps.cc	/^OpenOp::Execute()$/;"	f	class:OpenOp
Execute	cc/chunk/KfsOps.cc	/^PingOp::Execute()$/;"	f	class:PingOp
Execute	cc/chunk/KfsOps.cc	/^ReadOp::Execute()$/;"	f	class:ReadOp
Execute	cc/chunk/KfsOps.cc	/^RecordAppendOp::Execute()$/;"	f	class:RecordAppendOp
Execute	cc/chunk/KfsOps.cc	/^ReplicateChunkOp::Execute()$/;"	f	class:ReplicateChunkOp
Execute	cc/chunk/KfsOps.cc	/^RestartChunkServerOp::Execute()$/;"	f	class:RestartChunkServerOp
Execute	cc/chunk/KfsOps.cc	/^RetireOp::Execute()$/;"	f	class:RetireOp
Execute	cc/chunk/KfsOps.cc	/^SetProperties::Execute()$/;"	f	class:SetProperties
Execute	cc/chunk/KfsOps.cc	/^SizeOp::Execute()$/;"	f	class:SizeOp
Execute	cc/chunk/KfsOps.cc	/^StaleChunksOp::Execute()$/;"	f	class:StaleChunksOp
Execute	cc/chunk/KfsOps.cc	/^StatsOp::Execute()$/;"	f	class:StatsOp
Execute	cc/chunk/KfsOps.cc	/^TimeoutOp::Execute()$/;"	f	class:TimeoutOp
Execute	cc/chunk/KfsOps.cc	/^TruncateChunkOp::Execute()$/;"	f	class:TruncateChunkOp
Execute	cc/chunk/KfsOps.cc	/^WriteIdAllocOp::Execute()$/;"	f	class:WriteIdAllocOp
Execute	cc/chunk/KfsOps.cc	/^WriteOp::Execute()$/;"	f	class:WriteOp
Execute	cc/chunk/KfsOps.cc	/^WritePrepareOp::Execute()$/;"	f	class:WritePrepareOp
Execute	cc/chunk/KfsOps.cc	/^WriteSyncOp::Execute()$/;"	f	class:WriteSyncOp
Execute	cc/chunk/KfsOps.h	/^    void Execute() { }$/;"	f	struct:KFS::ReadChunkMetaOp
Execute	cc/chunk/KfsOps.h	/^    void Execute() { }$/;"	f	struct:KFS::WriteChunkMetaOp
Execute	cc/chunk/KfsOps.h	/^    void Execute() { }$/;"	f	struct:KFS::WritePrepareFwdOp
Execute	cc/chunk/KfsOps.h	/^    void Execute() { };$/;"	f	struct:KFS::CheckpointOp
Execute	cc/chunk/KfsOps.h	/^    void Execute() { };$/;"	f	struct:KFS::CorruptChunkOp
Execute	cc/chunk/KfsOps.h	/^    void Execute() { };$/;"	f	struct:KFS::LeaseRelinquishOp
Execute	cc/chunk/KfsOps.h	/^    void Execute() { };$/;"	f	struct:KFS::LeaseRenewOp
Execute	cc/libkfsClient/KfsProtocolWorker.cc	/^        int Execute($/;"	f	class:KFS::KfsProtocolWorker::Impl::SyncRequest
Execute	cc/libkfsClient/KfsProtocolWorker.cc	/^    int Execute($/;"	f	class:KFS::KfsProtocolWorker::Impl
Execute	cc/libkfsClient/KfsProtocolWorker.cc	/^KfsProtocolWorker::Execute($/;"	f	class:KFS::KfsProtocolWorker
ExecuteRebalancePlan	cc/emulator/LayoutEmulator.cc	/^LayoutEmulator::ExecuteRebalancePlan()$/;"	f	class:LayoutEmulator
ExecuteRebalancePlan	cc/meta/LayoutManager.cc	/^LayoutManager::ExecuteRebalancePlan()$/;"	f	class:LayoutManager
ExecuteRebalancePlan	cc/meta/LayoutManager.cc	/^LayoutManager::ExecuteRebalancePlan(ChunkServerPtr &c)$/;"	f	class:LayoutManager
Exists	cc/libkfsClient/KfsClient.cc	/^KfsClient::Exists(const char *pathname)$/;"	f	class:KfsClient
Exists	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::Exists(const char *pathname)$/;"	f	class:KfsClientImpl
ExpireLeaseIfOwner	cc/meta/LayoutManager.cc	/^	ExpireLeaseIfOwner(const ChunkServer *t)$/;"	f	struct:ExpireLeaseIfOwner
ExpireLeaseIfOwner	cc/meta/LayoutManager.cc	/^struct ExpireLeaseIfOwner$/;"	s	file:
ExpiredLeaseCleanup	cc/meta/LayoutManager.cc	/^LayoutManager::ExpiredLeaseCleanup($/;"	f	class:LayoutManager
ExpiredLeaseCleanup	cc/meta/LayoutManager.cc	/^LayoutManager::ExpiredLeaseCleanup(chunkId_t chunkId)$/;"	f	class:LayoutManager
Extension	cc/access/kfs_setup.py	/^from distutils.core import setup, Extension$/;"	i
FID_CACHE_CLEANUP_INTERVAL	cc/meta/kfstree.h	/^const int FID_CACHE_CLEANUP_INTERVAL = 600;$/;"	m	namespace:KFS
FID_CACHE_ENTRY_EXPIRE_INTERVAL	cc/meta/kfstree.h	/^const int FID_CACHE_ENTRY_EXPIRE_INTERVAL = 600;$/;"	m	namespace:KFS
FILE_CACHE_ENTRY_VALID_TIME	cc/libkfsClient/KfsClientInt.h	/^const int FILE_CACHE_ENTRY_VALID_TIME = 30;$/;"	m	namespace:KFS
FKS_PROTOCOL_WORKER_H	cc/libkfsClient/KfsProtocolWorker.h	26;"	d
FTMatcher	cc/libkfsClient/KfsClient.cc	/^    FTMatcher(kfsFileId_t f, const char *n): parentFid(f), myname(n) { }$/;"	f	class:FTMatcher
FTMatcher	cc/libkfsClient/KfsClient.cc	/^class FTMatcher {$/;"	c	file:
FUSE_KFS_PROPERTIES	cc/fuse/kfs_fuse_main.cc	/^static char *FUSE_KFS_PROPERTIES = ".\/kfs.prp";$/;"	v	file:
FUSE_USE_VERSION	cc/fuse/kfs_fuse_main.cc	27;"	d	file:
FailAllOps	cc/chunk/RemoteSyncSM.cc	/^RemoteSyncSM::FailAllOps()$/;"	f	class:RemoteSyncSM
FailDispatchedOps	cc/meta/ChunkServer.cc	/^ChunkServer::FailDispatchedOps()$/;"	f	class:ChunkServer
FailPendingOps	cc/emulator/ChunkServerEmulator.cc	/^ChunkServerEmulator::FailPendingOps()$/;"	f	class:ChunkServerEmulator
FailPendingOps	cc/meta/ChunkServer.cc	/^ChunkServer::FailPendingOps()$/;"	f	class:ChunkServer
FatalError	cc/chunk/AtomicRecordAppender.cc	/^    void FatalError()$/;"	f	class:KFS::AtomicRecordAppender
FatalError	cc/libkfsClient/WriteAppender.cc	/^    void FatalError($/;"	f	class:KFS::WriteAppender::Impl	file:
FatalError	cc/qcdio/qcthread.cpp	/^QCThread::FatalError($/;"	f	class:QCThread
FatalError	cc/qcdio/qcutils.cpp	/^QCUtils::FatalError($/;"	f	class:QCUtils
FattrReply	cc/meta/request.cc	/^static inline string FattrReply(const MetaFattr *fa)$/;"	f	namespace:KFS
Fd	cc/qcdio/qcfdpoll.h	/^    typedef int Fd;$/;"	t	class:QCFdPoll
FdAttr	cc/libkfsClient/KfsClientInt.h	/^    FileAttr *FdAttr(int fd) { return &FdInfo(fd)->fattr; }$/;"	f	class:KFS::KfsClientImpl
FdBuffer	cc/libkfsClient/KfsClientInt.h	/^    ChunkBuffer *FdBuffer(int fd) { return &FdInfo(fd)->buffer; }$/;"	f	class:KFS::KfsClientImpl
FdInfo	cc/libkfsClient/KfsClientInt.h	/^    FileTableEntry *FdInfo(int fd) { return mFileTable[fd]; }$/;"	f	class:KFS::KfsClientImpl
FdMap	cc/qcdio/qcfdpoll.cpp	/^    > FdMap;$/;"	t	class:QCFdPoll::Impl	file:
FdMapEnry	cc/qcdio/qcfdpoll.cpp	/^    struct FdMapEnry$/;"	s	class:QCFdPoll::Impl	file:
FdPollMask	cc/qcdio/qcfdpoll.cpp	/^    int FdPollMask($/;"	f	class:QCFdPoll::Impl	file:
FdPos	cc/libkfsClient/KfsClientInt.h	/^    FilePosition *FdPos(int fd) { return &FdInfo(fd)->currPos; }$/;"	f	class:KFS::KfsClientImpl
File	cc/chunk/DiskIo.h	/^        File()$/;"	f	class:KFS::DiskIo::File
File	cc/chunk/DiskIo.h	/^    class File$/;"	c	class:KFS::DiskIo
FileAttr	cc/libkfsClient/KfsAttr.h	/^    FileAttr() {$/;"	f	struct:KFS::FileAttr
FileAttr	cc/libkfsClient/KfsAttr.h	/^struct FileAttr {$/;"	s	namespace:KFS
FileChunkInfo	cc/libkfsClient/KfsAttr.h	/^    FileChunkInfo() { }$/;"	f	struct:KFS::FileChunkInfo
FileChunkInfo	cc/libkfsClient/KfsAttr.h	/^    FileChunkInfo(const string &f, kfsFileId_t t) : $/;"	f	struct:KFS::FileChunkInfo
FileChunkInfo	cc/libkfsClient/KfsAttr.h	/^struct FileChunkInfo {$/;"	s	namespace:KFS
FileHandlePtr	cc/libkfsIO/FileHandle.h	/^    typedef boost::shared_ptr<FileHandle_t> FileHandlePtr;$/;"	t	namespace:KFS
FileHandle_t	cc/libkfsIO/FileHandle.h	/^        FileHandle_t() : mFd(-1) { }$/;"	f	struct:KFS::FileHandle_t
FileHandle_t	cc/libkfsIO/FileHandle.h	/^        FileHandle_t(int fd) : mFd(fd) { }$/;"	f	struct:KFS::FileHandle_t
FileHandle_t	cc/libkfsIO/FileHandle.h	/^    struct FileHandle_t {$/;"	s	namespace:KFS
FileId	cc/libkfsClient/KfsProtocolWorker.h	/^    typedef kfsFileId_t  FileId;$/;"	t	class:KFS::KfsProtocolWorker
FileIdx	cc/qcdio/qcdiskqueue.h	/^    typedef int      FileIdx;$/;"	t	class:QCDiskQueue
FileInfo	cc/qcdio/qcdiskqueue.cpp	/^        FileInfo()$/;"	f	struct:QCDiskQueue::Queue::FileInfo
FileInfo	cc/qcdio/qcdiskqueue.cpp	/^    struct FileInfo$/;"	s	class:QCDiskQueue::Queue	file:
FileInstance	cc/libkfsClient/KfsProtocolWorker.h	/^    typedef unsigned int FileInstance;$/;"	t	class:KFS::KfsProtocolWorker
FilePosition	cc/libkfsClient/KfsClientInt.h	/^    FilePosition() {$/;"	f	struct:KFS::FilePosition
FilePosition	cc/libkfsClient/KfsClientInt.h	/^struct FilePosition {$/;"	s	namespace:KFS
FilePtr	cc/chunk/DiskIo.h	/^    typedef boost::shared_ptr<File> FilePtr;$/;"	t	class:KFS::DiskIo
FileTableEntry	cc/libkfsClient/KfsClientInt.h	/^    FileTableEntry(kfsFileId_t p, const char *n, unsigned int instance):$/;"	f	struct:KFS::FileTableEntry
FileTableEntry	cc/libkfsClient/KfsClientInt.h	/^struct FileTableEntry {$/;"	s	namespace:KFS
FileType	cc/meta/kfstypes.h	/^enum FileType {$/;"	g	namespace:KFS
File_dealloc	cc/access/KfsModulePy.cc	/^File_dealloc(PyObject *pself)$/;"	f	file:
File_init	cc/access/KfsModulePy.cc	/^File_init(PyObject *pself, PyObject *args, PyObject *kwds)$/;"	f	file:
File_members	cc/access/KfsModulePy.cc	/^static PyMemberDef File_members[] = {$/;"	v	file:
File_methods	cc/access/KfsModulePy.cc	/^static PyMethodDef File_methods[] = {$/;"	v	file:
File_new	cc/access/KfsModulePy.cc	/^File_new(PyTypeObject *type, PyObject *args, PyObject *kwds)$/;"	f	file:
File_print	cc/access/KfsModulePy.cc	/^File_print(PyObject *pself, FILE *fp, int flags)$/;"	f	file:
File_repr	cc/access/KfsModulePy.cc	/^File_repr(PyObject *pself)$/;"	f	file:
Fileno	cc/libkfsClient/KfsClient.cc	/^KfsClient::Fileno(const char *pathname)$/;"	f	class:KfsClient
Fileno	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::Fileno(const char *pathname)$/;"	f	class:KfsClientImpl
Fill	cc/libkfsIO/BufferedSocket.h	/^    void Fill(int nbytes) {$/;"	f	class:KFS::BufferedSocket
Fill	cc/libkfsIO/IOBuffer.cc	/^int IOBufferData::Fill(int numBytes)$/;"	f	class:IOBufferData
Find	cc/meta/LayoutManager.h	/^		const_iterator Find(fid_t fid) const {$/;"	f	class:KFS::ARAChunkCache
Find	cc/meta/LayoutManager.h	/^		iterator Find(fid_t fid) {$/;"	f	class:KFS::ARAChunkCache
FindAndMoveBack	cc/chunk/ChunkManager.h	/^        WriteOp* FindAndMoveBack(int64_t writeId)$/;"	f	class:KFS::ChunkManager::PendingWrites
FindCandidateRacks	cc/meta/LayoutManager.cc	/^LayoutManager::FindCandidateRacks(vector<int> &result)$/;"	f	class:LayoutManager
FindCandidateRacks	cc/meta/LayoutManager.cc	/^LayoutManager::FindCandidateRacks(vector<int> &result, const set<int> &excludes)$/;"	f	class:LayoutManager
FindCandidateServers	cc/meta/LayoutManager.cc	/^LayoutManager::FindCandidateServers(vector<ChunkServerPtr> &result,$/;"	f	class:LayoutManager
FindDiskQueue	cc/chunk/DiskIo.cc	/^    DiskQueue* FindDiskQueue($/;"	f	class:KFS::DiskIoQueues
FindFreeFileTableEntry	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::FindFreeFileTableEntry()$/;"	f	class:KfsClientImpl
FindInterRackRebalanceCandidate	cc/meta/LayoutManager.cc	/^LayoutManager::FindInterRackRebalanceCandidate(ChunkServerPtr &candidate,$/;"	f	class:LayoutManager
FindIntraRackRebalanceCandidates	cc/meta/LayoutManager.cc	/^LayoutManager::FindIntraRackRebalanceCandidates(vector<ChunkServerPtr> &candidates,$/;"	f	class:LayoutManager
FindMatchingRequest	cc/meta/ChunkServer.cc	/^ChunkServer::FindMatchingRequest(seq_t cseq)$/;"	f	class:ChunkServer
FindReplicationWorkForServer	cc/meta/LayoutManager.cc	/^LayoutManager::FindReplicationWorkForServer(ChunkServerPtr &server, chunkId_t chunkReplicated)$/;"	f	class:LayoutManager
FindServer	cc/chunk/ChunkServer.cc	/^RemoteSyncSMPtr ChunkServer::FindServer(const ServerLocation &location, bool connect)$/;"	f	class:ChunkServer
FindServer	cc/chunk/ClientSM.cc	/^ClientSM::FindServer(const ServerLocation &loc, bool connect)$/;"	f	class:ClientSM
FindServer	cc/chunk/RemoteSyncSM.cc	/^KFS::FindServer(list<RemoteSyncSMPtr> &remoteSyncers, const ServerLocation &location, $/;"	f	class:KFS
Finish	cc/chunk/RemoteSyncSM.cc	/^RemoteSyncSM::Finish()$/;"	f	class:RemoteSyncSM
Flush	cc/common/BufferedLogWriter.cc	/^    void Flush()$/;"	f	class:KFS::BufferedLogWriter::Impl
Flush	cc/common/BufferedLogWriter.cc	/^BufferedLogWriter::Flush()$/;"	f	class:KFS::BufferedLogWriter
FlushAll	cc/chunk/AtomicRecordAppender.cc	/^    void FlushAll()$/;"	f	class:KFS::AtomicRecordAppender	file:
FlushBuffer	cc/libkfsClient/KfsWrite.cc	/^KfsClientImpl::FlushBuffer(int fd, bool flushOnlyIfHasFullChecksumBlock)$/;"	f	class:KfsClientImpl
FlushFullBlocks	cc/chunk/AtomicRecordAppender.cc	/^    void FlushFullBlocks()$/;"	f	class:KFS::AtomicRecordAppender	file:
FlushIfLowOnBuffers	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppendManager::FlushIfLowOnBuffers()$/;"	f	class:KFS::AtomicRecordAppendManager
FlushIfNeeded	cc/common/BufferedLogWriter.cc	/^    void FlushIfNeeded($/;"	f	class:KFS::BufferedLogWriter::Impl	file:
FlushSelf	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppender::FlushSelf(bool flushFullChecksumBlocks)$/;"	f	class:KFS::AtomicRecordAppender
FlushSelf	cc/common/BufferedLogWriter.cc	/^    bool FlushSelf()$/;"	f	class:KFS::BufferedLogWriter::Impl	file:
ForceDown	cc/meta/ChunkServer.cc	/^ChunkServer::ForceDown()$/;"	f	class:ChunkServer
ForwardToPeer	cc/chunk/KfsOps.cc	/^CloseOp::ForwardToPeer(const ServerLocation &loc)$/;"	f	class:CloseOp
ForwardToPeer	cc/chunk/KfsOps.cc	/^WriteIdAllocOp::ForwardToPeer(const ServerLocation &loc)$/;"	f	class:WriteIdAllocOp
ForwardToPeer	cc/chunk/KfsOps.cc	/^WritePrepareOp::ForwardToPeer(const ServerLocation &loc, IOBuffer *dataBuf)$/;"	f	class:WritePrepareOp
ForwardToPeer	cc/chunk/KfsOps.cc	/^WriteSyncOp::ForwardToPeer(const ServerLocation &loc)$/;"	f	class:WriteSyncOp
FreeArgs	cc/chunk/ChunkServer_main.cc	/^    static void FreeArgs(char** args)$/;"	f	class:Restarter	file:
FreeSyncRequests	cc/libkfsClient/KfsProtocolWorker.cc	/^    typedef QCDLList<SyncRequest, 0> FreeSyncRequests;$/;"	t	class:KFS::KfsProtocolWorker::Impl	file:
FromString	cc/common/kfsdecls.h	/^    void FromString(const std::string &s) {$/;"	f	struct:KFS::ServerLocation
Front	cc/qcdio/qcdiskqueue.cpp	/^    Request* Front($/;"	f	class:QCDiskQueue::Queue	file:
Front	cc/qcdio/qcdllist.h	/^    static NodeT* Front($/;"	f	class:QCDLList
Fsck	cc/meta/LayoutManager.cc	/^LayoutManager::Fsck(ostringstream &os)$/;"	f	class:LayoutManager
FunctorBase	cc/meta/queue.h	/^	FunctorBase() { }$/;"	f	class:KFS::FunctorBase
FunctorBase	cc/meta/queue.h	/^template <typename T> class FunctorBase {$/;"	c	namespace:KFS
FunctorWrapper	cc/meta/queue.h	/^	FunctorWrapper(FunctorBase<T> *f) : func(f) { }$/;"	f	class:KFS::FunctorWrapper
FunctorWrapper	cc/meta/queue.h	/^template <typename T> class FunctorWrapper {$/;"	c	namespace:KFS
Get	cc/chunk/BufferManager.h	/^    bool Get($/;"	f	class:KFS::BufferManager
Get	cc/chunk/DiskIo.cc	/^    DiskIo* Get()$/;"	f	class:KFS::DiskIoQueues
Get	cc/libkfsClient/KfsProtocolWorker.cc	/^        libkfsio::IOBufferAllocator& Get($/;"	f	class:KFS::KfsProtocolWorker::Impl::DoNotDeallocate
Get	cc/meta/LayoutManager.h	/^		Entry* Get(fid_t fid) {$/;"	f	class:KFS::ARAChunkCache
Get	cc/meta/LayoutManager.h	/^		Entry* Get(iterator it) {$/;"	f	class:KFS::ARAChunkCache
Get	cc/meta/LayoutManager.h	/^		const Entry* Get(const_iterator it) const {$/;"	f	class:KFS::ARAChunkCache
Get	cc/meta/LayoutManager.h	/^		const Entry* Get(fid_t fid) const {$/;"	f	class:KFS::ARAChunkCache
Get	cc/qcdio/qcdiskqueue.cpp	/^        virtual char* Get()$/;"	f	class:QCDiskQueue::Queue::BuffersIterator
Get	cc/qcdio/qcdiskqueue.cpp	/^    Request* Get($/;"	f	class:QCDiskQueue::Queue	file:
Get	cc/qcdio/qciobufferpool.cpp	/^    char* Get()$/;"	f	class:QCIoBufferPool::Partition
Get	cc/qcdio/qciobufferpool.cpp	/^QCIoBufferPool::Get($/;"	f	class:QCIoBufferPool
Get	cc/qcdio/qcunittest.cpp	/^        bool Get($/;"	f	class:QCDiskQueueTest::BPClient
Get	cc/qcdio/qcunittest.cpp	/^        virtual char* Get()$/;"	f	class:QCDiskQueueTest::Iterator
GetAbsTimeout	cc/qcdio/qcmutex.cpp	/^GetAbsTimeout($/;"	f	file:
GetAlignment	cc/chunk/AtomicRecordAppender.cc	/^    int GetAlignment() const$/;"	f	class:KFS::AtomicRecordAppender
GetAlignment	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppendManager::GetAlignment(kfsChunkId_t chunkId) const$/;"	f	class:KFS::AtomicRecordAppendManager
GetAllocOp	cc/libkfsClient/KfsOps.h	/^    GetAllocOp(kfsSeq_t s, kfsFileId_t f, off_t o) :$/;"	f	struct:KFS::GetAllocOp
GetAllocOp	cc/libkfsClient/KfsOps.h	/^struct GetAllocOp: public KfsOp {$/;"	s	namespace:KFS
GetAppendersCount	cc/chunk/AtomicRecordAppender.h	/^    size_t GetAppendersCount() const$/;"	f	class:KFS::AtomicRecordAppendManager
GetAppendersWithWidCount	cc/chunk/AtomicRecordAppender.h	/^    int64_t GetAppendersWithWidCount() const {$/;"	f	class:KFS::AtomicRecordAppendManager
GetAvailSpace	cc/meta/ChunkServer.h	/^                int64_t GetAvailSpace() const {$/;"	f	class:KFS::ChunkServer
GetBlockSize	cc/qcdio/qcdiskqueue.cpp	/^    int GetBlockSize() const$/;"	f	class:QCDiskQueue::Queue
GetBlockSize	cc/qcdio/qcdiskqueue.cpp	/^QCDiskQueue::GetBlockSize() const$/;"	f	class:QCDiskQueue
GetBufferAllocator	cc/chunk/DiskIo.cc	/^    libkfsio::IOBufferAllocator& GetBufferAllocator()$/;"	f	class:KFS::DiskIoQueues
GetBufferLimitRatio	cc/chunk/AtomicRecordAppender.h	/^    double GetBufferLimitRatio()        const { return mBufferLimitRatio;        }$/;"	f	class:KFS::AtomicRecordAppendManager
GetBufferManager	cc/chunk/ClientSM.cc	/^inline BufferManager& ClientSM::GetBufferManager()$/;"	f	class:ClientSM
GetBufferManager	cc/chunk/DiskIo.cc	/^    BufferManager& GetBufferManager()$/;"	f	class:KFS::DiskIoQueues
GetBufferManager	cc/chunk/DiskIo.cc	/^DiskIo::GetBufferManager()$/;"	f	class:KFS::DiskIo
GetBufferPool	cc/chunk/DiskIo.cc	/^        QCIoBufferPool& GetBufferPool()$/;"	f	class:KFS::DiskIoQueues::BufferAllocator
GetBufferPool	cc/chunk/DiskIo.cc	/^    QCIoBufferPool& GetBufferPool()$/;"	f	class:KFS::DiskIoQueues	file:
GetBufferPool	cc/meta/metaserver_main.cc	/^    QCIoBufferPool& GetBufferPool()$/;"	f	class:BufferAllocator
GetBufferSize	cc/chunk/DiskIo.cc	/^        virtual size_t GetBufferSize() const$/;"	f	class:KFS::DiskIoQueues::BufferAllocator
GetBufferSize	cc/libkfsClient/KfsAsyncRW.h	/^        size_t GetBufferSize() const { return bufsz; }$/;"	f	class:KFS::NullAllocator
GetBufferSize	cc/libkfsClient/KfsProtocolWorker.cc	/^        virtual size_t GetBufferSize() const$/;"	f	class:KFS::KfsProtocolWorker::Impl::DoNotDeallocate
GetBufferSize	cc/meta/metaserver_main.cc	/^    virtual size_t GetBufferSize() const$/;"	f	class:BufferAllocator
GetBufferSize	cc/qcdio/qciobufferpool.h	/^    int GetBufferSize() const$/;"	f	class:QCIoBufferPool
GetBuffersPtr	cc/qcdio/qcdiskqueue.cpp	/^    char** GetBuffersPtr($/;"	f	class:QCDiskQueue::Queue	file:
GetByteCount	cc/chunk/BufferManager.h	/^        ByteCount GetByteCount() const$/;"	f	class:KFS::BufferManager::Client
GetCPULoadAvg	cc/meta/ChunkServer.h	/^		double GetCPULoadAvg() const {$/;"	f	class:KFS::ChunkServer
GetChecksum	cc/chunk/ChunkManager.cc	/^ChunkManager::GetChecksum(kfsChunkId_t chunkId, off_t offset)$/;"	f	class:KFS::ChunkManager
GetChecksumBlockTailSize	cc/libkfsClient/KfsWrite.cc	/^inline size_t GetChecksumBlockTailSize(off_t offset)$/;"	f
GetChecksums	cc/chunk/ChunkManager.cc	/^ChunkManager::GetChecksums(kfsChunkId_t chunkId, off_t offset, size_t numBytes)$/;"	f	class:KFS::ChunkManager
GetChunkDirsEntries	cc/chunk/ChunkManager.cc	/^ChunkManager::GetChunkDirsEntries(struct dirent ***namelist)$/;"	f	class:KFS::ChunkManager
GetChunkFileId	cc/meta/LayoutManager.cc	/^LayoutManager::GetChunkFileId(chunkId_t chunkId, fid_t& fileId)$/;"	f	class:LayoutManager
GetChunkFromReplica	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::GetChunkFromReplica(const ServerLocation &loc, kfsChunkId_t chunkId,$/;"	f	class:KfsClientImpl
GetChunkId	cc/chunk/AtomicRecordAppender.cc	/^    kfsChunkId_t GetChunkId() const$/;"	f	class:KFS::AtomicRecordAppender
GetChunkIdCount	cc/chunk/ChunkManager.h	/^        size_t GetChunkIdCount() const$/;"	f	class:KFS::ChunkManager::PendingWrites
GetChunkInfo	cc/chunk/ChunkManager.cc	/^ChunkManager::GetChunkInfo(kfsChunkId_t chunkId)$/;"	f	class:KFS::ChunkManager
GetChunkInfoHandle	cc/chunk/ChunkManager.cc	/^ChunkManager::GetChunkInfoHandle(kfsChunkId_t chunkId, ChunkInfoHandle **cih) $/;"	f	class:KFS::ChunkManager
GetChunkMetadataOp	cc/chunk/KfsOps.h	/^    GetChunkMetadataOp(kfsSeq_t s) :$/;"	f	struct:KFS::GetChunkMetadataOp
GetChunkMetadataOp	cc/chunk/KfsOps.h	/^struct GetChunkMetadataOp : public KfsOp {$/;"	s	namespace:KFS
GetChunkMetadataOp	cc/libkfsClient/KfsOps.h	/^    GetChunkMetadataOp(kfsSeq_t s, kfsChunkId_t c) :$/;"	f	struct:KFS::GetChunkMetadataOp
GetChunkMetadataOp	cc/libkfsClient/KfsOps.h	/^struct GetChunkMetadataOp: public KfsOp {$/;"	s	namespace:KFS
GetChunkOffset	cc/libkfsClient/KfsClientInt.h	/^    off_t GetChunkOffset() const { return (IsValid() ? mReadOp.offset : -1); }$/;"	f	class:KFS::PendingChunkRead
GetChunkPathEntries	cc/chunk/ChunkManager.cc	/^ChunkManager::GetChunkPathEntries(vector<string> &pathnames)$/;"	f	class:KFS::ChunkManager
GetChunkReadLease	cc/meta/LayoutManager.cc	/^LayoutManager::GetChunkReadLease(MetaLeaseAcquire *req)$/;"	f	class:LayoutManager
GetChunkServerCounters	cc/meta/LayoutManager.cc	/^LayoutManager::GetChunkServerCounters() const$/;"	f	class:LayoutManager
GetChunkServerFactory	cc/meta/NetDispatch.h	/^        ChunkServerFactory *GetChunkServerFactory() {$/;"	f	class:KFS::NetDispatch
GetChunkServerSocket	cc/libkfsClient/KfsClientInt.h	/^    TcpSocket *GetChunkServerSocket(const ServerLocation &loc, bool nonblockingConnect = false) {$/;"	f	struct:KFS::FilePosition
GetChunkSize	cc/chunk/AtomicRecordAppender.cc	/^    off_t GetChunkSize() const$/;"	f	class:KFS::AtomicRecordAppender	file:
GetChunkSize	cc/emulator/LayoutEmulator.cc	/^LayoutEmulator::GetChunkSize(chunkId_t cid)$/;"	f	class:LayoutEmulator
GetChunkSize	cc/libkfsClient/KfsClient.h	/^    int GetChunkSize(const char *pathname) {$/;"	f	class:KFS::KfsClient
GetChunkSize	cc/meta/ChunkServer.cc	/^ChunkServer::GetChunkSize(fid_t fid, chunkId_t chunkId, const string &pathname)$/;"	f	class:ChunkServer
GetChunkSizeDone	cc/meta/LayoutManager.cc	/^LayoutManager::GetChunkSizeDone(MetaChunkSize* req)$/;"	f	class:LayoutManager
GetChunkSizes	cc/emulator/LayoutEmulator.cc	/^LayoutEmulator::GetChunkSizes(chunkId_t cid)$/;"	f	class:LayoutEmulator
GetChunkToServerMap	cc/meta/LayoutManager.h	/^		void GetChunkToServerMap(CSMap& map) {$/;"	f	class:KFS::LayoutManager
GetChunkToServerMapping	cc/meta/LayoutManager.cc	/^LayoutManager::GetChunkToServerMapping(chunkId_t chunkId, vector<ChunkServerPtr> &c)$/;"	f	class:LayoutManager
GetChunkVersion	cc/chunk/ChunkManager.cc	/^ChunkManager::GetChunkVersion(kfsChunkId_t c)$/;"	f	class:KFS::ChunkManager
GetChunkWriteLease	cc/meta/LayoutManager.cc	/^LayoutManager::GetChunkWriteLease(MetaAllocate *r, bool &isNewLease)$/;"	f	class:LayoutManager
GetChunksToMove	cc/meta/ChunkServer.h	/^		const ChunkIdSet& GetChunksToMove() {$/;"	f	class:KFS::ChunkServer
GetChunkversion	cc/emulator/LayoutEmulator.cc	/^LayoutEmulator::GetChunkversion(fid_t fid, chunkId_t cid)$/;"	f	class:LayoutEmulator
GetCkptVersion	cc/chunk/Logger.cc	/^Logger::GetCkptVersion(const char *versionLine)$/;"	f	class:Logger
GetCleanUpSec	cc/chunk/AtomicRecordAppender.h	/^    int    GetCleanUpSec()              const { return mCleanUpSec;              }$/;"	f	class:KFS::AtomicRecordAppendManager
GetClient	cc/libkfsClient/KfsClient.cc	/^KfsClientFactory::GetClient(const char *propFile)$/;"	f	class:KfsClientFactory
GetClient	cc/libkfsClient/KfsClient.cc	/^KfsClientFactory::GetClient(const std::string metaServerHost, int metaServerPort)$/;"	f	class:KfsClientFactory
GetClient	cc/libkfsClient/KfsClient.h	/^    KfsClientPtr GetClient() {$/;"	f	class:KFS::KfsClientFactory
GetClientsWihtBuffersCount	cc/chunk/BufferManager.h	/^    int GetClientsWihtBuffersCount() const$/;"	f	class:KFS::BufferManager
GetCloseEmptyWidStateSec	cc/chunk/AtomicRecordAppender.h	/^    int    GetCloseEmptyWidStateSec()   const { return mCloseEmptyWidStateSec;   }$/;"	f	class:KFS::AtomicRecordAppendManager
GetCommitReply	cc/libkfsClient/KfsWrite.cc	/^KfsClientImpl::GetCommitReply(WriteSyncOp &sop, TcpSocket *masterSock)$/;"	f	class:KfsClientImpl
GetContentLength	cc/chunk/KfsOps.h	/^    virtual int GetContentLength() const { return 0; }$/;"	f	struct:KFS::KfsOp
GetContentLength	cc/chunk/KfsOps.h	/^    virtual int GetContentLength() const { return contentLength; }$/;"	f	struct:KFS::SetProperties
GetContentLength	cc/chunk/KfsOps.h	/^    virtual int GetContentLength() const { return contentLength; }$/;"	f	struct:KFS::StaleChunksOp
GetCount	cc/libkfsIO/NetErrorSimulator.cc	/^    Random::result_type GetCount($/;"	f	class:KFS::NetErrorSimulator	file:
GetCounter	cc/libkfsIO/Counter.h	/^    Counter *GetCounter(const std::string &name) {$/;"	f	class:KFS::CounterManager
GetCounters	cc/chunk/AtomicRecordAppender.h	/^    void   GetCounters(Counters& outCounters)$/;"	f	class:KFS::AtomicRecordAppendManager
GetCounters	cc/chunk/BufferManager.h	/^    void GetCounters($/;"	f	class:KFS::BufferManager
GetCounters	cc/chunk/ChunkManager.h	/^    void GetCounters(Counters& counters)$/;"	f	class:KFS::ChunkManager
GetCounters	cc/chunk/ClientManager.h	/^    void GetCounters(Counters& counters) {$/;"	f	class:KFS::ClientManager
GetCounters	cc/chunk/DiskIo.cc	/^    void GetCounters($/;"	f	class:KFS::DiskIoQueues
GetCounters	cc/chunk/DiskIo.cc	/^DiskIo::GetCounters($/;"	f	class:KFS::DiskIo
GetCounters	cc/chunk/MetaServerSM.h	/^    void GetCounters(Counters& counters) {$/;"	f	class:KFS::MetaServerSM
GetCounters	cc/common/BufferedLogWriter.cc	/^    void GetCounters($/;"	f	class:KFS::BufferedLogWriter::Impl
GetCounters	cc/common/BufferedLogWriter.cc	/^BufferedLogWriter::GetCounters($/;"	f	class:KFS::BufferedLogWriter
GetCurrChunk	cc/libkfsClient/KfsClientInt.h	/^    ChunkAttr *GetCurrChunk(int fd) {$/;"	f	class:KFS::KfsClientImpl
GetCwd	cc/libkfsClient/KfsClient.cc	/^KfsClient::GetCwd()$/;"	f	class:KfsClient
GetCwd	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::GetCwd()$/;"	f	class:KfsClientImpl
GetDataChecksums	cc/libkfsClient/KfsClient.cc	/^bool KfsClientImpl::GetDataChecksums(const ServerLocation &loc, $/;"	f	class:KfsClientImpl
GetDataLocation	cc/libkfsClient/KfsClient.cc	/^KfsClient::GetDataLocation(const char *pathname, off_t start, off_t len,$/;"	f	class:KfsClient
GetDataLocation	cc/libkfsClient/KfsClient.cc	/^KfsClient::GetDataLocation(int fd, off_t start, off_t len,$/;"	f	class:KfsClient
GetDataLocation	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::GetDataLocation(const char *pathname, off_t start, off_t len,$/;"	f	class:KfsClientImpl
GetDataLocation	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::GetDataLocation(int fd, off_t start, off_t len,$/;"	f	class:KfsClientImpl
GetDefaultBufferSize	cc/libkfsIO/IOBuffer.h	/^    static int GetDefaultBufferSize() {$/;"	f	class:KFS::IOBufferData
GetDefaultIOTimeout	cc/libkfsClient/KfsClient.cc	/^KfsClient::GetDefaultIOTimeout(struct timeval &timeout)$/;"	f	class:KfsClient
GetDefaultIoBufferSize	cc/libkfsClient/KfsClient.cc	/^KfsClient::GetDefaultIoBufferSize() const$/;"	f	class:KfsClient
GetDefaultIoBufferSize	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::GetDefaultIoBufferSize() const$/;"	f	class:KfsClientImpl
GetDefaultReadAheadSize	cc/libkfsClient/KfsClient.cc	/^KfsClient::GetDefaultReadAheadSize() const$/;"	f	class:KfsClient
GetDefaultReadAheadSize	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::GetDefaultReadAheadSize() const$/;"	f	class:KfsClientImpl
GetDeviceId	cc/chunk/DiskIo.cc	/^    unsigned long GetDeviceId() const$/;"	f	class:KFS::DiskQueue
GetDirForChunk	cc/chunk/ChunkManager.cc	/^ChunkManager::GetDirForChunk()$/;"	f	class:KFS::ChunkManager
GetDirSummary	cc/libkfsClient/KfsClient.cc	/^KfsClient::GetDirSummary(const char *pathname, uint64_t &numFiles, uint64_t &numBytes)$/;"	f	class:KfsClient
GetDirSummary	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::GetDirSummary(const char *pathname, uint64_t &numFiles, uint64_t &numBytes)$/;"	f	class:KfsClientImpl
GetDirSummaryOp	cc/libkfsClient/KfsOps.h	/^    GetDirSummaryOp(kfsSeq_t s, kfsFileId_t f):$/;"	f	struct:KFS::GetDirSummaryOp
GetDirSummaryOp	cc/libkfsClient/KfsOps.h	/^struct GetDirSummaryOp : public KfsOp {$/;"	s	namespace:KFS
GetDirname	cc/chunk/Chunk.h	/^    std::string GetDirname() const {$/;"	f	struct:KFS::ChunkInfo_t
GetDirtyChunkPath	cc/chunk/ChunkManager.cc	/^GetDirtyChunkPath(const string partition)$/;"	f	namespace:KFS
GetDiskQueuePendingCount	cc/chunk/DiskIo.cc	/^DiskIo::File::GetDiskQueuePendingCount($/;"	f	class:KFS::DiskIo::File
GetDiskQueuePtr	cc/chunk/DiskIo.h	/^        DiskQueue* GetDiskQueuePtr() const$/;"	f	class:KFS::DiskIo::File
GetDriveName	cc/chunk/ChunkManager.cc	/^ChunkManager::GetDriveName(ReadOp *op)$/;"	f	class:KFS::ChunkManager
GetError	cc/qcdio/qcdiskqueue.h	/^        Error GetError() const$/;"	f	class:QCDiskQueue::EnqueueStatus
GetError	cc/qcdio/qcdiskqueue.h	/^        Error GetError() const$/;"	f	class:QCDiskQueue::Status
GetErrorCode	cc/libkfsClient/WriteAppender.cc	/^    bool GetErrorCode() const$/;"	f	class:KFS::WriteAppender::Impl
GetErrorCode	cc/libkfsClient/WriteAppender.cc	/^WriteAppender::GetErrorCode() const$/;"	f	class:KFS::WriteAppender
GetErrorMsg	cc/qcdio/qcthread.cpp	/^QCThread::GetErrorMsg($/;"	f	class:QCThread
GetEvacuatingChunks	cc/meta/ChunkServer.h	/^		const ChunkIdSet& GetEvacuatingChunks() {$/;"	f	class:KFS::ChunkServer
GetFd	cc/libkfsIO/NetKicker.cc	/^    int GetFd() const { return mPipeFds[0]; }$/;"	f	class:NetKicker::Impl
GetFd	cc/libkfsIO/NetKicker.cc	/^NetKicker::GetFd() const$/;"	f	class:NetKicker
GetFd	cc/libkfsIO/NetManager.cc	/^    int GetFd() const { return mPipeFds[0]; }$/;"	f	class:NetManager::Waker
GetFd	cc/libkfsIO/TcpSocket.h	/^    inline int GetFd() { return mSockFd; };$/;"	f	class:KFS::TcpSocket
GetFdCountPerFile	cc/chunk/DiskIo.cc	/^    int GetFdCountPerFile() const$/;"	f	class:KFS::DiskIoQueues
GetFdCountPerFile	cc/chunk/DiskIo.cc	/^DiskIo::GetFdCountPerFile()$/;"	f	class:KFS::DiskIo
GetFileHandle	cc/libkfsIO/DiskConnection.h	/^    FileHandlePtr &GetFileHandle() { return mHandle; }$/;"	f	class:KFS::DiskConnection
GetFileIdx	cc/chunk/DiskIo.h	/^        int GetFileIdx() const$/;"	f	class:KFS::DiskIo::File
GetFileIdx	cc/qcdio/qcdiskqueue.h	/^        FileIdx GetFileIdx() const$/;"	f	class:QCDiskQueue::OpenFileStatus
GetFlushIntervalSec	cc/chunk/AtomicRecordAppender.h	/^    int    GetFlushIntervalSec()        const { return mFlushIntervalSec;        }$/;"	f	class:KFS::AtomicRecordAppendManager
GetFlushLimit	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppendManager::GetFlushLimit($/;"	f	class:KFS::AtomicRecordAppendManager
GetFlushLimit	cc/chunk/AtomicRecordAppender.h	/^    int    GetFlushLimit()              const { return mFlushLimit;              }$/;"	f	class:KFS::AtomicRecordAppendManager
GetFreeBufferCount	cc/chunk/BufferManager.h	/^    int GetFreeBufferCount() const$/;"	f	class:KFS::BufferManager
GetFreeBufferCount	cc/qcdio/qciobufferpool.cpp	/^QCIoBufferPool::GetFreeBufferCount()$/;"	f	class:QCIoBufferPool
GetFreeCount	cc/qcdio/qciobufferpool.cpp	/^    int GetFreeCount() const$/;"	f	class:QCIoBufferPool::Partition
GetGetRequestCount	cc/chunk/BufferManager.h	/^    RequestCount GetGetRequestCount() const$/;"	f	class:KFS::BufferManager
GetHostedChunks	cc/chunk/ChunkManager.cc	/^ChunkManager::GetHostedChunks($/;"	f	class:KFS::ChunkManager
GetIdleTimeoutSec	cc/chunk/ClientManager.h	/^    int GetIdleTimeoutSec() const {$/;"	f	class:KFS::ClientManager
GetIdleTimeoutSec	cc/libkfsClient/KfsNetClient.cc	/^    int GetIdleTimeoutSec() const$/;"	f	class:KFS::KfsNetClient::Impl
GetIdleTimeoutSec	cc/libkfsClient/KfsNetClient.cc	/^KfsNetClient::GetIdleTimeoutSec() const$/;"	f	class:KFS::KfsNetClient
GetInactivityTimeout	cc/libkfsIO/NetConnection.h	/^    int GetInactivityTimeout() const {$/;"	f	class:KFS::NetConnection
GetInitalSeqNum	cc/libkfsClient/KfsProtocolWorker.cc	/^    static int64_t GetInitalSeqNum($/;"	f	class:KFS::KfsProtocolWorker::Impl	file:
GetIoBufAllocator	cc/meta/metaserver_main.cc	/^static BufferAllocator& GetIoBufAllocator()$/;"	f	file:
GetIoBufferSize	cc/libkfsClient/KfsClient.cc	/^KfsClient::GetIoBufferSize(int fd) const$/;"	f	class:KfsClient
GetIoBufferSize	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::GetIoBufferSize(int fd) const$/;"	f	class:KfsClientImpl
GetIoByteCount	cc/qcdio/qcdiskqueue.h	/^            int GetIoByteCount() const$/;"	f	class:QCDiskQueue::CompletionStatus
GetIoTimeoutSec	cc/chunk/ClientManager.h	/^    int GetIoTimeoutSec() const {$/;"	f	class:KFS::ClientManager
GetKeyOp	cc/chunk/ChunkManager.h	/^        WriteOp& GetKeyOp() const$/;"	f	class:KFS::ChunkManager::PendingWrites
GetLastRecordAppendOpStatus	cc/libkfsClient/WriteAppender.cc	/^    void GetLastRecordAppendOpStatus()$/;"	f	class:KFS::WriteAppender::Impl	file:
GetLastRecvCmdTime	cc/chunk/MetaServerSM.h	/^    time_t GetLastRecvCmdTime() const {$/;"	f	class:KFS::MetaServerSM
GetLayoutOp	cc/libkfsClient/KfsOps.h	/^    GetLayoutOp(kfsSeq_t s, kfsFileId_t f) :$/;"	f	struct:KFS::GetLayoutOp
GetLayoutOp	cc/libkfsClient/KfsOps.h	/^struct GetLayoutOp: public KfsOp {$/;"	s	namespace:KFS
GetLease	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::GetLease(int fd, kfsChunkId_t chunkId, const string &pathname)$/;"	f	class:KfsClientImpl
GetLeaseExpireTime	cc/chunk/LeaseClerk.cc	/^LeaseClerk::GetLeaseExpireTime(kfsChunkId_t chunkId)$/;"	f	class:LeaseClerk
GetLeaseId	cc/libkfsClient/LeaseClerk.cc	/^LeaseClerk::GetLeaseId(kfsChunkId_t chunkId, int64_t &leaseId)$/;"	f	class:LeaseClerk
GetLocation	cc/chunk/MetaServerSM.h	/^    ServerLocation GetLocation() const {$/;"	f	class:KFS::MetaServerSM
GetLocation	cc/chunk/RemoteSyncSM.h	/^    ServerLocation GetLocation() const {$/;"	f	class:KFS::RemoteSyncSM
GetLogLevel	cc/common/BufferedLogWriter.h	/^    LogLevel GetLogLevel() const$/;"	f	class:KFS::BufferedLogWriter
GetLogLevelNamePtr	cc/common/BufferedLogWriter.cc	/^    static const char* GetLogLevelNamePtr($/;"	f	class:KFS::BufferedLogWriter::Impl
GetLogLevelNamePtr	cc/common/BufferedLogWriter.cc	/^BufferedLogWriter::GetLogLevelNamePtr($/;"	f	class:KFS::BufferedLogWriter
GetLogTimeStampPrefixPtr	cc/common/BufferedLogWriter.cc	/^    const char* GetLogTimeStampPrefixPtr($/;"	f	class:KFS::BufferedLogWriter::Impl	file:
GetLogVersion	cc/chunk/Logger.cc	/^Logger::GetLogVersion(const char *versionLine)$/;"	f	class:Logger
GetLogger	cc/common/log.h	/^        static MsgLogger* GetLogger() { return logger; }$/;"	f	class:KFS::MsgLogger
GetLoggerVersionNum	cc/chunk/Logger.h	/^    int GetLoggerVersionNum() const {$/;"	f	class:KFS::Logger
GetLruIterator	cc/chunk/ChunkManager.h	/^                LruIterator& GetLruIterator() const$/;"	f	class:KFS::ChunkManager::PendingWrites::OpListEntry
GetMaxClientQuota	cc/chunk/BufferManager.h	/^    ByteCount GetMaxClientQuota() const$/;"	f	class:KFS::BufferManager
GetMaxEnqueueWaitTimeNanoSec	cc/chunk/DiskIo.cc	/^    DiskQueue::Time GetMaxEnqueueWaitTimeNanoSec() const$/;"	f	class:KFS::DiskIoQueues
GetMaxIORequestSize	cc/chunk/ChunkManager.h	/^    size_t GetMaxIORequestSize() const {$/;"	f	class:KFS::ChunkManager
GetMaxOpenFds	cc/chunk/ChunkManager.cc	/^GetMaxOpenFds()$/;"	f	namespace:KFS
GetMaxRecordSize	cc/common/BufferedLogWriter.cc	/^    size_t GetMaxRecordSize() const$/;"	f	class:KFS::BufferedLogWriter::Impl	file:
GetMaxRequestSize	cc/chunk/DiskIo.cc	/^    size_t GetMaxRequestSize() const$/;"	f	class:KFS::DiskIoQueues
GetMaxRequestSize	cc/chunk/DiskIo.cc	/^DiskIo::GetMaxRequestSize()$/;"	f	class:KFS::DiskIo
GetMaxRetryCount	cc/libkfsClient/KfsNetClient.cc	/^    int GetMaxRetryCount() const$/;"	f	class:KFS::KfsNetClient::Impl
GetMaxRetryCount	cc/libkfsClient/KfsNetClient.cc	/^KfsNetClient::GetMaxRetryCount() const$/;"	f	class:KFS::KfsNetClient
GetMaxWriteIdsPerChunk	cc/chunk/AtomicRecordAppender.h	/^    int    GetMaxWriteIdsPerChunk()     const { return mMaxWriteIdsPerChunk;     }$/;"	f	class:KFS::AtomicRecordAppendManager
GetMetaMinUptimeSec	cc/chunk/AtomicRecordAppender.h	/^    int    GetMetaMinUptimeSec()        const { return mMinMetaUptimeSec;        }$/;"	f	class:KFS::AtomicRecordAppendManager
GetMetaserverLocation	cc/libkfsClient/KfsClient.cc	/^KfsClient::GetMetaserverLocation() const$/;"	f	class:KfsClient
GetMetaserverLocation	cc/libkfsClient/KfsClientInt.h	/^    ServerLocation GetMetaserverLocation() const {$/;"	f	class:KFS::KfsClientImpl
GetMinBufferCount	cc/chunk/BufferManager.h	/^    int GetMinBufferCount() const$/;"	f	class:KFS::BufferManager
GetMutex	cc/libkfsClient/KfsClientInt.h	/^    pthread_mutex_t& GetMutex() { return mMutex; }$/;"	f	class:KFS::KfsClientImpl
GetMyLocation	cc/chunk/ChunkServer.h	/^    std::string GetMyLocation() const {$/;"	f	class:KFS::ChunkServer
GetName	cc/libkfsIO/Counter.h	/^    const std::string & GetName() const {$/;"	f	class:KFS::Counter
GetName	cc/qcdio/qcthread.h	/^    std::string GetName() const$/;"	f	class:QCThread
GetNetManager	cc/libkfsClient/KfsNetClient.cc	/^    NetManager& GetNetManager()$/;"	f	class:KFS::KfsNetClient::Impl
GetNetManager	cc/libkfsClient/KfsNetClient.cc	/^    const NetManager& GetNetManager() const$/;"	f	class:KFS::KfsNetClient::Impl
GetNetManager	cc/libkfsClient/KfsNetClient.cc	/^KfsNetClient::GetNetManager() const$/;"	f	class:KFS::KfsNetClient
GetNetManager	cc/libkfsClient/KfsNetClient.cc	/^KfsNetClient::GetNetManager()$/;"	f	class:KFS::KfsNetClient
GetNetManager	cc/libkfsIO/NetManager.cc	/^NetManager::GetNetManager(const NetConnection& conn)$/;"	f	class:NetManager
GetNetManagerEntry	cc/libkfsIO/NetConnection.h	/^    NetManagerEntry* GetNetManagerEntry() {$/;"	f	class:KFS::NetConnection
GetNetManagerEntry	cc/libkfsIO/NetConnection.h	/^    const NetManagerEntry* GetNetManagerEntry() const {$/;"	f	class:KFS::NetConnection
GetNext	cc/qcdio/qcdllist.h	/^    static NodeT& GetNext($/;"	f	class:QCDLListOp
GetNextPtr	cc/qcdio/qcdllist.h	/^    static NodeT* GetNextPtr($/;"	f	class:QCDLListOp
GetNextReplicationTimeout	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppender::GetNextReplicationTimeout() const$/;"	f	class:KFS::AtomicRecordAppender
GetNumAppendsWithWid	cc/meta/ChunkServer.h	/^                int64_t GetNumAppendsWithWid() const {$/;"	f	class:KFS::ChunkServer
GetNumBlksRebalanced	cc/emulator/LayoutEmulator.h	/^        int GetNumBlksRebalanced() const {$/;"	f	class:KFS::LayoutEmulator
GetNumBytesToRead	cc/libkfsIO/NetConnection.h	/^    int GetNumBytesToRead() const {$/;"	f	class:KFS::NetConnection
GetNumBytesToWrite	cc/libkfsIO/NetConnection.h	/^    int GetNumBytesToWrite() const {$/;"	f	class:KFS::NetConnection
GetNumChunkReplications	cc/meta/ChunkServer.h	/^		int GetNumChunkReplications() const {$/;"	f	class:KFS::ChunkServer
GetNumChunkWrites	cc/meta/ChunkServer.h	/^		int GetNumChunkWrites() const {$/;"	f	class:KFS::ChunkServer
GetNumChunks	cc/chunk/ChunkManager.h	/^    long GetNumChunks() const { return mNumChunks; };$/;"	f	class:KFS::ChunkManager
GetNumChunks	cc/libkfsClient/KfsClient.cc	/^KfsClient::GetNumChunks(const char *pathname)$/;"	f	class:KfsClient
GetNumChunks	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::GetNumChunks(const char *pathname)$/;"	f	class:KfsClientImpl
GetNumChunks	cc/meta/ChunkServer.h	/^		int GetNumChunks () const {$/;"	f	class:KFS::ChunkServer
GetNumOps	cc/chunk/ChunkServer.h	/^    int GetNumOps() const {$/;"	f	class:KFS::ChunkServer
GetNumReplications	cc/chunk/Replicator.cc	/^Replicator::GetNumReplications()$/;"	f	class:Replicator
GetNumUnderReplicatedBlocks	cc/meta/LayoutManager.h	/^		size_t GetNumUnderReplicatedBlocks() const {$/;"	f	class:KFS::LayoutManager
GetNumWritableChunks	cc/chunk/ChunkManager.cc	/^ChunkManager::GetNumWritableChunks() const$/;"	f	class:KFS::ChunkManager
GetOp	cc/meta/ChunkServer.cc	/^ChunkServer::GetOp(IOBuffer& iobuf, int msgLen, const char* errMsgPrefix)$/;"	f	class:ChunkServer
GetOpStatus	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppendManager::GetOpStatus(GetRecordAppendOpStatus* op)$/;"	f	class:KFS::AtomicRecordAppendManager
GetOpStatus	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppender::GetOpStatus(GetRecordAppendOpStatus* op)$/;"	f	class:KFS::AtomicRecordAppender
GetOpTimeoutSec	cc/libkfsClient/KfsNetClient.cc	/^    int GetOpTimeoutSec() const$/;"	f	class:KFS::KfsNetClient::Impl
GetOpTimeoutSec	cc/libkfsClient/KfsNetClient.cc	/^KfsNetClient::GetOpTimeoutSec() const$/;"	f	class:KFS::KfsNetClient
GetOpenAppendersCount	cc/chunk/AtomicRecordAppender.h	/^    int64_t GetOpenAppendersCount() const {$/;"	f	class:KFS::AtomicRecordAppendManager
GetOpenFiles	cc/meta/LayoutManager.cc	/^LayoutManager::GetOpenFiles(string &openForRead, string &openForWrite)$/;"	f	class:LayoutManager
GetPathComponents	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::GetPathComponents(const char *pathname, kfsFileId_t *parentFid,$/;"	f	class:KfsClientImpl
GetPathComponents	cc/tools/utils.cc	/^KFS::tools::GetPathComponents(const string &path, string &parent, string &name)$/;"	f	class:KFS::tools
GetPeerName	cc/chunk/ClientSM.cc	/^inline std::string ClientSM::GetPeerName()$/;"	f	class:ClientSM
GetPeerName	cc/libkfsIO/NetConnection.h	/^    std::string GetPeerName() const {$/;"	f	class:KFS::NetConnection
GetPeerName	cc/libkfsIO/TcpSocket.cc	/^int TcpSocket::GetPeerName(struct sockaddr *peerAddr, int len) const$/;"	f	class:TcpSocket
GetPeerName	cc/libkfsIO/TcpSocket.cc	/^string TcpSocket::GetPeerName() const$/;"	f	class:TcpSocket
GetPendingCount	cc/qcdio/qcdiskqueue.cpp	/^    void GetPendingCount($/;"	f	class:QCDiskQueue::Queue
GetPendingCount	cc/qcdio/qcdiskqueue.cpp	/^QCDiskQueue::GetPendingCount($/;"	f	class:QCDiskQueue
GetPendingSize	cc/libkfsClient/WriteAppender.cc	/^    int GetPendingSize() const$/;"	f	class:KFS::WriteAppender::Impl
GetPendingSize	cc/libkfsClient/WriteAppender.cc	/^WriteAppender::GetPendingSize() const$/;"	f	class:KFS::WriteAppender
GetPoolPtr	cc/qcdio/qciobufferpool.h	/^        QCIoBufferPool* GetPoolPtr() const$/;"	f	class:QCIoBufferPool::Client
GetPreAllocation	cc/libkfsClient/WriteAppender.cc	/^    bool GetPreAllocation() const$/;"	f	class:KFS::WriteAppender::Impl
GetPreAllocation	cc/libkfsClient/WriteAppender.cc	/^WriteAppender::GetPreAllocation() const$/;"	f	class:KFS::WriteAppender
GetPreferredChunkServerSockPtr	cc/libkfsClient/KfsClientInt.h	/^    TcpSocketPtr GetPreferredChunkServerSockPtr() {$/;"	f	struct:KFS::FilePosition
GetPreferredServer	cc/libkfsClient/KfsClientInt.h	/^    TcpSocket *GetPreferredServer() {$/;"	f	struct:KFS::FilePosition
GetPreferredServerAddr	cc/libkfsClient/KfsClientInt.h	/^    int GetPreferredServerAddr(struct sockaddr_in &saddr) {$/;"	f	struct:KFS::FilePosition
GetPreferredServerLocation	cc/libkfsClient/KfsClientInt.h	/^    const ServerLocation &GetPreferredServerLocation() const {$/;"	f	struct:KFS::FilePosition
GetPrev	cc/qcdio/qcdllist.h	/^    static NodeT& GetPrev($/;"	f	class:QCDLListOp
GetPrevPtr	cc/qcdio/qcdllist.h	/^    static NodeT* GetPrevPtr($/;"	f	class:QCDLListOp
GetPutRequestCount	cc/chunk/BufferManager.h	/^    RequestCount GetPutRequestCount() const$/;"	f	class:KFS::BufferManager
GetRack	cc/meta/ChunkServer.h	/^		int GetRack() const {$/;"	f	class:KFS::ChunkServer
GetReadAhead	cc/libkfsClient/KfsClientInt.h	/^    size_t GetReadAhead() const { return mReadAhead; }$/;"	f	class:KFS::PendingChunkRead
GetReadAheadSize	cc/libkfsClient/KfsClient.cc	/^KfsClient::GetReadAheadSize(int fd) const$/;"	f	class:KfsClient
GetReadAheadSize	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::GetReadAheadSize(int fd) const$/;"	f	class:KfsClientImpl
GetRecordAppendOpStatus	cc/chunk/KfsOps.h	/^    GetRecordAppendOpStatus(kfsSeq_t s) :$/;"	f	struct:KFS::GetRecordAppendOpStatus
GetRecordAppendOpStatus	cc/chunk/KfsOps.h	/^struct GetRecordAppendOpStatus : public KfsOp$/;"	s	namespace:KFS
GetRecordAppendOpStatus	cc/libkfsClient/KfsOps.h	/^    GetRecordAppendOpStatus(kfsSeq_t seq, kfsChunkId_t c, int64_t w) :$/;"	f	struct:KFS::GetRecordAppendOpStatus
GetRecordAppendOpStatus	cc/libkfsClient/KfsOps.h	/^struct GetRecordAppendOpStatus : public KfsOp$/;"	s	namespace:KFS
GetRemainingByteCount	cc/chunk/BufferManager.h	/^    ByteCount GetRemainingByteCount() const$/;"	f	class:KFS::BufferManager
GetRemainingTime	cc/libkfsIO/NetManager.cc	/^NetManager::Timer::Handler::GetRemainingTime() const$/;"	f	class:NetManager::Timer::Handler
GetRemainingTime	cc/libkfsIO/NetManager.h	/^        time_t GetRemainingTime() const$/;"	f	class:KFS::NetManager::Timer
GetReplicationFactor	cc/libkfsClient/KfsClient.cc	/^KfsClient::GetReplicationFactor(const char *pathname)$/;"	f	class:KfsClient
GetReplicationFactor	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::GetReplicationFactor(const char *pathname)$/;"	f	class:KfsClientImpl
GetReplicationReadLoad	cc/meta/ChunkServer.h	/^		int GetReplicationReadLoad() const {$/;"	f	class:KFS::ChunkServer
GetReplicationTimeoutSec	cc/chunk/AtomicRecordAppender.h	/^    int    GetReplicationTimeoutSec()   const { return mReplicationTimeoutSec;   }$/;"	f	class:KFS::AtomicRecordAppendManager
GetReqListSize	cc/qcdio/qcdiskqueue.cpp	/^    int GetReqListSize($/;"	f	class:QCDiskQueue::Queue	file:
GetRequestId	cc/qcdio/qcdiskqueue.cpp	/^    RequestId GetRequestId($/;"	f	class:QCDiskQueue::Queue	file:
GetRequestId	cc/qcdio/qcdiskqueue.h	/^        RequestId GetRequestId() const$/;"	f	class:QCDiskQueue::EnqueueStatus
GetReservedSpace	cc/chunk/ClientSM.h	/^    size_t GetReservedSpace(kfsChunkId_t chunkId, int64_t writeId) const {$/;"	f	class:KFS::ClientSM
GetResponse	cc/libkfsClient/KfsClient.cc	/^GetResponse(char *buf, int bufSize, int *delims, TcpSocket *sock)$/;"	f	file:
GetResponse	cc/tools/MonUtils.cc	/^KFS_MON::GetResponse(char *buf, int bufSize,$/;"	f	class:KFS_MON
GetResponseTimeoutSec	cc/chunk/RemoteSyncSM.h	/^    static int GetResponseTimeoutSec() {$/;"	f	class:KFS::RemoteSyncSM
GetRetiringStatus	cc/meta/ChunkServer.cc	/^ChunkServer::GetRetiringStatus(string &result)$/;"	f	class:ChunkServer
GetSendCommitAckTimeoutSec	cc/chunk/AtomicRecordAppender.h	/^    int    GetSendCommitAckTimeoutSec() const { return mSendCommitAckTimeoutSec; }$/;"	f	class:KFS::AtomicRecordAppendManager
GetSeqContentLen	cc/libkfsClient/KfsClient.cc	/^GetSeqContentLen(const char *resp, int respLen,$/;"	f	file:
GetServerLocation	cc/libkfsClient/KfsNetClient.cc	/^    std::string GetServerLocation() const$/;"	f	class:KFS::KfsNetClient::Impl
GetServerLocation	cc/libkfsClient/KfsNetClient.cc	/^KfsNetClient::GetServerLocation() const$/;"	f	class:KFS::KfsNetClient
GetServerLocation	cc/libkfsClient/WriteAppender.cc	/^    std::string GetServerLocation() const$/;"	f	class:KFS::WriteAppender::Impl
GetServerLocation	cc/libkfsClient/WriteAppender.cc	/^WriteAppender::GetServerLocation() const$/;"	f	class:KFS::WriteAppender
GetServerLocation	cc/meta/ChunkServer.h	/^                ServerLocation GetServerLocation() const {$/;"	f	class:KFS::ChunkServer
GetServerName	cc/meta/ChunkServer.h	/^                const char *GetServerName() {$/;"	f	class:KFS::ChunkServer
GetSockName	cc/libkfsIO/NetConnection.h	/^    std::string GetSockName() const {$/;"	f	class:KFS::NetConnection
GetSockName	cc/libkfsIO/TcpSocket.cc	/^string TcpSocket::GetSockName() const$/;"	f	class:TcpSocket
GetSocketError	cc/libkfsIO/NetConnection.h	/^    int GetSocketError() const {$/;"	f	class:KFS::NetConnection
GetSocketError	cc/libkfsIO/TcpSocket.cc	/^int TcpSocket::GetSocketError() const$/;"	f	class:TcpSocket
GetSpaceUtilization	cc/meta/ChunkServer.h	/^		float GetSpaceUtilization() const {$/;"	f	class:KFS::ChunkServer
GetStaleChunkPath	cc/chunk/ChunkManager.cc	/^GetStaleChunkPath(const string &partition)$/;"	f	namespace:KFS
GetStartTime	cc/libkfsIO/NetManager.h	/^        time_t GetStartTime() const$/;"	f	class:KFS::NetManager::Timer
GetStartTime	cc/libkfsIO/NetManager.h	/^    time_t GetStartTime() const$/;"	f	class:KFS::NetManager
GetStateAsStr	cc/chunk/AtomicRecordAppender.cc	/^    const char* GetStateAsStr($/;"	f	class:KFS::AtomicRecordAppender	file:
GetStateAsStr	cc/chunk/AtomicRecordAppender.cc	/^    const char* GetStateAsStr() const$/;"	f	class:KFS::AtomicRecordAppender	file:
GetStats	cc/libkfsClient/KfsNetClient.cc	/^    void GetStats($/;"	f	class:KFS::KfsNetClient::Impl
GetStats	cc/libkfsClient/KfsNetClient.cc	/^KfsNetClient::GetStats($/;"	f	class:KFS::KfsNetClient
GetStats	cc/libkfsClient/WriteAppender.cc	/^    void GetStats($/;"	f	class:KFS::WriteAppender::Impl
GetStats	cc/libkfsClient/WriteAppender.cc	/^WriteAppender::GetStats($/;"	f	class:KFS::WriteAppender
GetSyncRequest	cc/libkfsClient/KfsProtocolWorker.cc	/^    SyncRequest& GetSyncRequest($/;"	f	class:KFS::KfsProtocolWorker::Impl	file:
GetSysError	cc/qcdio/qcdiskqueue.h	/^        int GetSysError() const$/;"	f	class:QCDiskQueue::Status
GetTelemetryReporter	cc/libkfsClient/KfsClientInt.h	/^    TelemetryClient &GetTelemetryReporter() {$/;"	f	class:KFS::KfsClientImpl
GetThreadCount	cc/qcdio/qcthread.cpp	/^    int GetThreadCount()$/;"	f	class:QCStartedThreadList
GetThreadCount	cc/qcdio/qcthread.cpp	/^QCThread::GetThreadCount()$/;"	f	class:QCThread
GetTimeElapsed	cc/libkfsIO/ITimeout.h	/^    int GetTimeElapsed() {$/;"	f	class:KFS::ITimeout
GetTimeSecBetweenRetries	cc/libkfsClient/KfsNetClient.cc	/^    int GetTimeSecBetweenRetries() const$/;"	f	class:KFS::KfsNetClient::Impl
GetTimeSecBetweenRetries	cc/libkfsClient/KfsNetClient.cc	/^KfsNetClient::GetTimeSecBetweenRetries()$/;"	f	class:KFS::KfsNetClient
GetTimeToNextRetry	cc/libkfsClient/WriteAppender.cc	/^    int GetTimeToNextRetry($/;"	f	class:KFS::WriteAppender::Impl	file:
GetTimeout	cc/libkfsIO/Event.h	/^    int GetTimeout() {$/;"	f	class:KFS::Event
GetTimeout	cc/libkfsIO/NetManager.h	/^        int GetTimeout() const$/;"	f	class:KFS::NetManager::Timer
GetTimerOverrunCount	cc/libkfsIO/NetManager.h	/^    int64_t GetTimerOverrunCount() const$/;"	f	class:KFS::NetManager
GetTimerOverrunSec	cc/libkfsIO/NetManager.h	/^    int64_t GetTimerOverrunSec() const$/;"	f	class:KFS::NetManager
GetTimeval	cc/libkfsClient/Utils.cc	/^KFS::GetTimeval(string &s, struct timeval &tv)$/;"	f	class:KFS
GetTotalBufferCount	cc/chunk/BufferManager.h	/^    int GetTotalBufferCount() const$/;"	f	class:KFS::BufferManager
GetTotalByteCount	cc/chunk/BufferManager.h	/^    ByteCount GetTotalByteCount() const$/;"	f	class:KFS::BufferManager
GetTotalCount	cc/chunk/BufferManager.h	/^    ByteCount GetTotalCount() const$/;"	f	class:KFS::BufferManager
GetTotalCount	cc/qcdio/qciobufferpool.cpp	/^    int GetTotalCount() const$/;"	f	class:QCIoBufferPool::Partition
GetTotalSpace	cc/chunk/ChunkManager.cc	/^ChunkManager::GetTotalSpace($/;"	f	class:KFS::ChunkManager
GetTotalSpace	cc/chunk/ChunkManager.h	/^    int64_t GetTotalSpace() { return GetTotalSpace(false); }$/;"	f	class:KFS::ChunkManager
GetTotalSpace	cc/meta/ChunkServer.h	/^                int64_t GetTotalSpace() const {$/;"	f	class:KFS::ChunkServer
GetUsableChunkDirs	cc/chunk/ChunkManager.cc	/^ChunkManager::GetUsableChunkDirs() const$/;"	f	class:KFS::ChunkManager
GetUsedByteCount	cc/chunk/BufferManager.h	/^    ByteCount GetUsedByteCount() const$/;"	f	class:KFS::BufferManager
GetUsedSpace	cc/chunk/ChunkManager.h	/^    int64_t GetUsedSpace() const { return mUsedSpace; };$/;"	f	class:KFS::ChunkManager
GetUsedSpace	cc/meta/ChunkServer.h	/^                int64_t GetUsedSpace() const {$/;"	f	class:KFS::ChunkServer
GetValue	cc/libkfsIO/Counter.h	/^    uint64_t GetValue() const {$/;"	f	class:KFS::Counter
GetVersionFromCkpt	cc/chunk/Logger.cc	/^Logger::GetVersionFromCkpt()$/;"	f	class:Logger
GetVfsStat	cc/chunk/ChunkManager.cc	/^inline static int GetVfsStat(const char* path, StatVfs* stat) {$/;"	f	namespace:KFS
GetWaitingByteCount	cc/chunk/BufferManager.h	/^    int GetWaitingByteCount() const$/;"	f	class:KFS::BufferManager
GetWaitingCount	cc/chunk/BufferManager.h	/^    int GetWaitingCount() const$/;"	f	class:KFS::BufferManager
GetWaitingForByteCount	cc/chunk/BufferManager.h	/^        ByteCount GetWaitingForByteCount() const$/;"	f	class:KFS::BufferManager::Client
GetWriteOp	cc/chunk/ClientSM.cc	/^ClientSM::GetWriteOp(T* wop, int align, IOBuffer *iobuf, int cmdLen, IOBuffer*& ioOpBuf)$/;"	f	class:ClientSM
GetWriteStatus	cc/chunk/ChunkManager.cc	/^ChunkManager::GetWriteStatus(int64_t writeId)$/;"	f	class:KFS::ChunkManager
Globals_t	cc/libkfsIO/Globals.cc	/^Globals_t::Globals_t()$/;"	f	class:KFS::libkfsio::Globals_t
Globals_t	cc/libkfsIO/Globals.h	/^        struct Globals_t {$/;"	s	namespace:KFS::libkfsio
GotHeader	cc/libkfsClient/KfsAsyncRW.cc	/^AsyncWorker::GotHeader(IOBuffer *buffer, int *hdrLen, KfsOp *op)$/;"	f	class:AsyncWorker
GotWriteId	cc/libkfsClient/KfsAsyncRW.cc	/^AsyncWriteWorker::GotWriteId(IOBuffer *buffer, int *hdrLen)$/;"	f	class:AsyncWriteWorker
Granted	cc/chunk/ClientSM.cc	/^ClientSM::Granted(ClientSM::ByteCount byteCount)$/;"	f	class:ClientSM
HandleARAFinalizeDone	cc/chunk/KfsOps.cc	/^MakeChunkStableOp::HandleARAFinalizeDone(int code, void *data)$/;"	f	class:MakeChunkStableOp
HandleCancel	cc/libkfsClient/WriteAppender.cc	/^    void HandleCancel()$/;"	f	class:KFS::WriteAppender::Impl	file:
HandleChunkMetaReadDone	cc/chunk/KfsOps.cc	/^AllocChunkOp::HandleChunkMetaReadDone(int code, void *data)$/;"	f	class:AllocChunkOp
HandleChunkMetaReadDone	cc/chunk/KfsOps.cc	/^ChangeChunkVersOp::HandleChunkMetaReadDone(int code, void *data)$/;"	f	class:ChangeChunkVersOp
HandleChunkMetaReadDone	cc/chunk/KfsOps.cc	/^GetChunkMetadataOp::HandleChunkMetaReadDone(int code, void *data)$/;"	f	class:GetChunkMetadataOp
HandleChunkMetaReadDone	cc/chunk/KfsOps.cc	/^ReadOp::HandleChunkMetaReadDone(int code, void *data)$/;"	f	class:ReadOp
HandleChunkMetaReadDone	cc/chunk/KfsOps.cc	/^TruncateChunkOp::HandleChunkMetaReadDone(int code, void *data)$/;"	f	class:TruncateChunkOp
HandleChunkMetaWriteDone	cc/chunk/ChunkManager.cc	/^ChunkInfoHandle::HandleChunkMetaWriteDone(int code, void *data)$/;"	f	class:KFS::ChunkInfoHandle
HandleClientCmd	cc/chunk/ClientSM.cc	/^ClientSM::HandleClientCmd(IOBuffer *iobuf, int cmdLen)$/;"	f	class:ClientSM
HandleClientCmd	cc/meta/ClientSM.cc	/^ClientSM::HandleClientCmd(IOBuffer *iobuf, int cmdLen)$/;"	f	class:ClientSM
HandleCmd	cc/chunk/MetaServerSM.cc	/^MetaServerSM::HandleCmd(IOBuffer *iobuf, int cmdLen)$/;"	f	class:MetaServerSM
HandleCmd	cc/meta/ChunkServer.cc	/^ChunkServer::HandleCmd(IOBuffer *iobuf, int msgLen)$/;"	f	class:ChunkServer
HandleDone	cc/chunk/KfsOps.cc	/^CorruptChunkOp::HandleDone(int code, void *data)$/;"	f	class:CorruptChunkOp
HandleDone	cc/chunk/KfsOps.cc	/^GetChunkMetadataOp::HandleDone(int code, void *data)$/;"	f	class:GetChunkMetadataOp
HandleDone	cc/chunk/KfsOps.cc	/^KfsOp::HandleDone(int code, void *data)$/;"	f	class:KfsOp
HandleDone	cc/chunk/KfsOps.cc	/^LeaseRelinquishOp::HandleDone(int code, void *data)$/;"	f	class:LeaseRelinquishOp
HandleDone	cc/chunk/KfsOps.cc	/^LeaseRenewOp::HandleDone(int code, void *data)$/;"	f	class:LeaseRenewOp
HandleDone	cc/chunk/KfsOps.cc	/^ReadChunkMetaOp::HandleDone(int code, void *data)$/;"	f	class:ReadChunkMetaOp
HandleDone	cc/chunk/KfsOps.cc	/^ReadOp::HandleDone(int code, void *data)$/;"	f	class:ReadOp
HandleDone	cc/chunk/KfsOps.cc	/^ReplicateChunkOp::HandleDone(int code, void *data)$/;"	f	class:ReplicateChunkOp
HandleDone	cc/chunk/KfsOps.cc	/^SizeOp::HandleDone(int code, void *data)$/;"	f	class:SizeOp
HandleDone	cc/chunk/KfsOps.h	/^    int HandleDone(int code, void *data) {$/;"	f	struct:KFS::WriteChunkMetaOp
HandleDone	cc/libkfsIO/DiskConnection.h	/^    int HandleDone(DiskEventPtr &doneEvent, int res) {$/;"	f	class:KFS::DiskConnection
HandleEnqueueError	cc/libkfsClient/WriteAppender.cc	/^    void HandleEnqueueError()$/;"	f	class:KFS::WriteAppender::Impl	file:
HandleError	cc/libkfsClient/WriteAppender.cc	/^    void HandleError($/;"	f	class:KFS::WriteAppender::Impl	file:
HandleErrorEvent	cc/libkfsIO/NetConnection.cc	/^void NetConnection::HandleErrorEvent()$/;"	f	class:NetConnection
HandleEvent	cc/chunk/LeaseClerk.cc	/^LeaseClerk::HandleEvent(int code, void *data)$/;"	f	class:LeaseClerk
HandleEvent	cc/chunk/RemoteSyncSM.cc	/^RemoteSyncSM::HandleEvent(int code, void *data)$/;"	f	class:RemoteSyncSM
HandleEvent	cc/libkfsIO/KfsCallbackObj.h	/^    int HandleEvent(int code, void *data) {$/;"	f	class:KFS::KfsCallbackObj
HandleEvent	cc/meta/ChunkReplicator.cc	/^ChunkReplicator::HandleEvent(int code, void *data)$/;"	f	class:ChunkReplicator
HandleEvent	cc/meta/LeaseCleaner.cc	/^LeaseCleaner::HandleEvent(int code, void *data)$/;"	f	class:LeaseCleaner
HandleHelloMsg	cc/meta/ChunkServer.cc	/^ChunkServer::HandleHelloMsg(IOBuffer *iobuf, int msgLen)$/;"	f	class:ChunkServer
HandleLoggingDone	cc/chunk/KfsOps.cc	/^WriteOp::HandleLoggingDone(int code, void *data)$/;"	f	class:WriteOp
HandleMsg	cc/chunk/MetaServerSM.cc	/^MetaServerSM::HandleMsg(IOBuffer *iobuf, int msgLen)$/;"	f	class:MetaServerSM
HandleMsg	cc/meta/ChunkServer.cc	/^ChunkServer::HandleMsg(IOBuffer *iobuf, int msgLen)$/;"	f	class:ChunkServer
HandleOp	cc/libkfsClient/KfsNetClient.cc	/^    void HandleOp($/;"	f	class:KFS::KfsNetClient::Impl	file:
HandlePeerReply	cc/chunk/KfsOps.cc	/^CloseOp::HandlePeerReply(int code, void *data)$/;"	f	class:CloseOp
HandlePeerReply	cc/chunk/KfsOps.cc	/^WriteIdAllocOp::HandlePeerReply(int code, void *data)$/;"	f	class:WriteIdAllocOp
HandleReadDone	cc/chunk/Replicator.cc	/^Replicator::HandleReadDone(int code, void *data)$/;"	f	class:Replicator
HandleReadEvent	cc/libkfsIO/NetConnection.cc	/^void NetConnection::HandleReadEvent()$/;"	f	class:NetConnection
HandleRecordAppendDone	cc/chunk/KfsOps.cc	/^WriteOp::HandleRecordAppendDone(int code, void *data)$/;"	f	class:WriteOp
HandleReplicationDone	cc/chunk/Replicator.cc	/^Replicator::HandleReplicationDone(int code, void *data)$/;"	f	class:Replicator
HandleReplicatorDone	cc/chunk/KfsOps.cc	/^ReadOp::HandleReplicatorDone(int code, void *data)$/;"	f	class:ReadOp
HandleReply	cc/chunk/MetaServerSM.cc	/^MetaServerSM::HandleReply(IOBuffer *iobuf, int msgLen)$/;"	f	class:MetaServerSM
HandleReply	cc/meta/ChunkServer.cc	/^ChunkServer::HandleReply(IOBuffer *iobuf, int msgLen)$/;"	f	class:ChunkServer
HandleRequest	cc/chunk/ClientSM.cc	/^ClientSM::HandleRequest(int code, void *data)$/;"	f	class:ClientSM
HandleRequest	cc/chunk/MetaServerSM.cc	/^MetaServerSM::HandleRequest(int code, void *data)$/;"	f	class:MetaServerSM
HandleRequest	cc/meta/ChunkServer.cc	/^ChunkServer::HandleRequest(int code, void *data)$/;"	f	class:ChunkServer
HandleRequest	cc/meta/ClientSM.cc	/^ClientSM::HandleRequest(int code, void *data)$/;"	f	class:ClientSM
HandleResponse	cc/chunk/RemoteSyncSM.cc	/^RemoteSyncSM::HandleResponse(IOBuffer *iobuf, int msgLen)$/;"	f	class:RemoteSyncSM
HandleResponse	cc/libkfsClient/KfsNetClient.cc	/^    void HandleResponse($/;"	f	class:KFS::KfsNetClient::Impl	file:
HandleStartDone	cc/chunk/Replicator.cc	/^Replicator::HandleStartDone(int code, void *data)$/;"	f	class:Replicator
HandleSyncDone	cc/chunk/KfsOps.cc	/^WriteOp::HandleSyncDone(int code, void *data)$/;"	f	class:WriteOp
HandleTerminate	cc/chunk/ClientSM.cc	/^ClientSM::HandleTerminate(int code, void *data)$/;"	f	class:ClientSM
HandleTerminate	cc/meta/ClientSM.cc	/^ClientSM::HandleTerminate(int code, void *data)$/;"	f	class:ClientSM
HandleTimeoutEvent	cc/libkfsIO/NetConnection.cc	/^void NetConnection::HandleTimeoutEvent()$/;"	f	class:NetConnection
HandleWriteDone	cc/chunk/KfsOps.cc	/^WriteOp::HandleWriteDone(int code, void *data)$/;"	f	class:WriteOp
HandleWriteDone	cc/chunk/Replicator.cc	/^Replicator::HandleWriteDone(int code, void *data)$/;"	f	class:Replicator
HandleWriteEvent	cc/libkfsIO/NetConnection.cc	/^void NetConnection::HandleWriteEvent()$/;"	f	class:NetConnection
HandleWriteIdResponse	cc/libkfsClient/KfsAsyncRW.cc	/^AsyncWriteWorker::HandleWriteIdResponse(int code, void *data)$/;"	f	class:AsyncWriteWorker
HandleWriteSyncResponse	cc/libkfsClient/KfsAsyncRW.cc	/^AsyncWriteWorker::HandleWriteSyncResponse(int code, void *data)$/;"	f	class:AsyncWriteWorker
Handler	cc/libkfsIO/NetManager.cc	/^NetManager::Timer::Handler::Handler(NetManager& netManager, KfsCallbackObj& obj, int tmSec)$/;"	f	class:NetManager::Timer::Handler
Handler	cc/libkfsIO/NetManager.h	/^        struct Handler : public KfsCallbackObj$/;"	s	class:KFS::NetManager::Timer
HandoutChunkReplicationWork	cc/meta/LayoutManager.cc	/^LayoutManager::HandoutChunkReplicationWork(CRCandidateSet &candidates,$/;"	f	class:LayoutManager
HasChunkId	cc/chunk/ChunkManager.h	/^        bool HasChunkId(kfsChunkId_t chunkId) const$/;"	f	class:KFS::ChunkManager::PendingWrites
HasCompleteBuffer	cc/libkfsIO/IOBuffer.h	/^    bool HasCompleteBuffer() const {$/;"	f	class:KFS::IOBufferData
HasNext	cc/qcdio/qcdllist.h	/^        bool HasNext() const$/;"	f	class:QCDLList::Iterator
HasPendingRead	cc/libkfsIO/NetConnection.h	/^    bool HasPendingRead() const {$/;"	f	class:KFS::NetConnection
HeartBeatProperties	cc/meta/ChunkServer.h	/^                const Properties& HeartBeatProperties() const {$/;"	f	class:KFS::ChunkServer
Heartbeat	cc/meta/ChunkServer.cc	/^ChunkServer::Heartbeat()$/;"	f	class:ChunkServer
HeartbeatChunkServers	cc/meta/LayoutManager.cc	/^LayoutManager::HeartbeatChunkServers()$/;"	f	class:LayoutManager
HeartbeatOp	cc/chunk/KfsOps.h	/^    HeartbeatOp(kfsSeq_t s) :$/;"	f	struct:KFS::HeartbeatOp
HeartbeatOp	cc/chunk/KfsOps.h	/^struct HeartbeatOp : public KfsOp {$/;"	s	namespace:KFS
Heartbeater	cc/meta/LayoutManager.cc	/^	Heartbeater() { }$/;"	f	class:Heartbeater
Heartbeater	cc/meta/LayoutManager.cc	/^class Heartbeater {$/;"	c	file:
HelloMetaOp	cc/chunk/KfsOps.h	/^    HelloMetaOp(kfsSeq_t s, ServerLocation &l, std::string &k, std::string &m, int r) :$/;"	f	struct:KFS::HelloMetaOp
HelloMetaOp	cc/chunk/KfsOps.h	/^struct HelloMetaOp : public KfsOp {$/;"	s	namespace:KFS
HibernatingServerInfo_t	cc/meta/LayoutManager.h	/^	struct HibernatingServerInfo_t {$/;"	s	namespace:KFS
HostingChunk	cc/emulator/ChunkServerEmulator.h	/^        void HostingChunk(kfsChunkId_t cid, size_t chunksize) {$/;"	f	class:KFS::ChunkServerEmulator
Hsieh_hash_fcn	cc/common/hsieh_hash.h	/^    struct Hsieh_hash_fcn {$/;"	s	namespace:KFS
IAcceptorOwner	cc/libkfsIO/Acceptor.h	/^class IAcceptorOwner {$/;"	c	namespace:KFS
IOBuffer	cc/libkfsIO/IOBuffer.cc	/^IOBuffer::IOBuffer()$/;"	f	class:IOBuffer
IOBuffer	cc/libkfsIO/IOBuffer.h	/^class IOBuffer$/;"	c	namespace:KFS
IOBufferAllocator	cc/libkfsIO/IOBuffer.h	/^        IOBufferAllocator()$/;"	f	class:KFS::libkfsio::IOBufferAllocator
IOBufferAllocator	cc/libkfsIO/IOBuffer.h	/^    class IOBufferAllocator$/;"	c	namespace:KFS::libkfsio
IOBufferArrayDeallocator	cc/libkfsIO/IOBuffer.cc	/^struct IOBufferArrayDeallocator$/;"	s	file:
IOBufferBlockPtr	cc/libkfsIO/IOBuffer.h	/^    typedef boost::shared_ptr<char> IOBufferBlockPtr;$/;"	t	class:KFS::IOBufferData
IOBufferData	cc/libkfsIO/IOBuffer.cc	/^IOBufferData::IOBufferData()$/;"	f	class:IOBufferData
IOBufferData	cc/libkfsIO/IOBuffer.cc	/^IOBufferData::IOBufferData(char* buf, int bufSize, int offset, int size)$/;"	f	class:IOBufferData
IOBufferData	cc/libkfsIO/IOBuffer.cc	/^IOBufferData::IOBufferData(char* buf, int offset, int size, libkfsio::IOBufferAllocator& allocator)$/;"	f	class:IOBufferData
IOBufferData	cc/libkfsIO/IOBuffer.cc	/^IOBufferData::IOBufferData(const IOBufferData &other, char *s, char *e)$/;"	f	class:IOBufferData
IOBufferData	cc/libkfsIO/IOBuffer.cc	/^IOBufferData::IOBufferData(int bufsz)$/;"	f	class:IOBufferData
IOBufferData	cc/libkfsIO/IOBuffer.h	/^class IOBufferData$/;"	c	namespace:KFS
IOBufferDeallocator	cc/libkfsIO/IOBuffer.cc	/^struct IOBufferDeallocator$/;"	s	file:
IOBufferDeallocatorCustom	cc/libkfsIO/IOBuffer.cc	/^    IOBufferDeallocatorCustom($/;"	f	struct:IOBufferDeallocatorCustom
IOBufferDeallocatorCustom	cc/libkfsIO/IOBuffer.cc	/^struct IOBufferDeallocatorCustom$/;"	s	file:
IOCompleted	cc/libkfsIO/DiskManager.h	/^    void IOCompleted(DiskEvent_t *event) {$/;"	f	class:KFS::DiskManager
IOV_MAX	cc/qcdio/iovperf.c	54;"	d	file:
IStream	cc/libkfsIO/IOBuffer.h	/^    IStream($/;"	f	class:KFS::IOBuffer::IStream
IStream	cc/libkfsIO/IOBuffer.h	/^class IOBuffer::IStream :$/;"	c	class:KFS::IOBuffer
ITimeout	cc/libkfsIO/ITimeout.h	/^    ITimeout() : mIntervalMs(0), mDisabled(false), mLastCall(0) { }$/;"	f	class:KFS::ITimeout
ITimeout	cc/libkfsIO/ITimeout.h	/^class ITimeout {$/;"	c	namespace:KFS
IdleTimeout	cc/chunk/ClientManager.h	/^    void IdleTimeout() {$/;"	f	class:KFS::ClientManager
Impl	cc/common/BufferedLogWriter.cc	/^    Impl($/;"	f	class:KFS::BufferedLogWriter::Impl
Impl	cc/common/BufferedLogWriter.cc	/^class BufferedLogWriter::Impl : public QCRunnable$/;"	c	class:KFS::BufferedLogWriter	file:
Impl	cc/libkfsClient/KfsNetClient.cc	/^    Impl($/;"	f	class:KFS::KfsNetClient::Impl
Impl	cc/libkfsClient/KfsNetClient.cc	/^class KfsNetClient::Impl : public KfsCallbackObj, private ITimeout$/;"	c	class:KFS::KfsNetClient	file:
Impl	cc/libkfsClient/KfsProtocolWorker.cc	/^    Impl($/;"	f	class:KFS::KfsProtocolWorker::Impl
Impl	cc/libkfsClient/KfsProtocolWorker.cc	/^class KfsProtocolWorker::Impl :$/;"	c	class:KFS::KfsProtocolWorker	file:
Impl	cc/libkfsClient/WriteAppender.cc	/^    Impl($/;"	f	class:KFS::WriteAppender::Impl
Impl	cc/libkfsClient/WriteAppender.cc	/^class WriteAppender::Impl : private ITimeout, private KfsNetClient::OpOwner$/;"	c	class:KFS::WriteAppender	file:
Impl	cc/libkfsIO/NetKicker.cc	/^    Impl()$/;"	f	class:NetKicker::Impl
Impl	cc/libkfsIO/NetKicker.cc	/^class NetKicker::Impl$/;"	c	class:NetKicker	file:
Impl	cc/qcdio/qcfdpoll.cpp	/^    Impl() $/;"	f	class:QCFdPoll::Impl
Impl	cc/qcdio/qcfdpoll.cpp	/^    Impl()$/;"	f	class:QCFdPoll::Impl
Impl	cc/qcdio/qcfdpoll.cpp	/^class QCFdPoll::Impl$/;"	c	class:QCFdPoll	file:
In	cc/qcdio/qcfdpoll.h	/^    int In($/;"	f	class:QCFdPoll
InFlightReplications	cc/chunk/Replicator.cc	/^> InFlightReplications;$/;"	t	file:
InRecovery	cc/meta/LayoutManager.cc	/^inline bool LayoutManager::InRecovery() const$/;"	f	class:LayoutManager
InRecoveryPeriod	cc/meta/LayoutManager.cc	/^inline bool LayoutManager::InRecoveryPeriod() const$/;"	f	class:LayoutManager
IncAppendersWithWidCount	cc/chunk/AtomicRecordAppender.cc	/^    void IncAppendersWithWidCount()$/;"	f	class:KFS::AtomicRecordAppender	file:
IncAppendersWithWidCount	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppendManager::IncAppendersWithWidCount()$/;"	f	class:KFS::AtomicRecordAppendManager
IncCorruptChunks	cc/meta/ChunkServer.h	/^		void IncCorruptChunks() {$/;"	f	class:KFS::ChunkServer
IndexOf	cc/libkfsIO/IOBuffer.cc	/^int IOBuffer::IndexOf(int offset, const char* str) const$/;"	f	class:IOBuffer
Init	cc/chunk/BufferManager.cc	/^BufferManager::Init($/;"	f	class:KFS::BufferManager
Init	cc/chunk/Chunk.h	/^    void Init(kfsFileId_t f, kfsChunkId_t c, off_t v) {$/;"	f	struct:KFS::ChunkInfo_t
Init	cc/chunk/ChunkManager.cc	/^ChunkManager::Init(const vector<string> &chunkDirs, int64_t totalSpace, const Properties& prop)$/;"	f	class:KFS::ChunkManager
Init	cc/chunk/ChunkServer.cc	/^ChunkServer::Init()$/;"	f	class:ChunkServer
Init	cc/chunk/ChunkServer_main.cc	/^    bool Init(int argc, char **argv)$/;"	f	class:Restarter
Init	cc/chunk/DiskIo.cc	/^DiskIo::Init($/;"	f	class:KFS::DiskIo
Init	cc/chunk/Logger.cc	/^Logger::Init(const string &logDir)$/;"	f	class:Logger
Init	cc/chunk/MetaServerSM.cc	/^MetaServerSM::Init(int chunkServerPort, string chunkServerHostname)$/;"	f	class:MetaServerSM
Init	cc/common/log.cc	/^MsgLogger::Init($/;"	f	class:KFS::MsgLogger
Init	cc/libkfsClient/KfsAttr.h	/^    void Init(bool isDir) {$/;"	f	struct:KFS::FileAttr
Init	cc/libkfsClient/KfsClient.cc	/^KfsClient::Init(const std::string metaServerHost, int metaServerPort)$/;"	f	class:KfsClient
Init	cc/libkfsClient/KfsClient.cc	/^int KfsClientImpl::Init(const string metaServerHost, int metaServerPort)$/;"	f	class:KfsClientImpl
Init	cc/libkfsClient/KfsOps.h	/^    void Init(kfsSeq_t s, kfsChunkId_t c, int64_t v, off_t o, size_t n, $/;"	f	struct:KFS::WriteSyncOp
Init	cc/libkfsIO/EventManager.cc	/^EventManager::Init()$/;"	f	class:EventManager
Init	cc/libkfsIO/Globals.cc	/^Globals_t::Init()$/;"	f	class:KFS::libkfsio::Globals_t
Init	cc/libkfsIO/IOBuffer.cc	/^inline void IOBufferData::Init(char* buf, int bufSize)$/;"	f	class:IOBufferData
Init	cc/libkfsIO/IOBuffer.cc	/^inline void IOBufferData::Init(char* buf, libkfsio::IOBufferAllocator& allocator)$/;"	f	class:IOBufferData
Init	cc/libkfsIO/TelemetryClient.cc	/^void TelemetryClient::Init(const struct ip_mreq &imreq, $/;"	f	class:TelemetryClient
Init	cc/qcdio/qcdiskqueue.cpp	/^    void Init($/;"	f	class:QCDiskQueue::Queue	file:
Init	cc/qcdio/qcdllist.h	/^    static void Init($/;"	f	class:QCDLList
Init	cc/qcdio/qcdllist.h	/^    static void Init($/;"	f	class:QCDLListOp
InitCheckAllChunks	cc/meta/LayoutManager.cc	/^LayoutManager::InitCheckAllChunks()$/;"	f	class:LayoutManager
InitCounterManager	cc/libkfsIO/Counter.cc	/^void InitCounterManager()$/;"	f
InitForRecordAppend	cc/chunk/KfsOps.h	/^    void InitForRecordAppend() {$/;"	f	struct:KFS::WriteOp
InitGlobals	cc/libkfsIO/Globals.h	/^        inline static void InitGlobals()$/;"	f	namespace:KFS::libkfsio
InitParseHandlers	cc/chunk/KfsOps.cc	/^KFS::InitParseHandlers()$/;"	f	class:KFS
InitRecoveryStartTime	cc/meta/LayoutManager.h	/^		void InitRecoveryStartTime()$/;"	f	class:KFS::LayoutManager
InitialSeqNo	cc/chunk/MetaServerSM.cc	/^InitialSeqNo()$/;"	f	file:
InitialSeqNo	cc/chunk/RemoteSyncSM.cc	/^InitialSeqNo()$/;"	f	file:
InputIterator	cc/qcdio/qcdiskqueue.h	/^    typedef QCIoBufferPool::InputIterator  InputIterator;$/;"	t	class:QCDiskQueue
InputIterator	cc/qcdio/qciobufferpool.h	/^        InputIterator()$/;"	f	class:QCIoBufferPool::InputIterator
InputIterator	cc/qcdio/qciobufferpool.h	/^    class InputIterator$/;"	c	class:QCIoBufferPool
Insert	cc/chunk/ChunkManager.h	/^        bool Insert(WriteOp* op, bool front)$/;"	f	class:KFS::ChunkManager::PendingWrites
Insert	cc/qcdio/qcdiskqueue.cpp	/^    void Insert($/;"	f	class:QCDiskQueue::Queue	file:
Insert	cc/qcdio/qcdllist.h	/^    static void Insert($/;"	f	class:QCDLListOp
Insert	cc/qcdio/qcthread.cpp	/^    void Insert($/;"	f	class:QCStartedThreadList
Instance	cc/libkfsClient/KfsClient.cc	/^KfsClientFactory::Instance()$/;"	f	class:KfsClientFactory
Instance	cc/libkfsIO/Globals.cc	/^Globals_t::Instance()$/;"	f	class:KFS::libkfsio::Globals_t
Invalidate	cc/meta/LayoutManager.cc	/^ARAChunkCache::Invalidate(fid_t fid)$/;"	f	class:ARAChunkCache
Invalidate	cc/meta/LayoutManager.cc	/^ARAChunkCache::Invalidate(fid_t fid, chunkId_t chunkId)$/;"	f	class:ARAChunkCache
Invalidate	cc/meta/LayoutManager.cc	/^ARAChunkCache::Invalidate(iterator it)$/;"	f	class:ARAChunkCache
InvalidateWriteId	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppendManager::InvalidateWriteId($/;"	f	class:KFS::AtomicRecordAppendManager
InvalidateWriteId	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppender::InvalidateWriteId(int64_t writeId, bool declareFailureFlag)$/;"	f	class:KFS::AtomicRecordAppender
InvalidateWriteIdDeclareFailure	cc/chunk/AtomicRecordAppender.h	/^    int    InvalidateWriteIdDeclareFailure(kfsChunkId_t chunkId, int64_t writeId) {$/;"	f	class:KFS::AtomicRecordAppendManager
InvalidateWriteLease	cc/meta/LayoutManager.cc	/^LayoutManager::InvalidateWriteLease(chunkId_t chunkId)$/;"	f	class:LayoutManager
Io	cc/qcdio/qcfdpoll.h	/^    int Io($/;"	f	class:QCFdPoll
IoBuffers	cc/chunk/DiskIo.cc	/^    typedef DiskIo::IoBuffers IoBuffers;$/;"	t	class:KFS::DiskIoQueues	file:
IoBuffers	cc/chunk/DiskIo.h	/^    typedef std::vector<IOBufferData> IoBuffers;$/;"	t	class:KFS::DiskIo
IoCompletion	cc/chunk/DiskIo.cc	/^DiskIo::IoCompletion($/;"	f	class:KFS::DiskIo
IoCompletion	cc/qcdio/qcdiskqueue.h	/^        IoCompletion()$/;"	f	class:QCDiskQueue::IoCompletion
IoCompletion	cc/qcdio/qcdiskqueue.h	/^    class IoCompletion$/;"	c	class:QCDiskQueue
IoRequestBytes	cc/chunk/ClientSM.cc	/^IoRequestBytes(size_t numBytes)$/;"	f
IoThread	cc/qcdio/qcdiskqueue.cpp	/^        IoThread()$/;"	f	class:QCDiskQueue::Queue::IoThread
IoThread	cc/qcdio/qcdiskqueue.cpp	/^    class IoThread : public QCThread$/;"	c	class:QCDiskQueue::Queue	file:
IsAcceptorStarted	cc/libkfsIO/Acceptor.h	/^    bool IsAcceptorStarted() const {$/;"	f	class:KFS::Acceptor
IsActive	cc/libkfsClient/WriteAppender.cc	/^    bool IsActive() const$/;"	f	class:KFS::WriteAppender::Impl
IsActive	cc/libkfsClient/WriteAppender.cc	/^WriteAppender::IsActive() const$/;"	f	class:KFS::WriteAppender
IsAllDataSent	cc/libkfsClient/KfsNetClient.cc	/^    bool IsAllDataSent() const$/;"	f	class:KFS::KfsNetClient::Impl
IsAllDataSent	cc/libkfsClient/KfsNetClient.cc	/^KfsNetClient::IsAllDataSent() const$/;"	f	class:KFS::KfsNetClient
IsAllocationPending	cc/meta/LayoutManager.h	/^			bool IsAllocationPending() const {$/;"	f	struct:KFS::ARAChunkCache::Entry
IsAnyServerAvailForReReplication	cc/meta/LayoutManager.cc	/^LayoutManager::IsAnyServerAvailForReReplication() const$/;"	f	class:LayoutManager
IsAppend	cc/libkfsClient/KfsProtocolWorker.cc	/^    static bool IsAppend($/;"	f	class:KFS::KfsProtocolWorker::Impl
IsCandidateServer	cc/meta/LayoutManager.cc	/^IsCandidateServer(const ChunkServerPtr &c)$/;"	f	file:
IsChunkBufferDataValid	cc/libkfsClient/KfsRead.cc	/^IsChunkBufferDataValid($/;"	f	file:
IsChunkHostedOnServer	cc/meta/LayoutManager.cc	/^LayoutManager::IsChunkHostedOnServer(const vector<ChunkServerPtr> &hosters,$/;"	f	class:LayoutManager
IsChunkLeaseGood	cc/libkfsClient/KfsRead.cc	/^KfsClientImpl::IsChunkLeaseGood(int fd, kfsChunkId_t chunkId, const string &pathname, int &leaseStatus)$/;"	f	class:KfsClientImpl
IsChunkMetadataLoaded	cc/chunk/ChunkManager.cc	/^ChunkManager::IsChunkMetadataLoaded(kfsChunkId_t chunkId)$/;"	f	class:KFS::ChunkManager
IsChunkOpen	cc/chunk/AtomicRecordAppender.cc	/^    bool IsChunkOpen() const$/;"	f	class:KFS::AtomicRecordAppender	file:
IsChunkReadable	cc/libkfsClient/KfsRead.cc	/^KfsClientImpl::IsChunkReadable(int fd, int &leaseStatus)$/;"	f	class:KfsClientImpl
IsChunkServerRestartAllowed	cc/meta/LayoutManager.cc	/^inline bool LayoutManager::IsChunkServerRestartAllowed() const$/;"	f	class:LayoutManager
IsChunkStable	cc/chunk/AtomicRecordAppender.cc	/^    bool IsChunkStable() const$/;"	f	class:KFS::AtomicRecordAppender
IsChunkStable	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppendManager::IsChunkStable(kfsChunkId_t chunkId) const$/;"	f	class:KFS::AtomicRecordAppendManager
IsChunkStable	cc/chunk/ChunkManager.cc	/^ChunkManager::IsChunkStable(const ChunkInfoHandle* cih) const$/;"	f	class:KFS::ChunkManager
IsChunkStable	cc/chunk/ChunkManager.cc	/^ChunkManager::IsChunkStable(kfsChunkId_t chunkId) const$/;"	f	class:KFS::ChunkManager
IsChunkStable	cc/meta/LayoutManager.cc	/^LayoutManager::IsChunkStable(chunkId_t chunkId)$/;"	f	class:LayoutManager
IsClosing	cc/libkfsClient/WriteAppender.cc	/^    bool IsClosing() const$/;"	f	class:KFS::WriteAppender::Impl
IsClosing	cc/libkfsClient/WriteAppender.cc	/^WriteAppender::IsClosing() const$/;"	f	class:KFS::WriteAppender
IsConnectPending	cc/libkfsIO/NetConnection.h	/^        bool IsConnectPending() const     { return mConnectPending; }$/;"	f	class:KFS::NetConnection::NetManagerEntry
IsConnected	cc/chunk/MetaServerSM.h	/^    bool IsConnected() const {$/;"	f	class:KFS::MetaServerSM
IsConnected	cc/libkfsClient/KfsNetClient.cc	/^    bool IsConnected() const$/;"	f	class:KFS::KfsNetClient::Impl
IsConnected	cc/libkfsClient/KfsNetClient.cc	/^KfsNetClient::IsConnected() const$/;"	f	class:KFS::KfsNetClient
IsCurrChunkAttrKnown	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::IsCurrChunkAttrKnown(int fd)$/;"	f	class:KfsClientImpl
IsDataReceived	cc/libkfsClient/KfsNetClient.cc	/^    bool IsDataReceived() const$/;"	f	class:KFS::KfsNetClient::Impl
IsDataReceived	cc/libkfsClient/KfsNetClient.cc	/^KfsNetClient::IsDataReceived() const$/;"	f	class:KFS::KfsNetClient
IsDataSent	cc/libkfsClient/KfsNetClient.cc	/^    bool IsDataSent() const$/;"	f	class:KFS::KfsNetClient::Impl
IsDataSent	cc/libkfsClient/KfsNetClient.cc	/^KfsNetClient::IsDataSent() const$/;"	f	class:KFS::KfsNetClient
IsDirectory	cc/libkfsClient/KfsClient.cc	/^KfsClient::IsDirectory(const char *pathname)$/;"	f	class:KfsClient
IsDirectory	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::IsDirectory(const char *pathname)$/;"	f	class:KfsClientImpl
IsDown	cc/meta/ChunkServer.h	/^		bool IsDown() const {$/;"	f	class:KFS::ChunkServer
IsEmpty	cc/libkfsIO/IOBuffer.h	/^    bool IsEmpty() const$/;"	f	class:KFS::IOBuffer
IsEmpty	cc/libkfsIO/IOBuffer.h	/^    int IsEmpty() const { return mProducer <= mConsumer; }$/;"	f	class:KFS::IOBufferData
IsEmpty	cc/qcdio/qcdllist.h	/^    static bool IsEmpty($/;"	f	class:QCDLList
IsEmpty	cc/qcdio/qciobufferpool.cpp	/^    bool IsEmpty() const$/;"	f	class:QCIoBufferPool::Partition
IsError	cc/qcdio/qcdiskqueue.h	/^        bool IsError() const$/;"	f	class:QCDiskQueue::EnqueueStatus
IsError	cc/qcdio/qcdiskqueue.h	/^        bool IsError() const$/;"	f	class:QCDiskQueue::Status
IsFile	cc/libkfsClient/KfsClient.cc	/^KfsClient::IsFile(const char *pathname)$/;"	f	class:KfsClient
IsFile	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::IsFile(const char *pathname)$/;"	f	class:KfsClientImpl
IsFileInUse	cc/chunk/ChunkManager.cc	/^    bool IsFileInUse() const {$/;"	f	class:KFS::ChunkInfoHandle
IsFileNamePrefixMatches	cc/chunk/DiskIo.cc	/^    bool IsFileNamePrefixMatches($/;"	f	class:KFS::DiskQueue
IsFileOpen	cc/chunk/ChunkManager.cc	/^    bool IsFileOpen() const {$/;"	f	class:KFS::ChunkInfoHandle
IsFileTableEntryValid	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::IsFileTableEntryValid(int fte)$/;"	f	class:KfsClientImpl
IsFlushing	cc/common/BufferedLogWriter.cc	/^    bool IsFlushing() const$/;"	f	class:KFS::BufferedLogWriter::Impl	file:
IsFull	cc/libkfsIO/IOBuffer.h	/^    int IsFull() const { return mProducer >= mEnd; }$/;"	f	class:KFS::IOBufferData
IsFull	cc/qcdio/qciobufferpool.cpp	/^    bool IsFull() const$/;"	f	class:QCIoBufferPool::Partition
IsGood	cc/libkfsIO/NetConnection.h	/^    bool IsGood() const {$/;"	f	class:KFS::NetConnection
IsGood	cc/libkfsIO/TcpSocket.cc	/^bool TcpSocket::IsGood() const$/;"	f	class:TcpSocket
IsGood	cc/qcdio/qcdiskqueue.h	/^        bool IsGood() const$/;"	f	class:QCDiskQueue::EnqueueStatus
IsGood	cc/qcdio/qcdiskqueue.h	/^        bool IsGood() const$/;"	f	class:QCDiskQueue::Status
IsHandshakeDone	cc/chunk/MetaServerSM.h	/^    bool IsHandshakeDone() const {$/;"	f	class:KFS::MetaServerSM
IsInList	cc/qcdio/qcdiskqueue.cpp	/^    bool IsInList($/;"	f	class:QCDiskQueue::Queue	file:
IsInList	cc/qcdio/qcdllist.h	/^    static bool IsInList($/;"	f	class:QCDLList
IsInList	cc/qcdio/qcdllist.h	/^    static bool IsInList($/;"	f	class:QCDLListOp
IsInLru	cc/chunk/ChunkManager.cc	/^inline bool ChunkManager::IsInLru(const ChunkInfoHandle& cih) const {$/;"	f	class:KFS::ChunkManager
IsInitialized	cc/libkfsClient/KfsClient.cc	/^KfsClient::IsInitialized()$/;"	f	class:KfsClient
IsInitialized	cc/libkfsClient/KfsClientInt.h	/^    bool IsInitialized() { return mIsInitialized; };$/;"	f	class:KFS::KfsClientImpl
IsLastFull	cc/libkfsIO/IOBuffer.h	/^    bool IsLastFull() const $/;"	f	class:KFS::IOBuffer
IsLeaseValid	cc/chunk/LeaseClerk.cc	/^LeaseClerk::IsLeaseValid(kfsChunkId_t chunkId)$/;"	f	class:LeaseClerk
IsLeaseValid	cc/libkfsClient/LeaseClerk.cc	/^LeaseClerk::IsLeaseValid(kfsChunkId_t chunkId)$/;"	f	class:LeaseClerk
IsLocalServer	cc/chunk/ChunkServer.h	/^    bool IsLocalServer(const ServerLocation &location) const {$/;"	f	class:KFS::ChunkServer
IsLogLevelEnabled	cc/common/BufferedLogWriter.h	/^    bool IsLogLevelEnabled($/;"	f	class:KFS::BufferedLogWriter
IsLoggerInited	cc/common/log.h	/^        static bool IsLoggerInited() { return (logger != 0); }$/;"	f	class:KFS::MsgLogger
IsLowOnBuffers	cc/chunk/BufferManager.cc	/^BufferManager::IsLowOnBuffers() const$/;"	f	class:KFS::BufferManager
IsMaster	cc/chunk/AtomicRecordAppender.cc	/^    bool IsMaster() const$/;"	f	class:KFS::AtomicRecordAppender
IsMsgAvail	cc/chunk/Utils.cc	/^bool KFS::IsMsgAvail(IOBuffer *iobuf, int *msgLen)$/;"	f	class:KFS
IsMsgAvail	cc/meta/util.cc	/^KFS::IsMsgAvail(IOBuffer *iobuf,$/;"	f	class:KFS
IsOpen	cc/chunk/AtomicRecordAppender.cc	/^    bool IsOpen() const$/;"	f	class:KFS::AtomicRecordAppender
IsOpen	cc/chunk/DiskIo.h	/^        bool IsOpen() const$/;"	f	class:KFS::DiskIo::File
IsOpen	cc/libkfsClient/WriteAppender.cc	/^    bool IsOpen() const$/;"	f	class:KFS::WriteAppender::Impl
IsOpen	cc/libkfsClient/WriteAppender.cc	/^WriteAppender::IsOpen() const$/;"	f	class:KFS::WriteAppender
IsOpening	cc/libkfsClient/WriteAppender.cc	/^    bool IsOpening() const$/;"	f	class:KFS::WriteAppender::Impl
IsOpening	cc/libkfsClient/WriteAppender.cc	/^WriteAppender::IsOpening() const$/;"	f	class:KFS::WriteAppender
IsOverQuota	cc/chunk/BufferManager.h	/^    bool IsOverQuota($/;"	f	class:KFS::BufferManager
IsOwned	cc/qcdio/qcmutex.h	/^    bool IsOwned()$/;"	f	class:QCMutex
IsPending	cc/libkfsClient/KfsPendingOp.h	/^    bool IsPending() const$/;"	f	class:KFS::KfsPendingOp
IsPeriodic	cc/libkfsIO/Event.h	/^    bool IsPeriodic() {$/;"	f	class:KFS::Event
IsReadOnly	cc/chunk/DiskIo.h	/^        bool IsReadOnly() const$/;"	f	class:KFS::DiskIo::File
IsReadReady	cc/libkfsIO/NetConnection.h	/^    bool IsReadReady() const {$/;"	f	class:KFS::NetConnection
IsRegistered	cc/qcdio/qciobufferpool.h	/^        bool IsRegistered()$/;"	f	class:QCIoBufferPool::Client
IsResponsiveServer	cc/meta/ChunkServer.h	/^		bool IsResponsiveServer() const {$/;"	f	class:KFS::ChunkServer
IsRestartScheduled	cc/meta/ChunkServer.h	/^                bool IsRestartScheduled() const {$/;"	f	class:KFS::ChunkServer
IsRetiring	cc/meta/ChunkServer.h	/^		bool IsRetiring() const {$/;"	f	class:KFS::ChunkServer
IsRetryConnectOnly	cc/libkfsClient/KfsNetClient.cc	/^    bool IsRetryConnectOnly() const$/;"	f	class:KFS::KfsNetClient::Impl
IsRetryConnectOnly	cc/libkfsClient/KfsNetClient.cc	/^KfsNetClient::IsRetryConnectOnly() const$/;"	f	class:KFS::KfsNetClient
IsRunning	cc/libkfsIO/NetManager.h	/^    bool IsRunning() const$/;"	f	class:KFS::NetManager
IsShared	cc/libkfsIO/IOBuffer.h	/^    bool IsShared() const {$/;"	f	class:KFS::IOBufferData
IsSleeping	cc/libkfsClient/WriteAppender.cc	/^    bool IsSleeping() const$/;"	f	class:KFS::WriteAppender::Impl
IsSleeping	cc/libkfsClient/WriteAppender.cc	/^WriteAppender::IsSleeping() const$/;"	f	class:KFS::WriteAppender
IsSpaceReservedInChunk	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppendManager::IsSpaceReservedInChunk(kfsChunkId_t chunkId)$/;"	f	class:KFS::AtomicRecordAppendManager
IsStarted	cc/qcdio/qcthread.h	/^    bool IsStarted() const$/;"	f	class:QCThread
IsUp	cc/chunk/MetaServerSM.h	/^    bool IsUp() const {$/;"	f	class:KFS::MetaServerSM
IsValid	cc/common/kfsdecls.h	/^    bool IsValid() const {$/;"	f	struct:KFS::ServerLocation
IsValid	cc/libkfsClient/KfsClientInt.h	/^    bool IsValid() const { return (mFd >= 0); }$/;"	f	class:KFS::PendingChunkRead
IsValid	cc/libkfsClient/KfsProtocolWorker.cc	/^    static bool IsValid($/;"	f	class:KFS::KfsProtocolWorker::Impl
IsValidLease	cc/meta/LayoutManager.h	/^		static bool IsValidLease(const LeaseInfo &l)$/;"	f	struct:KFS::LeaseInfo
IsValidLeaseIssued	cc/meta/LayoutManager.cc	/^LayoutManager::IsValidLeaseIssued(const vector <MetaChunkInfo *> &c)$/;"	f	class:LayoutManager
IsValidRequestId	cc/qcdio/qcdiskqueue.h	/^    static bool IsValidRequestId($/;"	f	class:QCDiskQueue
IsValidWriteId	cc/chunk/ChunkManager.h	/^    bool IsValidWriteId(int64_t writeId) {$/;"	f	class:KFS::ChunkManager
IsValidWriteLease	cc/meta/LayoutManager.h	/^		static bool IsValidWriteLease(const LeaseInfo &l)$/;"	f	struct:KFS::LeaseInfo
IsWaiting	cc/chunk/BufferManager.h	/^        bool IsWaiting() const$/;"	f	class:KFS::BufferManager::Client
IsWaiting	cc/chunk/BufferManager.h	/^    bool IsWaiting($/;"	f	class:KFS::BufferManager
IsWriteAppenderOwns	cc/chunk/ChunkManager.cc	/^ChunkManager::IsWriteAppenderOwns(kfsChunkId_t chunkId) const$/;"	f	class:KFS::ChunkManager
IsWriteAppenderOwns	cc/chunk/ChunkManager.cc	/^inline bool ChunkInfoHandle::IsWriteAppenderOwns() const$/;"	f	class:KFS::ChunkInfoHandle
IsWriteLease	cc/meta/LayoutManager.h	/^		static bool IsWriteLease(const LeaseInfo &l)$/;"	f	struct:KFS::LeaseInfo
IsWritePending	cc/chunk/ChunkManager.h	/^    bool IsWritePending(kfsChunkId_t chunkId) {$/;"	f	class:KFS::ChunkManager
IsWriteReady	cc/libkfsIO/NetConnection.h	/^    bool IsWriteReady() const {$/;"	f	class:KFS::NetConnection
IssueRequest	cc/libkfsClient/KfsAsyncRW.cc	/^AsyncReadWorker::IssueRequest()$/;"	f	class:AsyncReadWorker
IssueRequest	cc/libkfsClient/KfsAsyncRW.cc	/^AsyncWriteWorker::IssueRequest()$/;"	f	class:AsyncWriteWorker
IssueWriteIdRequest	cc/libkfsClient/KfsAsyncRW.cc	/^AsyncWriteWorker::IssueWriteIdRequest()$/;"	f	class:AsyncWriteWorker
IssueWritePrepareRequest	cc/libkfsClient/KfsAsyncRW.cc	/^AsyncWriteWorker::IssueWritePrepareRequest()$/;"	f	class:AsyncWriteWorker
IssueWriteSyncRequest	cc/libkfsClient/KfsAsyncRW.cc	/^AsyncWriteWorker::IssueWriteSyncRequest(size_t nBytes)$/;"	f	class:AsyncWriteWorker
Iterator	cc/qcdio/qcdllist.h	/^        Iterator($/;"	f	class:QCDLList::Iterator
Iterator	cc/qcdio/qcdllist.h	/^    class Iterator$/;"	c	class:QCDLList
Iterator	cc/qcdio/qcunittest.cpp	/^        Iterator($/;"	f	class:QCDiskQueueTest::Iterator
Iterator	cc/qcdio/qcunittest.cpp	/^    class Iterator :$/;"	c	class:QCDiskQueueTest	file:
Java_org_kosmix_kosmosfs_access_KfsAccess_cd	cc/access/KfsAccessJni.cc	/^jint Java_org_kosmix_kosmosfs_access_KfsAccess_cd($/;"	f
Java_org_kosmix_kosmosfs_access_KfsAccess_compareChunkReplicas	cc/access/KfsAccessJni.cc	/^jboolean Java_org_kosmix_kosmosfs_access_KfsAccess_compareChunkReplicas($/;"	f
Java_org_kosmix_kosmosfs_access_KfsAccess_create	cc/access/KfsAccessJni.cc	/^jint Java_org_kosmix_kosmosfs_access_KfsAccess_create($/;"	f
Java_org_kosmix_kosmosfs_access_KfsAccess_exists	cc/access/KfsAccessJni.cc	/^jint Java_org_kosmix_kosmosfs_access_KfsAccess_exists($/;"	f
Java_org_kosmix_kosmosfs_access_KfsAccess_filesize	cc/access/KfsAccessJni.cc	/^jlong Java_org_kosmix_kosmosfs_access_KfsAccess_filesize($/;"	f
Java_org_kosmix_kosmosfs_access_KfsAccess_getDataLocation	cc/access/KfsAccessJni.cc	/^jobjectArray Java_org_kosmix_kosmosfs_access_KfsAccess_getDataLocation($/;"	f
Java_org_kosmix_kosmosfs_access_KfsAccess_getDefaultIoBufferSize	cc/access/KfsAccessJni.cc	/^jlong Java_org_kosmix_kosmosfs_access_KfsAccess_getDefaultIoBufferSize($/;"	f
Java_org_kosmix_kosmosfs_access_KfsAccess_getDefaultReadAheadSize	cc/access/KfsAccessJni.cc	/^jlong Java_org_kosmix_kosmosfs_access_KfsAccess_getDefaultReadAheadSize($/;"	f
Java_org_kosmix_kosmosfs_access_KfsAccess_getIoBufferSize	cc/access/KfsAccessJni.cc	/^jlong Java_org_kosmix_kosmosfs_access_KfsAccess_getIoBufferSize($/;"	f
Java_org_kosmix_kosmosfs_access_KfsAccess_getModificationTime	cc/access/KfsAccessJni.cc	/^jlong Java_org_kosmix_kosmosfs_access_KfsAccess_getModificationTime($/;"	f
Java_org_kosmix_kosmosfs_access_KfsAccess_getReadAheadSize	cc/access/KfsAccessJni.cc	/^jlong Java_org_kosmix_kosmosfs_access_KfsAccess_getReadAheadSize($/;"	f
Java_org_kosmix_kosmosfs_access_KfsAccess_getReplication	cc/access/KfsAccessJni.cc	/^jshort Java_org_kosmix_kosmosfs_access_KfsAccess_getReplication($/;"	f
Java_org_kosmix_kosmosfs_access_KfsAccess_initF	cc/access/KfsAccessJni.cc	/^jlong Java_org_kosmix_kosmosfs_access_KfsAccess_initF($/;"	f
Java_org_kosmix_kosmosfs_access_KfsAccess_initS	cc/access/KfsAccessJni.cc	/^jlong Java_org_kosmix_kosmosfs_access_KfsAccess_initS($/;"	f
Java_org_kosmix_kosmosfs_access_KfsAccess_isDirectory	cc/access/KfsAccessJni.cc	/^jint Java_org_kosmix_kosmosfs_access_KfsAccess_isDirectory($/;"	f
Java_org_kosmix_kosmosfs_access_KfsAccess_isFile	cc/access/KfsAccessJni.cc	/^jint Java_org_kosmix_kosmosfs_access_KfsAccess_isFile($/;"	f
Java_org_kosmix_kosmosfs_access_KfsAccess_mkdirs	cc/access/KfsAccessJni.cc	/^jint Java_org_kosmix_kosmosfs_access_KfsAccess_mkdirs($/;"	f
Java_org_kosmix_kosmosfs_access_KfsAccess_open	cc/access/KfsAccessJni.cc	/^jint Java_org_kosmix_kosmosfs_access_KfsAccess_open($/;"	f
Java_org_kosmix_kosmosfs_access_KfsAccess_readdir	cc/access/KfsAccessJni.cc	/^jobjectArray Java_org_kosmix_kosmosfs_access_KfsAccess_readdir($/;"	f
Java_org_kosmix_kosmosfs_access_KfsAccess_readdirplus	cc/access/KfsAccessJni.cc	/^jobjectArray Java_org_kosmix_kosmosfs_access_KfsAccess_readdirplus($/;"	f
Java_org_kosmix_kosmosfs_access_KfsAccess_remove	cc/access/KfsAccessJni.cc	/^jint Java_org_kosmix_kosmosfs_access_KfsAccess_remove($/;"	f
Java_org_kosmix_kosmosfs_access_KfsAccess_rename	cc/access/KfsAccessJni.cc	/^jint Java_org_kosmix_kosmosfs_access_KfsAccess_rename($/;"	f
Java_org_kosmix_kosmosfs_access_KfsAccess_rmdir	cc/access/KfsAccessJni.cc	/^jint Java_org_kosmix_kosmosfs_access_KfsAccess_rmdir($/;"	f
Java_org_kosmix_kosmosfs_access_KfsAccess_rmdirs	cc/access/KfsAccessJni.cc	/^jint Java_org_kosmix_kosmosfs_access_KfsAccess_rmdirs($/;"	f
Java_org_kosmix_kosmosfs_access_KfsAccess_setDefaultIoBufferSize	cc/access/KfsAccessJni.cc	/^jlong Java_org_kosmix_kosmosfs_access_KfsAccess_setDefaultIoBufferSize($/;"	f
Java_org_kosmix_kosmosfs_access_KfsAccess_setDefaultReadAheadSize	cc/access/KfsAccessJni.cc	/^jlong Java_org_kosmix_kosmosfs_access_KfsAccess_setDefaultReadAheadSize($/;"	f
Java_org_kosmix_kosmosfs_access_KfsAccess_setIoBufferSize	cc/access/KfsAccessJni.cc	/^jlong Java_org_kosmix_kosmosfs_access_KfsAccess_setIoBufferSize($/;"	f
Java_org_kosmix_kosmosfs_access_KfsAccess_setModificationTime	cc/access/KfsAccessJni.cc	/^jint Java_org_kosmix_kosmosfs_access_KfsAccess_setModificationTime($/;"	f
Java_org_kosmix_kosmosfs_access_KfsAccess_setReadAheadSize	cc/access/KfsAccessJni.cc	/^jlong Java_org_kosmix_kosmosfs_access_KfsAccess_setReadAheadSize($/;"	f
Java_org_kosmix_kosmosfs_access_KfsAccess_setReplication	cc/access/KfsAccessJni.cc	/^jshort Java_org_kosmix_kosmosfs_access_KfsAccess_setReplication($/;"	f
Java_org_kosmix_kosmosfs_access_KfsInputChannel_close	cc/access/KfsAccessJni.cc	/^jint Java_org_kosmix_kosmosfs_access_KfsInputChannel_close($/;"	f
Java_org_kosmix_kosmosfs_access_KfsInputChannel_read	cc/access/KfsAccessJni.cc	/^jint Java_org_kosmix_kosmosfs_access_KfsInputChannel_read($/;"	f
Java_org_kosmix_kosmosfs_access_KfsInputChannel_seek	cc/access/KfsAccessJni.cc	/^jint Java_org_kosmix_kosmosfs_access_KfsInputChannel_seek($/;"	f
Java_org_kosmix_kosmosfs_access_KfsInputChannel_tell	cc/access/KfsAccessJni.cc	/^jint Java_org_kosmix_kosmosfs_access_KfsInputChannel_tell($/;"	f
Java_org_kosmix_kosmosfs_access_KfsOutputChannel_atomicRecordAppend	cc/access/KfsAccessJni.cc	/^jint Java_org_kosmix_kosmosfs_access_KfsOutputChannel_atomicRecordAppend($/;"	f
Java_org_kosmix_kosmosfs_access_KfsOutputChannel_close	cc/access/KfsAccessJni.cc	/^jint Java_org_kosmix_kosmosfs_access_KfsOutputChannel_close($/;"	f
Java_org_kosmix_kosmosfs_access_KfsOutputChannel_seek	cc/access/KfsAccessJni.cc	/^jint Java_org_kosmix_kosmosfs_access_KfsOutputChannel_seek($/;"	f
Java_org_kosmix_kosmosfs_access_KfsOutputChannel_sync	cc/access/KfsAccessJni.cc	/^jint Java_org_kosmix_kosmosfs_access_KfsOutputChannel_sync($/;"	f
Java_org_kosmix_kosmosfs_access_KfsOutputChannel_tell	cc/access/KfsAccessJni.cc	/^jint Java_org_kosmix_kosmosfs_access_KfsOutputChannel_tell($/;"	f
Java_org_kosmix_kosmosfs_access_KfsOutputChannel_write	cc/access/KfsAccessJni.cc	/^jint Java_org_kosmix_kosmosfs_access_KfsOutputChannel_write($/;"	f
Join	cc/qcdio/qcthread.cpp	/^QCThread::Join()$/;"	f	class:QCThread
KFS	cc/chunk/AtomicRecordAppender.cc	/^namespace KFS {$/;"	n	file:
KFS	cc/chunk/AtomicRecordAppender.h	/^namespace KFS$/;"	n
KFS	cc/chunk/BufferManager.cc	/^namespace KFS$/;"	n	file:
KFS	cc/chunk/BufferManager.h	/^namespace KFS$/;"	n
KFS	cc/chunk/Chunk.h	/^namespace KFS$/;"	n
KFS	cc/chunk/ChunkManager.cc	/^namespace KFS$/;"	n	file:
KFS	cc/chunk/ChunkManager.h	/^namespace KFS$/;"	n
KFS	cc/chunk/ChunkServer.h	/^namespace KFS$/;"	n
KFS	cc/chunk/ClientManager.h	/^namespace KFS$/;"	n
KFS	cc/chunk/ClientSM.h	/^namespace KFS$/;"	n
KFS	cc/chunk/DiskIo.cc	/^namespace KFS$/;"	n	file:
KFS	cc/chunk/DiskIo.h	/^namespace KFS$/;"	n
KFS	cc/chunk/KfsOps.h	/^namespace KFS$/;"	n
KFS	cc/chunk/LeaseClerk.h	/^namespace KFS$/;"	n
KFS	cc/chunk/Logger.h	/^namespace KFS$/;"	n
KFS	cc/chunk/MetaServerSM.h	/^namespace KFS$/;"	n
KFS	cc/chunk/RemoteSyncSM.h	/^namespace KFS$/;"	n
KFS	cc/chunk/Replicator.h	/^namespace KFS$/;"	n
KFS	cc/chunk/Utils.h	/^namespace KFS$/;"	n
KFS	cc/common/BufferedLogWriter.cc	/^namespace KFS$/;"	n	file:
KFS	cc/common/BufferedLogWriter.h	/^namespace KFS$/;"	n
KFS	cc/common/Version.h	/^namespace KFS {$/;"	n
KFS	cc/common/hsieh_hash.h	/^namespace KFS$/;"	n
KFS	cc/common/kfsdecls.h	/^namespace KFS {$/;"	n
KFS	cc/common/kfstypes.h	/^namespace KFS {$/;"	n
KFS	cc/common/log.cc	/^namespace KFS$/;"	n	file:
KFS	cc/common/log.h	/^namespace KFS $/;"	n
KFS	cc/common/properties.h	/^namespace KFS$/;"	n
KFS	cc/emulator/ChunkServerEmulator.h	/^namespace KFS$/;"	n
KFS	cc/emulator/EmulatorSetup.h	/^namespace KFS$/;"	n
KFS	cc/emulator/LayoutEmulator.h	/^namespace KFS$/;"	n
KFS	cc/libkfsClient/KfsAsyncRW.h	/^namespace KFS$/;"	n
KFS	cc/libkfsClient/KfsAttr.h	/^namespace KFS {$/;"	n
KFS	cc/libkfsClient/KfsClient.h	/^namespace KFS {$/;"	n
KFS	cc/libkfsClient/KfsClientInt.h	/^namespace KFS {$/;"	n
KFS	cc/libkfsClient/KfsNetClient.cc	/^namespace KFS {$/;"	n	file:
KFS	cc/libkfsClient/KfsNetClient.h	/^namespace KFS {$/;"	n
KFS	cc/libkfsClient/KfsOps.h	/^namespace KFS {$/;"	n
KFS	cc/libkfsClient/KfsPendingOp.h	/^namespace KFS {$/;"	n
KFS	cc/libkfsClient/KfsProtocolWorker.cc	/^namespace KFS$/;"	n	file:
KFS	cc/libkfsClient/KfsProtocolWorker.h	/^namespace KFS$/;"	n
KFS	cc/libkfsClient/LeaseClerk.h	/^namespace KFS {$/;"	n
KFS	cc/libkfsClient/Utils.h	/^namespace KFS {$/;"	n
KFS	cc/libkfsClient/WriteAppender.cc	/^namespace KFS$/;"	n	file:
KFS	cc/libkfsClient/WriteAppender.h	/^namespace KFS$/;"	n
KFS	cc/libkfsClient/concurrency.h	/^namespace KFS$/;"	n
KFS	cc/libkfsIO/Acceptor.h	/^namespace KFS$/;"	n
KFS	cc/libkfsIO/BufferedSocket.h	/^namespace KFS$/;"	n
KFS	cc/libkfsIO/Checksum.cc	/^namespace KFS {$/;"	n	file:
KFS	cc/libkfsIO/Checksum.h	/^namespace KFS$/;"	n
KFS	cc/libkfsIO/Counter.h	/^namespace KFS$/;"	n
KFS	cc/libkfsIO/DiskConnection.h	/^namespace KFS$/;"	n
KFS	cc/libkfsIO/DiskEvent.h	/^namespace KFS$/;"	n
KFS	cc/libkfsIO/DiskManager.h	/^namespace KFS$/;"	n
KFS	cc/libkfsIO/Event.h	/^namespace KFS$/;"	n
KFS	cc/libkfsIO/EventManager.h	/^namespace KFS$/;"	n
KFS	cc/libkfsIO/FileHandle.h	/^namespace KFS$/;"	n
KFS	cc/libkfsIO/Globals.cc	/^namespace KFS$/;"	n	file:
KFS	cc/libkfsIO/Globals.h	/^namespace KFS$/;"	n
KFS	cc/libkfsIO/IOBuffer.h	/^namespace KFS$/;"	n
KFS	cc/libkfsIO/ITimeout.h	/^namespace KFS$/;"	n
KFS	cc/libkfsIO/KfsCallbackObj.h	/^namespace KFS$/;"	n
KFS	cc/libkfsIO/NetConnection.h	/^namespace KFS$/;"	n
KFS	cc/libkfsIO/NetErrorSimulator.cc	/^namespace KFS$/;"	n	file:
KFS	cc/libkfsIO/NetErrorSimulator.h	/^namespace KFS$/;"	n
KFS	cc/libkfsIO/NetKicker.h	/^namespace KFS$/;"	n
KFS	cc/libkfsIO/NetManager.h	/^namespace KFS$/;"	n
KFS	cc/libkfsIO/TcpSocket.h	/^namespace KFS$/;"	n
KFS	cc/libkfsIO/TelemetryClient.h	/^namespace KFS$/;"	n
KFS	cc/meta/ChildProcessTracker.cc	/^namespace KFS$/;"	n	file:
KFS	cc/meta/ChildProcessTracker.h	/^namespace KFS$/;"	n
KFS	cc/meta/ChunkReplicator.h	/^namespace KFS$/;"	n
KFS	cc/meta/ChunkServer.h	/^namespace KFS$/;"	n
KFS	cc/meta/ChunkServerFactory.h	/^namespace KFS$/;"	n
KFS	cc/meta/ChunkServerHeartbeater.h	/^namespace KFS$/;"	n
KFS	cc/meta/ClientManager.h	/^namespace KFS$/;"	n
KFS	cc/meta/ClientSM.h	/^namespace KFS$/;"	n
KFS	cc/meta/LayoutManager.h	/^namespace KFS$/;"	n
KFS	cc/meta/LeaseCleaner.h	/^namespace KFS$/;"	n
KFS	cc/meta/NetDispatch.h	/^namespace KFS$/;"	n
KFS	cc/meta/base.h	/^namespace KFS {$/;"	n
KFS	cc/meta/checkpoint.h	/^namespace KFS {$/;"	n
KFS	cc/meta/entry.h	/^namespace KFS {$/;"	n
KFS	cc/meta/kfstree.h	/^namespace KFS {$/;"	n
KFS	cc/meta/kfstypes.h	/^namespace KFS {$/;"	n
KFS	cc/meta/logger.h	/^namespace KFS {$/;"	n
KFS	cc/meta/meta.h	/^namespace KFS {$/;"	n
KFS	cc/meta/queue.h	/^namespace KFS {$/;"	n
KFS	cc/meta/replay.h	/^namespace KFS {$/;"	n
KFS	cc/meta/request.cc	/^namespace KFS {$/;"	n	file:
KFS	cc/meta/request.h	/^namespace KFS {$/;"	n
KFS	cc/meta/restore.h	/^namespace KFS {$/;"	n
KFS	cc/meta/startup.h	/^namespace KFS {$/;"	n
KFS	cc/meta/thread.h	/^namespace KFS {$/;"	n
KFS	cc/meta/util.h	/^namespace KFS {$/;"	n
KFS	cc/rebalancer/rebalancer.h	/^namespace KFS$/;"	n
KFS	cc/telemetry/packet.h	/^namespace KFS$/;"	n
KFS	cc/telemetry/telemetry_server.h	/^namespace KFS$/;"	n
KFS	cc/tools/KfsShell.h	/^namespace KFS$/;"	n
KFS	cc/tools/KfsToolsCommon.h	/^namespace KFS$/;"	n
KFS_BASE_H	cc/meta/base.h	25;"	d
KFS_BUILD_VERSION_STRING	cc/common/Version.cc	/^const std::string KFS::KFS_BUILD_VERSION_STRING="perforce1:1666\/trunk@1000";$/;"	m	class:KFS	file:
KFS_CHECKPOINT_H	cc/meta/checkpoint.h	26;"	d
KFS_CHUNKINFO	cc/meta/kfstypes.h	/^	KFS_CHUNKINFO,		\/\/!< chunk information$/;"	e	enum:KFS::MetaType
KFS_CHUNK_HEADER_SIZE	cc/chunk/ChunkManager.h	/^const size_t KFS_CHUNK_HEADER_SIZE = 16384;$/;"	m	namespace:KFS
KFS_CLIENT_PROTO_VERS	cc/common/kfstypes.h	/^const int KFS_CLIENT_PROTO_VERS = 101; $/;"	m	namespace:KFS
KFS_DATA_BUF_SIZE	cc/tests/KfsSeekWrite_main.cc	/^const int KFS_DATA_BUF_SIZE = 65536;$/;"	v
KFS_DENTRY	cc/meta/kfstypes.h	/^	KFS_DENTRY,		\/\/!< directory entry$/;"	e	enum:KFS::MetaType
KFS_DIR	cc/meta/kfstypes.h	/^	KFS_DIR			\/\/!< directory$/;"	e	enum:KFS::FileType
KFS_ENTRY_H	cc/meta/entry.h	25;"	d
KFS_FATTR	cc/meta/kfstypes.h	/^	KFS_FATTR,		\/\/!< file attributes$/;"	e	enum:KFS::MetaType
KFS_FILE	cc/meta/kfstypes.h	/^	KFS_FILE,		\/\/!< plain file$/;"	e	enum:KFS::FileType
KFS_INTERNAL	cc/meta/kfstypes.h	/^	KFS_INTERNAL,		\/\/!< internal node$/;"	e	enum:KFS::MetaType
KFS_KFSTREE_H	cc/meta/kfstree.h	29;"	d
KFS_LOGGER_H	cc/meta/logger.h	25;"	d
KFS_LOG_DEBUG	cc/common/log.h	86;"	d
KFS_LOG_EOM	cc/common/log.h	142;"	d
KFS_LOG_ERROR	cc/common/log.h	113;"	d
KFS_LOG_FATAL	cc/common/log.h	122;"	d
KFS_LOG_INFO	cc/common/log.h	95;"	d
KFS_LOG_PRIORITY	cc/common/log.h	81;"	d
KFS_LOG_STREAM	cc/common/log.h	136;"	d
KFS_LOG_STREAM_DEBUG	cc/common/log.h	151;"	d
KFS_LOG_STREAM_ERROR	cc/common/log.h	160;"	d
KFS_LOG_STREAM_FATAL	cc/common/log.h	163;"	d
KFS_LOG_STREAM_INFO	cc/common/log.h	154;"	d
KFS_LOG_STREAM_WARN	cc/common/log.h	157;"	d
KFS_LOG_VA_DEBUG	cc/common/log.h	90;"	d
KFS_LOG_VA_ERROR	cc/common/log.h	117;"	d
KFS_LOG_VA_FATAL	cc/common/log.h	126;"	d
KFS_LOG_VA_INFO	cc/common/log.h	99;"	d
KFS_LOG_VA_PRIORITY	cc/common/log.h	73;"	d
KFS_LOG_VA_WARN	cc/common/log.h	108;"	d
KFS_LOG_VERSION	cc/chunk/Logger.h	/^    static const int KFS_LOG_VERSION = 2;$/;"	m	class:KFS::Logger
KFS_LOG_VERSION_V1	cc/chunk/Logger.h	/^    static const int KFS_LOG_VERSION_V1 = 1;$/;"	m	class:KFS::Logger
KFS_LOG_WARN	cc/common/log.h	104;"	d
KFS_META_H	cc/meta/meta.h	25;"	d
KFS_MON	cc/tools/MonUtils.h	/^namespace KFS_MON$/;"	n
KFS_NET_CLIENT_H	cc/libkfsClient/KfsNetClient.h	26;"	d
KFS_NONE	cc/meta/kfstypes.h	/^	KFS_NONE,		\/\/!< uninitialized$/;"	e	enum:KFS::FileType
KFS_PENDING_OP_H	cc/libkfsClient/KfsPendingOp.h	26;"	d
KFS_QUEUE_H	cc/meta/queue.h	25;"	d
KFS_REPLAY_H	cc/meta/replay.h	25;"	d
KFS_REQUEST_H	cc/meta/request.h	31;"	d
KFS_RESTORE_H	cc/meta/restore.h	25;"	d
KFS_SENTINEL	cc/meta/kfstypes.h	/^	KFS_SENTINEL = 99999	\/\/!< internal use, must be largest$/;"	e	enum:KFS::MetaType
KFS_SOURCE_REVISION_STRING	cc/common/Version.cc	/^const std::string KFS::KFS_SOURCE_REVISION_STRING="100";$/;"	m	class:KFS	file:
KFS_STARTUP_H	cc/meta/startup.h	26;"	d
KFS_THREAD_H	cc/meta/thread.h	26;"	d
KFS_TYPES_H	cc/meta/kfstypes.h	26;"	d
KFS_UNINIT	cc/meta/kfstypes.h	/^	KFS_UNINIT,		\/\/!< uninitialized$/;"	e	enum:KFS::MetaType
KFS_UTIL_H	cc/meta/util.h	25;"	d
KFS_VERSION_STR	cc/chunk/KfsOps.cc	/^const char *KFS_VERSION_STR = "KFS\/1.0";$/;"	v
KFS_VERSION_STR	cc/libkfsClient/KfsOps.cc	/^static const char *KFS_VERSION_STR = "KFS\/1.0";$/;"	v	file:
KFS_VERSION_STR	cc/meta/kfsfsck_main.cc	/^const string KFS_VERSION_STR = "KFS\/1.0";$/;"	v
KFS_VERSION_STR	cc/tools/MonUtils.cc	/^static const char *KFS_VERSION_STR = "KFS\/1.0";$/;"	v	file:
Key	cc/meta/base.h	/^	Key(): kind(KFS_UNINIT), kdata1(0), kdata2(0) { }$/;"	f	class:KFS::Key
Key	cc/meta/base.h	/^	Key(MetaType k, KeyData d): kind(k), kdata1(d), kdata2(0) { }$/;"	f	class:KFS::Key
Key	cc/meta/base.h	/^	Key(MetaType k, KeyData d1, KeyData d2):$/;"	f	class:KFS::Key
Key	cc/meta/base.h	/^class Key {$/;"	c	namespace:KFS
KeyData	cc/meta/base.h	/^typedef long long KeyData;	\/\/!< "opaque" key data$/;"	t	namespace:KFS
KfsAccess	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    public KfsAccess(String configFn) throws IOException$/;"	m	class:KfsAccess
KfsAccess	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    public KfsAccess(String metaServerHost, int metaServerPort) throws IOException$/;"	m	class:KfsAccess
KfsAccess	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^public class KfsAccess$/;"	c
KfsCallbackObj	cc/libkfsIO/KfsCallbackObj.h	/^    KfsCallbackObj() : mObjMeth(0) {$/;"	f	class:KFS::KfsCallbackObj
KfsCallbackObj	cc/libkfsIO/KfsCallbackObj.h	/^class KfsCallbackObj : public _force_vfp_to_top {$/;"	c	namespace:KFS
KfsChecksum	cc/libkfsIO/Checksum.cc	/^KfsChecksum(uint32_t chksum, const void* buf, size_t len)$/;"	f	namespace:KFS
KfsClient	cc/libkfsClient/KfsClient.cc	/^KfsClient::KfsClient()$/;"	f	class:KfsClient
KfsClient	cc/libkfsClient/KfsClient.h	/^class KfsClient {$/;"	c	namespace:KFS
KfsClientEnsureInited	cc/libkfsClient/KfsClient.cc	/^static inline void KfsClientEnsureInited()$/;"	f	file:
KfsClientFactory	cc/libkfsClient/KfsClient.cc	/^KfsClientFactory::KfsClientFactory()$/;"	f	class:KfsClientFactory
KfsClientFactory	cc/libkfsClient/KfsClient.h	/^class KfsClientFactory {$/;"	c	namespace:KFS
KfsClientImpl	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::KfsClientImpl()$/;"	f	class:KfsClientImpl
KfsClientImpl	cc/libkfsClient/KfsClientInt.h	/^class KfsClientImpl {$/;"	c	namespace:KFS
KfsClientPtr	cc/libkfsClient/KfsClient.h	/^typedef boost::shared_ptr<KfsClient> KfsClientPtr;$/;"	t	namespace:KFS
KfsFileAttr	cc/libkfsClient/KfsAttr.h	/^    KfsFileAttr() : fileSize(-1) { }$/;"	f	struct:KFS::KfsFileAttr
KfsFileAttr	cc/libkfsClient/KfsAttr.h	/^struct KfsFileAttr {$/;"	s	namespace:KFS
KfsFileAttr	java/org/kosmix/kosmosfs/access/KfsFileAttr.java	/^    public KfsFileAttr() { }$/;"	m	class:KfsFileAttr
KfsFileAttr	java/org/kosmix/kosmosfs/access/KfsFileAttr.java	/^public class KfsFileAttr$/;"	c
KfsInputChannel	java/org/kosmix/kosmosfs/access/KfsInputChannel.java	/^    public KfsInputChannel(long ptr, int fd) $/;"	m	class:KfsInputChannel
KfsInputChannel	java/org/kosmix/kosmosfs/access/KfsInputChannel.java	/^public class KfsInputChannel implements ReadableByteChannel, Positionable$/;"	c
KfsMonOp	cc/tools/MonUtils.h	/^        KfsMonOp(KfsMonOp_t o, int32_t s) :$/;"	f	struct:KFS_MON::KfsMonOp
KfsMonOp	cc/tools/MonUtils.h	/^    struct KfsMonOp {$/;"	s	namespace:KFS_MON
KfsMonOp_t	cc/tools/MonUtils.h	/^    enum KfsMonOp_t {$/;"	g	namespace:KFS_MON
KfsNetClient	cc/libkfsClient/KfsNetClient.cc	/^KfsNetClient::KfsNetClient($/;"	f	class:KFS::KfsNetClient
KfsNetClient	cc/libkfsClient/KfsNetClient.h	/^class KfsNetClient$/;"	c	namespace:KFS
KfsOp	cc/chunk/KfsOps.h	/^    KfsOp (KfsOp_t o, kfsSeq_t s, KfsCallbackObj *c = NULL) :$/;"	f	struct:KFS::KfsOp
KfsOp	cc/chunk/KfsOps.h	/^struct KfsOp : public KfsCallbackObj {$/;"	s	namespace:KFS
KfsOp	cc/libkfsClient/KfsOps.h	/^    KfsOp (KfsOp_t o, kfsSeq_t s) :$/;"	f	struct:KFS::KfsOp
KfsOp	cc/libkfsClient/KfsOps.h	/^struct KfsOp {$/;"	s	namespace:KFS
KfsOp_t	cc/chunk/KfsOps.h	/^enum KfsOp_t {$/;"	g	namespace:KFS
KfsOp_t	cc/libkfsClient/KfsOps.h	/^enum KfsOp_t {$/;"	g	namespace:KFS
KfsOutputChannel	java/org/kosmix/kosmosfs/access/KfsOutputChannel.java	/^    public KfsOutputChannel(long ptr, int fd) $/;"	m	class:KfsOutputChannel
KfsOutputChannel	java/org/kosmix/kosmosfs/access/KfsOutputChannel.java	/^public class KfsOutputChannel implements WritableByteChannel, Positionable$/;"	c
KfsPendingOp	cc/libkfsClient/KfsPendingOp.cc	/^KfsPendingOp::KfsPendingOp($/;"	f	class:KfsPendingOp
KfsPendingOp	cc/libkfsClient/KfsPendingOp.h	/^class KfsPendingOp : public QCRunnable$/;"	c	namespace:KFS
KfsProtocolWorker	cc/libkfsClient/KfsProtocolWorker.cc	/^KfsProtocolWorker::KfsProtocolWorker($/;"	f	class:KFS::KfsProtocolWorker
KfsProtocolWorker	cc/libkfsClient/KfsProtocolWorker.h	/^class KfsProtocolWorker$/;"	c	namespace:KFS
KfsServerAttr	cc/libkfsClient/KfsAttr.h	/^struct KfsServerAttr {$/;"	s	namespace:KFS
KfsTest	java/org/kosmix/kosmosfs/access/KfsTest.java	/^public class KfsTest$/;"	c
Kick	cc/libkfsIO/NetKicker.cc	/^    void Kick()$/;"	f	class:NetKicker::Impl
Kick	cc/libkfsIO/NetKicker.cc	/^NetKicker::Kick()$/;"	f	class:NetKicker
KillRemoteSyncOp	cc/chunk/KfsOps.h	/^    KillRemoteSyncOp(kfsSeq_t s, KfsCallbackObj *owner) :$/;"	f	struct:KFS::KillRemoteSyncOp
KillRemoteSyncOp	cc/chunk/KfsOps.h	/^struct KillRemoteSyncOp : public KfsOp {$/;"	s	namespace:KFS
LEASE_EXPIRE_WINDOW_MSECS	cc/chunk/LeaseClerk.h	/^    static const int LEASE_EXPIRE_WINDOW_MSECS = LEASE_EXPIRE_WINDOW_SECS * 1000;$/;"	m	class:KFS::LeaseClerk
LEASE_EXPIRE_WINDOW_SECS	cc/chunk/LeaseClerk.h	/^    static const int LEASE_EXPIRE_WINDOW_SECS = 30;$/;"	m	class:KFS::LeaseClerk
LEASE_INTERVAL_SECS	cc/common/kfstypes.h	/^const int LEASE_INTERVAL_SECS = 300;$/;"	m	namespace:KFS
LEASE_RENEW_INTERVAL_MSECS	cc/chunk/LeaseClerk.h	/^    static const int LEASE_RENEW_INTERVAL_MSECS = LEASE_RENEW_INTERVAL_SECS * 1000;$/;"	m	class:KFS::LeaseClerk
LEASE_RENEW_INTERVAL_SECS	cc/chunk/LeaseClerk.h	/^    static const int LEASE_RENEW_INTERVAL_SECS = KFS::LEASE_INTERVAL_SECS - 30;$/;"	m	class:KFS::LeaseClerk
LEASE_RENEW_INTERVAL_SECS	cc/libkfsClient/LeaseClerk.h	/^    static const int LEASE_RENEW_INTERVAL_SECS = KFS::LEASE_INTERVAL_SECS - 30;$/;"	m	class:KFS::LeaseClerk
LEASE_RETRY_DELAY_SECS	cc/libkfsClient/KfsClientInt.h	/^const int LEASE_RETRY_DELAY_SECS = 5;$/;"	m	namespace:KFS
LIBIO_I_TIMEOUT_H	cc/libkfsIO/ITimeout.h	27;"	d
LIBKFSCLIENT_CONCURRENCY_H	cc/libkfsClient/concurrency.h	28;"	d
LIBKFSCLIENT_KFSATTR_H	cc/libkfsClient/KfsAttr.h	30;"	d
LIBKFSCLIENT_KFSCLIENTINT_H	cc/libkfsClient/KfsClientInt.h	27;"	d
LIBKFSCLIENT_KFSCLIENT_H	cc/libkfsClient/KfsClient.h	29;"	d
LIBKFSCLIENT_KFSPREFETCHER_H	cc/libkfsClient/KfsAsyncRW.h	31;"	d
LIBKFSCLIENT_LEASECLERK_H	cc/libkfsClient/LeaseClerk.h	29;"	d
LIBKFSCLIENT_UTILS_H	cc/libkfsClient/Utils.h	28;"	d
LIBKFSIO_BUFFEREDSOCKET_H	cc/libkfsIO/BufferedSocket.h	31;"	d
LIBKFSIO_COUNTER_H	cc/libkfsIO/Counter.h	29;"	d
LIBKFSIO_GLOBALS_H	cc/libkfsIO/Globals.h	28;"	d
LIBKFSIO_NETKICKER_H	cc/libkfsIO/NetKicker.h	35;"	d
LOG_ROLLOVER_MAXSEC	cc/meta/logger.h	/^const unsigned int LOG_ROLLOVER_MAXSEC = 600;	\/\/!< max. seconds between CP's\/log rollover$/;"	m	namespace:KFS
LayoutDone	cc/meta/request.cc	/^MetaAllocate::LayoutDone()$/;"	f	class:KFS::MetaAllocate
LayoutEmulator	cc/emulator/LayoutEmulator.h	/^        LayoutEmulator() : mPercentVariationFromMean(0.1), mNumBlksRebalanced(0) {$/;"	f	class:KFS::LayoutEmulator
LayoutEmulator	cc/emulator/LayoutEmulator.h	/^    class LayoutEmulator : public LayoutManager {$/;"	c	namespace:KFS
LayoutManager	cc/meta/LayoutManager.cc	/^LayoutManager::LayoutManager() :$/;"	f	class:LayoutManager
LayoutManager	cc/meta/LayoutManager.h	/^	class LayoutManager {$/;"	c	namespace:KFS
LeafIter	cc/meta/kfstree.h	/^	LeafIter(Node *d, int p): dad(d), pos(p) { }$/;"	f	class:KFS::LeafIter
LeafIter	cc/meta/kfstree.h	/^class LeafIter {$/;"	c	namespace:KFS
LeaseAcquireOp	cc/libkfsClient/KfsOps.h	/^    LeaseAcquireOp(kfsSeq_t s, kfsChunkId_t c, const char *p) :$/;"	f	struct:KFS::LeaseAcquireOp
LeaseAcquireOp	cc/libkfsClient/KfsOps.h	/^struct LeaseAcquireOp : public KfsOp {$/;"	s	namespace:KFS
LeaseCleaner	cc/meta/LeaseCleaner.cc	/^LeaseCleaner::LeaseCleaner() :$/;"	f	class:LeaseCleaner
LeaseCleaner	cc/meta/LeaseCleaner.h	/^class LeaseCleaner : public KfsCallbackObj {$/;"	c	namespace:KFS
LeaseCleanerTimeoutImpl	cc/meta/LeaseCleaner.h	/^	LeaseCleanerTimeoutImpl(LeaseCleaner *l) : mOwner(l) {$/;"	f	class:KFS::LeaseCleanerTimeoutImpl
LeaseCleanerTimeoutImpl	cc/meta/LeaseCleaner.h	/^class LeaseCleanerTimeoutImpl : public ITimeout {$/;"	c	namespace:KFS
LeaseCleanup	cc/meta/LayoutManager.cc	/^LayoutManager::LeaseCleanup()$/;"	f	class:LayoutManager
LeaseClerk	cc/chunk/LeaseClerk.cc	/^LeaseClerk::LeaseClerk()$/;"	f	class:LeaseClerk
LeaseClerk	cc/chunk/LeaseClerk.h	/^class LeaseClerk : public KfsCallbackObj {$/;"	c	namespace:KFS
LeaseClerk	cc/libkfsClient/LeaseClerk.h	/^    LeaseClerk() { };$/;"	f	class:KFS::LeaseClerk
LeaseClerk	cc/libkfsClient/LeaseClerk.h	/^class LeaseClerk {$/;"	c	namespace:KFS
LeaseExpired	cc/meta/LayoutManager.cc	/^	LeaseExpired(time_t n): now(n) { }$/;"	f	class:LeaseExpired
LeaseExpired	cc/meta/LayoutManager.cc	/^class LeaseExpired {$/;"	c	file:
LeaseIdMatcher	cc/meta/LayoutManager.cc	/^	LeaseIdMatcher(int64_t id) : myid(id) { }$/;"	f	class:LeaseIdMatcher
LeaseIdMatcher	cc/meta/LayoutManager.cc	/^class LeaseIdMatcher {$/;"	c	file:
LeaseInfo	cc/meta/LayoutManager.h	/^		LeaseInfo(LeaseType t, int64_t i, ChunkServerPtr &c, const std::string &p, bool append)$/;"	f	struct:KFS::LeaseInfo
LeaseInfo	cc/meta/LayoutManager.h	/^		LeaseInfo(LeaseType t, int64_t i, bool append)$/;"	f	struct:KFS::LeaseInfo
LeaseInfo	cc/meta/LayoutManager.h	/^		LeaseInfo(const LeaseInfo& lease)$/;"	f	struct:KFS::LeaseInfo
LeaseInfo	cc/meta/LayoutManager.h	/^	struct LeaseInfo {$/;"	s	namespace:KFS
LeaseInfo_t	cc/chunk/LeaseClerk.h	/^struct LeaseInfo_t {$/;"	s	namespace:KFS
LeaseInfo_t	cc/libkfsClient/LeaseClerk.h	/^struct LeaseInfo_t {$/;"	s	namespace:KFS
LeaseMap	cc/chunk/LeaseClerk.h	/^typedef std::tr1::unordered_map <kfsChunkId_t, LeaseInfo_t> LeaseMap;$/;"	t	namespace:KFS
LeaseMap	cc/libkfsClient/LeaseClerk.h	/^typedef std::tr1::unordered_map <kfsChunkId_t, LeaseInfo_t> LeaseMap;$/;"	t	namespace:KFS
LeaseMapIter	cc/chunk/LeaseClerk.h	/^typedef std::tr1::unordered_map <kfsChunkId_t, LeaseInfo_t>::iterator LeaseMapIter;$/;"	t	namespace:KFS
LeaseMapIter	cc/libkfsClient/LeaseClerk.h	/^typedef std::tr1::unordered_map <kfsChunkId_t, LeaseInfo_t>::iterator LeaseMapIter;$/;"	t	namespace:KFS
LeaseRelinquish	cc/meta/LayoutManager.cc	/^LayoutManager::LeaseRelinquish(MetaLeaseRelinquish *req)$/;"	f	class:LayoutManager
LeaseRelinquishOp	cc/chunk/KfsOps.h	/^    LeaseRelinquishOp(kfsSeq_t s, kfsChunkId_t c, int64_t l, std::string t) :$/;"	f	struct:KFS::LeaseRelinquishOp
LeaseRelinquishOp	cc/chunk/KfsOps.h	/^struct LeaseRelinquishOp : public KfsOp {$/;"	s	namespace:KFS
LeaseRelinquishOp	cc/libkfsClient/KfsOps.h	/^    LeaseRelinquishOp(kfsSeq_t s, kfsChunkId_t c, int64_t l) :$/;"	f	struct:KFS::LeaseRelinquishOp
LeaseRelinquishOp	cc/libkfsClient/KfsOps.h	/^struct LeaseRelinquishOp : public KfsOp {$/;"	s	namespace:KFS
LeaseRelinquished	cc/libkfsClient/LeaseClerk.cc	/^LeaseClerk::LeaseRelinquished(kfsChunkId_t chunkId)$/;"	f	class:LeaseClerk
LeaseRenew	cc/meta/LayoutManager.cc	/^LayoutManager::LeaseRenew(MetaLeaseRenew *req)$/;"	f	class:LayoutManager
LeaseRenewOp	cc/chunk/KfsOps.h	/^    LeaseRenewOp(kfsSeq_t s, kfsChunkId_t c, int64_t l, std::string t) :$/;"	f	struct:KFS::LeaseRenewOp
LeaseRenewOp	cc/chunk/KfsOps.h	/^struct LeaseRenewOp : public KfsOp {$/;"	s	namespace:KFS
LeaseRenewOp	cc/libkfsClient/KfsOps.h	/^    LeaseRenewOp(kfsSeq_t s, kfsChunkId_t c, int64_t l, const char *p) :$/;"	f	struct:KFS::LeaseRenewOp
LeaseRenewOp	cc/libkfsClient/KfsOps.h	/^struct LeaseRenewOp : public KfsOp {$/;"	s	namespace:KFS
LeaseRenewed	cc/chunk/LeaseClerk.cc	/^LeaseClerk::LeaseRenewed(kfsChunkId_t chunkId)$/;"	f	class:LeaseClerk
LeaseRenewed	cc/libkfsClient/LeaseClerk.cc	/^LeaseClerk::LeaseRenewed(kfsChunkId_t chunkId)$/;"	f	class:LeaseClerk
LeaseRenewer	cc/chunk/LeaseClerk.cc	/^    LeaseRenewer(LeaseClerk *l, time_t n) : lc(l), now(n) { }$/;"	f	class:LeaseRenewer
LeaseRenewer	cc/chunk/LeaseClerk.cc	/^class LeaseRenewer {$/;"	c	file:
LeaseType	cc/meta/kfstypes.h	/^enum LeaseType {$/;"	g	namespace:KFS
List	cc/libkfsIO/NetConnection.h	/^            boost::fast_pool_allocator<NetConnectionPtr> > List;$/;"	t	class:KFS::NetConnection::NetManagerEntry
List	cc/libkfsIO/NetManager.h	/^    typedef NetConnection::NetManagerEntry::List List;$/;"	t	class:KFS::NetManager
List	cc/qcdio/qciobufferpool.cpp	/^    typedef QCDLList<Partition, 0> List;$/;"	t	class:QCIoBufferPool::Partition	file:
ListAdd	cc/libkfsIO/NetErrorSimulator.cc	/^    static void ListAdd($/;"	f	class:KFS::NetErrorSimulator	file:
ListOp	cc/qcdio/qcdllist.h	/^    typedef QCDLListOp<NodeT, ListT> ListOp;$/;"	t	class:QCDLList
ListServerLocations	cc/meta/request.cc	/^	ListServerLocations(ostream &out): os(out) { }$/;"	f	class:KFS::ListServerLocations
ListServerLocations	cc/meta/request.cc	/^class ListServerLocations {$/;"	c	namespace:KFS	file:
Listen	cc/libkfsIO/Acceptor.cc	/^Acceptor::Listen()$/;"	f	class:Acceptor
Listen	cc/libkfsIO/TcpSocket.cc	/^int TcpSocket::Listen(int port)$/;"	f	class:TcpSocket
LoadChunkmap	cc/emulator/LayoutEmulator.cc	/^int LayoutEmulator::LoadChunkmap(const string &chunkLocationFn, bool addChunksToReplicationChecker)$/;"	f	class:LayoutEmulator
LoadRebalancePlan	cc/meta/LayoutManager.cc	/^LayoutManager::LoadRebalancePlan(const string &planFn)$/;"	f	class:LayoutManager
LoadedServerPred	cc/meta/LayoutManager.cc	/^	LoadedServerPred(double m) : maxServerSpaceUtilThreshold(m) { }$/;"	f	class:LoadedServerPred
LoadedServerPred	cc/meta/LayoutManager.cc	/^class LoadedServerPred {$/;"	c	file:
LocateChunk	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::LocateChunk(int fd, int chunkNum)$/;"	f	class:KfsClientImpl
Lock	cc/qcdio/qcmutex.cpp	/^QCMutex::Lock($/;"	f	class:QCMutex
Lock	cc/qcdio/qcmutex.h	/^    bool Lock()$/;"	f	class:QCMutex
Lock	cc/qcdio/qcstutils.h	/^    void Lock()$/;"	f	class:QCStMutexLocker
Lock	cc/qcdio/qcstutils.h	/^    void Lock()$/;"	f	class:QCStMutexUnlocker
Locked	cc/qcdio/qcmutex.h	/^    bool Locked($/;"	f	class:QCMutex
Log	cc/chunk/KfsOps.cc	/^AllocChunkOp::Log(ofstream &ofs)$/;"	f	class:AllocChunkOp
Log	cc/chunk/KfsOps.cc	/^ChangeChunkVersOp::Log(ofstream &ofs)$/;"	f	class:ChangeChunkVersOp
Log	cc/chunk/KfsOps.cc	/^CoalesceBlockOp::Log(ofstream &ofs)$/;"	f	class:CoalesceBlockOp
Log	cc/chunk/KfsOps.cc	/^DeleteChunkOp::Log(ofstream &ofs)$/;"	f	class:DeleteChunkOp
Log	cc/chunk/KfsOps.cc	/^MakeChunkStableOp::Log(ofstream &ofs)$/;"	f	class:MakeChunkStableOp
Log	cc/chunk/KfsOps.cc	/^ReplicateChunkOp::Log(ofstream &ofs)$/;"	f	class:ReplicateChunkOp
Log	cc/chunk/KfsOps.cc	/^TruncateChunkOp::Log(ofstream &ofs)$/;"	f	class:TruncateChunkOp
Log	cc/chunk/KfsOps.cc	/^WriteOp::Log(ofstream &ofs)$/;"	f	class:WriteOp
Log	cc/chunk/KfsOps.h	/^    virtual void Log(std::ofstream &ofs) { };$/;"	f	struct:KFS::KfsOp
LogFileNames	cc/common/BufferedLogWriter.cc	/^    typedef std::vector<string> LogFileNames;$/;"	t	class:KFS::BufferedLogWriter::Impl	file:
LogLevel	cc/common/BufferedLogWriter.h	/^    enum LogLevel$/;"	g	class:KFS::BufferedLogWriter
LogMakeChunkStableDone	cc/meta/LayoutManager.cc	/^LayoutManager::LogMakeChunkStableDone(const MetaLogMakeChunkStable* req)$/;"	f	class:LayoutManager
LogRotater	cc/meta/logger.h	/^	LogRotater(int rotateIntervalSec = 600) {$/;"	f	class:KFS::LogRotater
LogRotater	cc/meta/logger.h	/^class LogRotater : public ITimeout {$/;"	c	namespace:KFS
Logger	cc/chunk/Logger.cc	/^Logger::Logger()$/;"	f	class:Logger
Logger	cc/chunk/Logger.h	/^class Logger {$/;"	c	namespace:KFS
Logger	cc/meta/logger.h	/^	Logger(string d): logdir(d), lognum(-1), nextseq(0), committed(0) { }$/;"	f	class:KFS::Logger
Logger	cc/meta/logger.h	/^class Logger {$/;"	c	namespace:KFS
LoggerTimeoutImpl	cc/chunk/Logger.h	/^    LoggerTimeoutImpl(Logger *log) {$/;"	f	class:KFS::LoggerTimeoutImpl
LoggerTimeoutImpl	cc/chunk/Logger.h	/^class LoggerTimeoutImpl : public ITimeout {$/;"	c	namespace:KFS
Lookup	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::Lookup(kfsFileId_t parentFid, const char *name)$/;"	f	class:KfsClientImpl
Lookup	cc/libkfsClient/WriteAppender.cc	/^    void Lookup()$/;"	f	class:KFS::WriteAppender::Impl	file:
LookupAttr	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::LookupAttr(kfsFileId_t parentFid, const char *filename,$/;"	f	class:KfsClientImpl
LookupFileTableEntry	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::LookupFileTableEntry(const char *pathname)$/;"	f	class:KfsClientImpl
LookupFileTableEntry	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::LookupFileTableEntry(kfsFileId_t parentFid, const char *name)$/;"	f	class:KfsClientImpl
LookupOp	cc/libkfsClient/KfsOps.h	/^    LookupOp(kfsSeq_t s, kfsFileId_t p, const char *f) :$/;"	f	struct:KFS::LookupOp
LookupOp	cc/libkfsClient/KfsOps.h	/^struct LookupOp : public KfsOp {$/;"	s	namespace:KFS
LookupPath	cc/libkfsClient/WriteAppender.cc	/^    void LookupPath()$/;"	f	class:KFS::WriteAppender::Impl	file:
LookupPathOp	cc/libkfsClient/KfsOps.h	/^    LookupPathOp(kfsSeq_t s, kfsFileId_t r, const char *f) :$/;"	f	struct:KFS::LookupPathOp
LookupPathOp	cc/libkfsClient/KfsOps.h	/^struct LookupPathOp : public KfsOp {$/;"	s	namespace:KFS
LowOnBuffersFlush	cc/chunk/AtomicRecordAppender.cc	/^    void LowOnBuffersFlush()$/;"	f	class:KFS::AtomicRecordAppender
Lru	cc/chunk/ChunkManager.h	/^        typedef std::list<LruEntry, boost::fast_pool_allocator<LruEntry> > Lru;$/;"	t	class:KFS::ChunkManager::PendingWrites
LruEntry	cc/chunk/ChunkManager.h	/^            LruEntry($/;"	f	struct:KFS::ChunkManager::PendingWrites::LruEntry
LruEntry	cc/chunk/ChunkManager.h	/^            LruEntry()$/;"	f	struct:KFS::ChunkManager::PendingWrites::LruEntry
LruEntry	cc/chunk/ChunkManager.h	/^        struct LruEntry$/;"	s	class:KFS::ChunkManager::PendingWrites
LruIterator	cc/chunk/ChunkManager.h	/^        class LruIterator : public Lru::iterator$/;"	c	class:KFS::ChunkManager::PendingWrites
LruUpdate	cc/chunk/ChunkManager.cc	/^inline void ChunkInfoHandle::LruUpdate(ChunkInfoHandle** chunkInfoLists) {$/;"	f	class:KFS::ChunkInfoHandle
LruUpdate	cc/chunk/ChunkManager.cc	/^inline void ChunkManager::LruUpdate(ChunkInfoHandle& cih) {$/;"	f	class:KFS::ChunkManager
MATCH_ANY	cc/meta/base.h	/^	static const KeyData MATCH_ANY = -1;$/;"	m	class:KFS::Key
MAX_BYTES_PER_READ_IO	cc/libkfsClient/KfsClientInt.h	/^const size_t MAX_BYTES_PER_READ_IO = MAX_BYTES_PER_WRITE_IO;$/;"	m	namespace:KFS
MAX_BYTES_PER_WRITE_IO	cc/libkfsClient/KfsClientInt.h	/^const size_t MAX_BYTES_PER_WRITE_IO = ((1u << 20) + CHECKSUM_BLOCKSIZE - 1) \/$/;"	m	namespace:KFS
MAX_CHUNK_CHECKSUM_BLOCKS	cc/chunk/Chunk.h	/^const uint32_t MAX_CHUNK_CHECKSUM_BLOCKS = CHUNKSIZE \/  CHECKSUM_BLOCKSIZE;$/;"	m	namespace:KFS
MAX_CONCURRENT_PREFETCHES	cc/libkfsClient/KfsAsyncRW.cc	/^static const int MAX_CONCURRENT_PREFETCHES = 16;$/;"	v	file:
MAX_CONCURRENT_READ_REPLICATIONS_PER_NODE	cc/meta/LayoutManager.cc	/^int MAX_CONCURRENT_READ_REPLICATIONS_PER_NODE = 10;$/;"	v
MAX_CONCURRENT_WRITE_REPLICATIONS_PER_NODE	cc/meta/LayoutManager.cc	/^int MAX_CONCURRENT_WRITE_REPLICATIONS_PER_NODE = 5;$/;"	v
MAX_EVENT_SLOTS	cc/libkfsIO/EventManager.h	/^    static const int MAX_EVENT_SLOTS = 2000;$/;"	m	class:KFS::EventManager
MAX_FILENAME_LEN	cc/chunk/Chunk.h	/^const size_t MAX_FILENAME_LEN = 256;$/;"	m	namespace:KFS
MAX_FILENAME_LEN	cc/libkfsClient/KfsClient.h	/^const size_t MAX_FILENAME_LEN = 256;$/;"	m	namespace:KFS
MAX_FILES	cc/libkfsClient/KfsClientInt.h	/^    static const int MAX_FILES = 512000;$/;"	m	class:KFS::KfsClientImpl
MAX_FILE_NAME_LEN	cc/libkfsIO/DiskManager.h	/^const int MAX_FILE_NAME_LEN = 256;$/;"	m	namespace:KFS
MAX_FILE_NAME_LEN	cc/tests/KfsDirFileTester_main.cc	37;"	d	file:
MAX_FILE_NAME_LEN	cc/tests/KfsReader_main.cc	37;"	d	file:
MAX_FILE_NAME_LEN	cc/tests/KfsSeekWrite_main.cc	40;"	d	file:
MAX_FILE_NAME_LEN	cc/tests/KfsTrunc_main.cc	36;"	d	file:
MAX_FILE_NAME_LEN	cc/tests/KfsWriter_main.cc	37;"	d	file:
MAX_FILE_NAME_LEN	cc/tools/cpfromkfs_main.cc	46;"	d	file:
MAX_FILE_NAME_LEN	cc/tools/cptokfs_main.cc	50;"	d	file:
MAX_FILE_SIZE	cc/tests/KfsDirFileTester_main.cc	36;"	d	file:
MAX_FILE_SIZE	cc/tests/KfsReader_main.cc	36;"	d	file:
MAX_FILE_SIZE	cc/tests/KfsSeekWrite_main.cc	39;"	d	file:
MAX_FILE_SIZE	cc/tests/KfsTrunc_main.cc	35;"	d	file:
MAX_FILE_SIZE	cc/tests/KfsWriter_main.cc	36;"	d	file:
MAX_IO_INFO_PER_PKT	cc/telemetry/packet.h	/^    static const uint32_t MAX_IO_INFO_PER_PKT = 32;$/;"	m	namespace:KFS
MAX_LINE_LENGTH	cc/chunk/Logger.cc	/^const int MAX_LINE_LENGTH = 32768;$/;"	v
MAX_NODES_PER_PKT	cc/telemetry/packet.h	/^    static const int MAX_NODES_PER_PKT = 32;$/;"	m	namespace:KFS
MAX_PENDING_RPC_PER_CLIENT	cc/common/kfstypes.h	/^const uint32_t MAX_PENDING_RPC_PER_CLIENT = 2000;$/;"	m	namespace:KFS
MAX_READOP_RPC_HDR_LEN	cc/libkfsClient/KfsAsyncRW.cc	/^static const int MAX_READOP_RPC_HDR_LEN = 1024;$/;"	v	file:
MAX_REPLICAS_PER_FILE	cc/common/kfstypes.h	/^const short int MAX_REPLICAS_PER_FILE = 64; \/\/!< max. replicas per chunk of file$/;"	m	namespace:KFS
MAX_RPC_HEADER_LEN	cc/common/kfstypes.h	/^const int MAX_RPC_HEADER_LEN = 16u << 10; \/\/!< Max length of header in RPC req\/response$/;"	m	namespace:KFS
MAX_SERVER_SPACE_UTIL_THRESHOLD	cc/meta/LayoutManager.h	/^	const float MAX_SERVER_SPACE_UTIL_THRESHOLD = 0.9;$/;"	m	namespace:KFS
MAX_TIME_FOR_CHUNK_REPLICATION_CHECK	cc/meta/LayoutManager.cc	/^const float MAX_TIME_FOR_CHUNK_REPLICATION_CHECK = 0.5;$/;"	v
MAX_TIME_TO_FIND_ADDL_REPLICATION_WORK	cc/meta/LayoutManager.cc	/^const float MAX_TIME_TO_FIND_ADDL_REPLICATION_WORK = 0.005;$/;"	v
META_ALLOCATE	cc/meta/request.h	/^	META_ALLOCATE,$/;"	e	enum:KFS::MetaOp
META_BEGIN_MAKE_CHUNK_STABLE	cc/meta/request.h	/^        META_BEGIN_MAKE_CHUNK_STABLE,$/;"	e	enum:KFS::MetaOp
META_BYE	cc/meta/request.h	/^	META_BYE,  \/\/!< Internally generated op whenever a chunkserver goes down$/;"	e	enum:KFS::MetaOp
META_CHANGE_CHUNKVERSIONINC	cc/meta/request.h	/^	META_CHANGE_CHUNKVERSIONINC,$/;"	e	enum:KFS::MetaOp
META_CHANGE_FILE_REPLICATION	cc/meta/request.h	/^	META_CHANGE_FILE_REPLICATION, \/\/! < Client is asking for a change in file's replication factor$/;"	e	enum:KFS::MetaOp
META_CHECK_LEASES	cc/meta/request.h	/^	META_CHECK_LEASES, \/\/! < Check all the leases and clear out expired ones$/;"	e	enum:KFS::MetaOp
META_CHILDPROCESSTRACKER_H	cc/meta/ChildProcessTracker.h	28;"	d
META_CHUNKREPLICATOR_H	cc/meta/ChunkReplicator.h	32;"	d
META_CHUNKSERVERFACTORY_H	cc/meta/ChunkServerFactory.h	30;"	d
META_CHUNKSERVERHEARTBEATER_H	cc/meta/ChunkServerHeartbeater.h	27;"	d
META_CHUNKSERVER_H	cc/meta/ChunkServer.h	36;"	d
META_CHUNK_ALLOCATE	cc/meta/request.h	/^	META_CHUNK_ALLOCATE, \/\/!< Allocate chunk RPC from meta->chunk$/;"	e	enum:KFS::MetaOp
META_CHUNK_COALESCE_BLOCK	cc/meta/request.h	/^	META_CHUNK_COALESCE_BLOCK, \/\/!< Notify a chunkserver to coalesce a chunk from file to another$/;"	e	enum:KFS::MetaOp
META_CHUNK_CORRUPT	cc/meta/request.h	/^	META_CHUNK_CORRUPT, \/\/!< Chunkserver is notifying us that a chunk is corrupt$/;"	e	enum:KFS::MetaOp
META_CHUNK_DELETE	cc/meta/request.h	/^	META_CHUNK_DELETE,  \/\/!< Delete chunk RPC from meta->chunk$/;"	e	enum:KFS::MetaOp
META_CHUNK_HEARTBEAT	cc/meta/request.h	/^	META_CHUNK_HEARTBEAT, \/\/!< Periodic heartbeat from meta->chunk$/;"	e	enum:KFS::MetaOp
META_CHUNK_MAKE_STABLE	cc/meta/request.h	/^	META_CHUNK_MAKE_STABLE, \/\/!< Notify a chunkserver to make a chunk stable$/;"	e	enum:KFS::MetaOp
META_CHUNK_REPLICATE	cc/meta/request.h	/^	META_CHUNK_REPLICATE, \/\/!< Ask chunkserver to replicate a chunk$/;"	e	enum:KFS::MetaOp
META_CHUNK_REPLICATION_CHECK	cc/meta/request.h	/^	META_CHUNK_REPLICATION_CHECK, \/\/!< Internally generated$/;"	e	enum:KFS::MetaOp
META_CHUNK_RETIRE	cc/meta/request.h	/^	META_CHUNK_RETIRE,$/;"	e	enum:KFS::MetaOp
META_CHUNK_SERVER_RESTART	cc/meta/request.h	/^        META_CHUNK_SERVER_RESTART,$/;"	e	enum:KFS::MetaOp
META_CHUNK_SET_PROPERTIES	cc/meta/request.h	/^        META_CHUNK_SET_PROPERTIES,$/;"	e	enum:KFS::MetaOp
META_CHUNK_SIZE	cc/meta/request.h	/^	META_CHUNK_SIZE, \/\/!< Ask chunkserver for the size of a chunk$/;"	e	enum:KFS::MetaOp
META_CHUNK_STALENOTIFY	cc/meta/request.h	/^	META_CHUNK_STALENOTIFY, \/\/!< Stale chunk notification RPC from meta->chunk$/;"	e	enum:KFS::MetaOp
META_CHUNK_TRUNCATE	cc/meta/request.h	/^	META_CHUNK_TRUNCATE, \/\/!< Truncate chunk RPC from meta->chunk$/;"	e	enum:KFS::MetaOp
META_CHUNK_VERSCHANGE	cc/meta/request.h	/^	META_CHUNK_VERSCHANGE, \/\/!< Notify chunkserver of version # change from meta->chunk$/;"	e	enum:KFS::MetaOp
META_CLIENTMANAGER_H	cc/meta/ClientManager.h	29;"	d
META_CLIENTSM_H	cc/meta/ClientSM.h	29;"	d
META_COALESCE_BLOCKS	cc/meta/request.h	/^	META_COALESCE_BLOCKS, \/\/!< Client is asking for blocks from one file to be coalesced with another$/;"	e	enum:KFS::MetaOp
META_CPBIT	cc/meta/base.h	/^static const int META_CPBIT = 1;\/\/!< CP parity bit$/;"	m	namespace:KFS
META_CREATE	cc/meta/request.h	/^	META_CREATE,$/;"	e	enum:KFS::MetaOp
META_DUMP_CHUNKREPLICATIONCANDIDATES	cc/meta/request.h	/^	META_DUMP_CHUNKREPLICATIONCANDIDATES, \/\/! < Dump out the list of chunks being re-replicated$/;"	e	enum:KFS::MetaOp
META_DUMP_CHUNKTOSERVERMAP	cc/meta/request.h	/^	META_DUMP_CHUNKTOSERVERMAP, \/\/! < Dump out the chunk -> location map$/;"	e	enum:KFS::MetaOp
META_EXECUTE_REBALANCEPLAN	cc/meta/request.h	/^	META_EXECUTE_REBALANCEPLAN,$/;"	e	enum:KFS::MetaOp
META_FSCK	cc/meta/request.h	/^	META_FSCK, \/\/!< Check all blocks and report files that have missing blocks$/;"	e	enum:KFS::MetaOp
META_GETALLOC	cc/meta/request.h	/^	META_GETALLOC,$/;"	e	enum:KFS::MetaOp
META_GETLAYOUT	cc/meta/request.h	/^	META_GETLAYOUT,$/;"	e	enum:KFS::MetaOp
META_GET_CHUNK_SERVERS_COUNTERS	cc/meta/request.h	/^        META_GET_CHUNK_SERVERS_COUNTERS,$/;"	e	enum:KFS::MetaOp
META_HELLO	cc/meta/request.h	/^	META_HELLO,  \/\/!< Hello RPC sent by chunkserver on startup$/;"	e	enum:KFS::MetaOp
META_LAYOUTMANAGER_H	cc/meta/LayoutManager.h	32;"	d
META_LEASECLEANER_H	cc/meta/LeaseCleaner.h	28;"	d
META_LEASE_ACQUIRE	cc/meta/request.h	/^	META_LEASE_ACQUIRE,$/;"	e	enum:KFS::MetaOp
META_LEASE_CLEANUP	cc/meta/request.h	/^	META_LEASE_CLEANUP,$/;"	e	enum:KFS::MetaOp
META_LEASE_RELINQUISH	cc/meta/request.h	/^	META_LEASE_RELINQUISH,$/;"	e	enum:KFS::MetaOp
META_LEASE_RENEW	cc/meta/request.h	/^	META_LEASE_RENEW,$/;"	e	enum:KFS::MetaOp
META_LEVEL1	cc/meta/base.h	/^static const int META_LEVEL1 = 8; \/\/!< children are leaves$/;"	m	namespace:KFS
META_LOG_MAKE_CHUNK_STABLE	cc/meta/request.h	/^        META_LOG_MAKE_CHUNK_STABLE, \/\/!< Emit log record with chunk length and checksum$/;"	e	enum:KFS::MetaOp
META_LOG_MAKE_CHUNK_STABLE_DONE	cc/meta/request.h	/^	META_LOG_MAKE_CHUNK_STABLE_DONE, \/\/!< Emit log record with successful completion of make chunk stable.$/;"	e	enum:KFS::MetaOp
META_LOOKUP	cc/meta/request.h	/^	META_LOOKUP,$/;"	e	enum:KFS::MetaOp
META_LOOKUP_PATH	cc/meta/request.h	/^	META_LOOKUP_PATH,$/;"	e	enum:KFS::MetaOp
META_MKDIR	cc/meta/request.h	/^	META_MKDIR,$/;"	e	enum:KFS::MetaOp
META_NETDISPATCH_H	cc/meta/NetDispatch.h	29;"	d
META_NEW	cc/meta/base.h	/^static const int META_NEW = 2;	\/\/!< new since start of CP$/;"	m	namespace:KFS
META_NUM_OPS_COUNT	cc/meta/request.h	/^        META_NUM_OPS_COUNT \/\/ must be the last one$/;"	e	enum:KFS::MetaOp
META_OPEN_FILES	cc/meta/request.h	/^	META_OPEN_FILES, \/\/!< Print out open files---for which there is a valid read\/write lease$/;"	e	enum:KFS::MetaOp
META_PING	cc/meta/request.h	/^	META_PING, \/\/!< Print out chunkserves and their configs$/;"	e	enum:KFS::MetaOp
META_READDIR	cc/meta/request.h	/^	META_READDIR,$/;"	e	enum:KFS::MetaOp
META_READDIRPLUS	cc/meta/request.h	/^	META_READDIRPLUS,$/;"	e	enum:KFS::MetaOp
META_READ_CONFIG	cc/meta/request.h	/^	META_READ_CONFIG,$/;"	e	enum:KFS::MetaOp
META_RECOMPUTE_DIRSIZE	cc/meta/request.h	/^	META_RECOMPUTE_DIRSIZE, \/\/! < Do a top-down size update$/;"	e	enum:KFS::MetaOp
META_REMOVE	cc/meta/request.h	/^	META_REMOVE,$/;"	e	enum:KFS::MetaOp
META_RENAME	cc/meta/request.h	/^	META_RENAME,$/;"	e	enum:KFS::MetaOp
META_RETIRE_CHUNKSERVER	cc/meta/request.h	/^	META_RETIRE_CHUNKSERVER,$/;"	e	enum:KFS::MetaOp
META_RMDIR	cc/meta/request.h	/^	META_RMDIR,$/;"	e	enum:KFS::MetaOp
META_ROOT	cc/meta/base.h	/^static const int META_ROOT = 4;	\/\/!< root node$/;"	m	namespace:KFS
META_SETMTIME	cc/meta/request.h	/^	META_SETMTIME, \/\/!< Set the mtime on a specific file to support cp -p$/;"	e	enum:KFS::MetaOp
META_SET_CHUNK_SERVERS_PROPERTIES	cc/meta/request.h	/^	META_SET_CHUNK_SERVERS_PROPERTIES,$/;"	e	enum:KFS::MetaOp
META_SKIP	cc/meta/base.h	/^static const int META_SKIP = 16; \/\/!< exclude from current CP$/;"	m	namespace:KFS
META_STATS	cc/meta/request.h	/^	META_STATS, \/\/!< Print out whatever statistics\/counters we have$/;"	e	enum:KFS::MetaOp
META_TOGGLE_REBALANCING	cc/meta/request.h	/^	META_TOGGLE_REBALANCING,$/;"	e	enum:KFS::MetaOp
META_TOGGLE_WORM	cc/meta/request.h	/^	META_TOGGLE_WORM, \/\/!< Toggle metaserver's WORM mode$/;"	e	enum:KFS::MetaOp
META_TRUNCATE	cc/meta/request.h	/^	META_TRUNCATE,$/;"	e	enum:KFS::MetaOp
META_UPSERVERS	cc/meta/request.h	/^	META_UPSERVERS, \/\/!< Print out live chunk servers$/;"	e	enum:KFS::MetaOp
MIN_BYTES_PIPELINE_IO	cc/libkfsClient/KfsClientInt.h	/^const size_t MIN_BYTES_PIPELINE_IO = CHECKSUM_BLOCKSIZE * 16 * 4;$/;"	m	namespace:KFS
MIN_FILE_SIZE	cc/tests/KfsDirFileTester_main.cc	35;"	d	file:
MIN_FILE_SIZE	cc/tests/KfsReader_main.cc	35;"	d	file:
MIN_FILE_SIZE	cc/tests/KfsSeekWrite_main.cc	38;"	d	file:
MIN_FILE_SIZE	cc/tests/KfsTrunc_main.cc	34;"	d	file:
MIN_FILE_SIZE	cc/tests/KfsWriter_main.cc	35;"	d	file:
MIN_SERVER_SPACE_UTIL_THRESHOLD	cc/meta/LayoutManager.h	/^	const float MIN_SERVER_SPACE_UTIL_THRESHOLD = 0.3;$/;"	m	namespace:KFS
MOD_ADLER	cc/libkfsIO/Checksum.h	/^const uint32_t MOD_ADLER = 65521;$/;"	m	namespace:KFS
MSG_LEN	cc/telemetry/packet.h	/^    static const int MSG_LEN = 32;$/;"	m	namespace:KFS
MainLoop	cc/chunk/ChunkServer.cc	/^ChunkServer::MainLoop(int clientAcceptPort, const string & serverHostname)$/;"	f	class:ChunkServer
MainLoop	cc/chunk/Logger.cc	/^Logger::MainLoop()$/;"	f	class:Logger
MainLoop	cc/libkfsIO/NetManager.cc	/^NetManager::MainLoop()$/;"	f	class:NetManager
MakeBuffersFull	cc/libkfsIO/IOBuffer.cc	/^void IOBuffer::MakeBuffersFull()$/;"	f	class:IOBuffer
MakeChunkInfoFromPathname	cc/chunk/ChunkManager.cc	/^ChunkManager::MakeChunkInfoFromPathname(const string &pathname, off_t filesz, ChunkInfoHandle **result)$/;"	f	class:KFS::ChunkManager
MakeChunkPathname	cc/chunk/ChunkManager.cc	/^ChunkManager::MakeChunkPathname(ChunkInfoHandle *cih)$/;"	f	class:KFS::ChunkManager
MakeChunkPathname	cc/chunk/ChunkManager.cc	/^ChunkManager::MakeChunkPathname(const string &chunkdir, kfsFileId_t fid, kfsChunkId_t chunkId, kfsSeq_t chunkVersion)$/;"	f	class:KFS::ChunkManager
MakeChunkStable	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppendManager::MakeChunkStable(MakeChunkStableOp* op)$/;"	f	class:KFS::AtomicRecordAppendManager
MakeChunkStable	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppender::MakeChunkStable(MakeChunkStableOp *op \/* = 0 *\/)$/;"	f	class:KFS::AtomicRecordAppender
MakeChunkStable	cc/chunk/ChunkManager.cc	/^ChunkManager::MakeChunkStable(kfsChunkId_t chunkId)$/;"	f	class:KFS::ChunkManager
MakeChunkStable	cc/meta/ChunkServer.cc	/^ChunkServer::MakeChunkStable(fid_t fid, chunkId_t chunkId, seq_t chunkVersion,$/;"	f	class:ChunkServer
MakeChunkStable	cc/meta/LayoutManager.cc	/^	MakeChunkStable(fid_t f, chunkId_t c, seq_t v,$/;"	f	class:MakeChunkStable
MakeChunkStable	cc/meta/LayoutManager.cc	/^class MakeChunkStable$/;"	c	file:
MakeChunkStableDone	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppender::MakeChunkStableDone()$/;"	f	class:KFS::AtomicRecordAppender
MakeChunkStableDone	cc/meta/LayoutManager.cc	/^LayoutManager::MakeChunkStableDone(const MetaChunkMakeStable* req)$/;"	f	class:LayoutManager
MakeChunkStableInfo	cc/meta/LayoutManager.h	/^		MakeChunkStableInfo($/;"	f	struct:KFS::MakeChunkStableInfo
MakeChunkStableInfo	cc/meta/LayoutManager.h	/^	struct MakeChunkStableInfo {$/;"	s	namespace:KFS
MakeChunkStableInit	cc/meta/LayoutManager.cc	/^LayoutManager::MakeChunkStableInit($/;"	f	class:LayoutManager
MakeChunkStableOp	cc/chunk/KfsOps.h	/^    MakeChunkStableOp(kfsSeq_t s) :$/;"	f	struct:KFS::MakeChunkStableOp
MakeChunkStableOp	cc/chunk/KfsOps.h	/^struct MakeChunkStableOp : public KfsOp {$/;"	s	namespace:KFS
MakeCkptFilename	cc/chunk/Logger.cc	/^Logger::MakeCkptFilename()$/;"	f	class:Logger
MakeCommitAckServers	cc/chunk/AtomicRecordAppender.cc	/^    static std::string MakeCommitAckServers($/;"	f	class:KFS::AtomicRecordAppender	file:
MakeKfsLeafDir	cc/tools/KfsToolsCommon.cc	/^KFS::tools::MakeKfsLeafDir(KfsClientPtr kfsClient, const string &sourcePath, string &kfsPath)$/;"	f	class:KFS::tools
MakeKfsLeafDir	cc/tools/cptokfs_main.cc	/^MakeKfsLeafDir(const string &sourcePath, string &kfsPath)$/;"	f
MakeLatestCkptFilename	cc/chunk/Logger.cc	/^Logger::MakeLatestCkptFilename()$/;"	f	class:Logger
MakeLogFilename	cc/chunk/Logger.cc	/^Logger::MakeLogFilename()$/;"	f	class:Logger
MakeName	cc/common/BufferedLogWriter.cc	/^    static string MakeName($/;"	f	class:KFS::BufferedLogWriter::Impl	file:
MakeStaleChunkPathname	cc/chunk/ChunkManager.cc	/^ChunkManager::MakeStaleChunkPathname(ChunkInfoHandle *cih)$/;"	f	class:KFS::ChunkManager
Map	cc/meta/LayoutManager.h	/^		> Map;$/;"	t	class:KFS::ARAChunkCache
Map	cc/meta/LayoutManager.h	/^        	> Map;$/;"	t	class:KFS::CSMap
MapDumper	cc/meta/LayoutManager.cc	/^	MapDumper(ofstream &o) : ofs(o) { }$/;"	f	class:MapDumper
MapDumper	cc/meta/LayoutManager.cc	/^class MapDumper {$/;"	c	file:
MapDumperStream	cc/meta/LayoutManager.cc	/^	MapDumperStream(ostringstream &o) : ofs(o) { }$/;"	f	class:MapDumperStream
MapDumperStream	cc/meta/LayoutManager.cc	/^class MapDumperStream {$/;"	c	file:
MapPurger	cc/meta/LayoutManager.cc	/^	MapPurger(ReplicationCandidates &c, ARAChunkCache& ac, const ChunkServer *t)$/;"	f	class:MapPurger
MapPurger	cc/meta/LayoutManager.cc	/^class MapPurger {$/;"	c	file:
MapRetirer	cc/meta/LayoutManager.cc	/^	MapRetirer(ReplicationCandidates &c, ChunkServer *t):$/;"	f	class:MapRetirer
MapRetirer	cc/meta/LayoutManager.cc	/^class MapRetirer {$/;"	c	file:
MarkChunkStale	cc/chunk/ChunkManager.cc	/^ChunkManager::MarkChunkStale(ChunkInfoHandle *cih)$/;"	f	class:KFS::ChunkManager
MarkServerDown	cc/emulator/LayoutEmulator.cc	/^LayoutEmulator::MarkServerDown(const ServerLocation &loc)$/;"	f	class:LayoutEmulator
MatchServerByHost	cc/meta/LayoutManager.cc	/^	MatchServerByHost(const string &s) : host(s) { }$/;"	f	class:MatchServerByHost
MatchServerByHost	cc/meta/LayoutManager.cc	/^class MatchServerByHost {$/;"	c	file:
MatchingServer	cc/emulator/LayoutEmulator.cc	/^	MatchingServer(const ServerLocation &l) : loc(l) { }$/;"	f	class:MatchingServer
MatchingServer	cc/emulator/LayoutEmulator.cc	/^class MatchingServer {$/;"	c	file:
MatchingServer	cc/libkfsClient/KfsClient.cc	/^    MatchingServer(const ServerLocation &l) : loc(l) { }$/;"	f	class:MatchingServer
MatchingServer	cc/libkfsClient/KfsClient.cc	/^class MatchingServer {$/;"	c	file:
MatchingServer	cc/meta/ChunkServer.h	/^		bool MatchingServer(const ServerLocation &loc) const {$/;"	f	class:KFS::ChunkServer
MatchingServer	cc/meta/LayoutManager.cc	/^	MatchingServer(const ServerLocation &l) : loc(l) { }$/;"	f	class:MatchingServer
MatchingServer	cc/meta/LayoutManager.cc	/^class MatchingServer {$/;"	c	file:
Max	cc/qcdio/qcdiskqueue.cpp	/^    template <typename T> T static Max($/;"	f	class:QCDiskQueue::Queue	file:
MaxAvailable	cc/libkfsIO/IOBuffer.cc	/^inline int IOBufferData::MaxAvailable(int numBytes) const$/;"	f	class:IOBufferData
MaxConsumable	cc/libkfsIO/IOBuffer.cc	/^inline int IOBufferData::MaxConsumable(int numBytes) const$/;"	f	class:IOBufferData
MaxSize	cc/qcdio/qcunittest.cpp	/^        int MaxSize() const$/;"	f	class:QCDiskQueueTest::Iterator
Meta	cc/meta/meta.h	/^	Meta(MetaType t, fid_t id): MetaNode(t), fid(id) { }$/;"	f	class:KFS::Meta
Meta	cc/meta/meta.h	/^class Meta: public MetaNode {$/;"	c	namespace:KFS
MetaAllocate	cc/meta/request.h	/^	MetaAllocate(seq_t s, int pv, fid_t f, chunkOff_t o):$/;"	f	struct:KFS::MetaAllocate
MetaAllocate	cc/meta/request.h	/^struct MetaAllocate: public MetaRequest {$/;"	s	namespace:KFS
MetaBeginMakeChunkStable	cc/meta/request.h	/^	MetaBeginMakeChunkStable(seq_t n, ChunkServer *s,$/;"	f	struct:KFS::MetaBeginMakeChunkStable
MetaBeginMakeChunkStable	cc/meta/request.h	/^struct MetaBeginMakeChunkStable : public MetaChunkRequest {$/;"	s	namespace:KFS
MetaBye	cc/meta/request.h	/^	MetaBye(seq_t s, ChunkServerPtr c):$/;"	f	struct:KFS::MetaBye
MetaBye	cc/meta/request.h	/^struct MetaBye: public MetaRequest {$/;"	s	namespace:KFS
MetaChangeChunkVersionInc	cc/meta/request.h	/^	MetaChangeChunkVersionInc(seq_t n, MetaRequest *r):$/;"	f	struct:KFS::MetaChangeChunkVersionInc
MetaChangeChunkVersionInc	cc/meta/request.h	/^struct MetaChangeChunkVersionInc : public MetaRequest {$/;"	s	namespace:KFS
MetaChangeFileReplication	cc/meta/request.h	/^	MetaChangeFileReplication(seq_t s, int pv, fid_t f, int16_t n):$/;"	f	struct:KFS::MetaChangeFileReplication
MetaChangeFileReplication	cc/meta/request.h	/^struct MetaChangeFileReplication: public MetaRequest {$/;"	s	namespace:KFS
MetaCheckLeases	cc/meta/request.h	/^	MetaCheckLeases(seq_t s, int pv):$/;"	f	struct:KFS::MetaCheckLeases
MetaCheckLeases	cc/meta/request.h	/^struct MetaCheckLeases: public MetaRequest {$/;"	s	namespace:KFS
MetaChunkAllocate	cc/meta/request.h	/^	MetaChunkAllocate(seq_t n, MetaAllocate *r, ChunkServer *s, int64_t l):$/;"	f	struct:KFS::MetaChunkAllocate
MetaChunkAllocate	cc/meta/request.h	/^struct MetaChunkAllocate: public MetaChunkRequest {$/;"	s	namespace:KFS
MetaChunkCorrupt	cc/meta/request.h	/^	MetaChunkCorrupt(seq_t s, fid_t f, chunkId_t c):$/;"	f	struct:KFS::MetaChunkCorrupt
MetaChunkCorrupt	cc/meta/request.h	/^struct MetaChunkCorrupt: public MetaRequest {$/;"	s	namespace:KFS
MetaChunkDelete	cc/meta/request.h	/^	MetaChunkDelete(seq_t n, ChunkServer *s, chunkId_t c):$/;"	f	struct:KFS::MetaChunkDelete
MetaChunkDelete	cc/meta/request.h	/^struct MetaChunkDelete: public MetaChunkRequest {$/;"	s	namespace:KFS
MetaChunkHeartbeat	cc/meta/request.h	/^	MetaChunkHeartbeat(seq_t n, ChunkServer *s):$/;"	f	struct:KFS::MetaChunkHeartbeat
MetaChunkHeartbeat	cc/meta/request.h	/^struct MetaChunkHeartbeat: public MetaChunkRequest {$/;"	s	namespace:KFS
MetaChunkInfo	cc/meta/meta.h	/^	MetaChunkInfo(fid_t file, chunkOff_t off, chunkId_t id, seq_t v):$/;"	f	class:KFS::MetaChunkInfo
MetaChunkInfo	cc/meta/meta.h	/^class MetaChunkInfo: public Meta {$/;"	c	namespace:KFS
MetaChunkMakeStable	cc/meta/request.h	/^	MetaChunkMakeStable($/;"	f	struct:KFS::MetaChunkMakeStable
MetaChunkMakeStable	cc/meta/request.h	/^struct MetaChunkMakeStable: public MetaChunkRequest {$/;"	s	namespace:KFS
MetaChunkReplicate	cc/meta/request.h	/^	MetaChunkReplicate(seq_t n, ChunkServer *s,$/;"	f	struct:KFS::MetaChunkReplicate
MetaChunkReplicate	cc/meta/request.h	/^struct MetaChunkReplicate: public MetaChunkRequest {$/;"	s	namespace:KFS
MetaChunkReplicationCheck	cc/meta/request.h	/^	MetaChunkReplicationCheck(seq_t s, KfsCallbackObj *c):$/;"	f	struct:KFS::MetaChunkReplicationCheck
MetaChunkReplicationCheck	cc/meta/request.h	/^struct MetaChunkReplicationCheck : public MetaRequest {$/;"	s	namespace:KFS
MetaChunkRequest	cc/meta/request.h	/^	MetaChunkRequest(MetaOp o, seq_t s, bool mu, ChunkServer *c):$/;"	f	struct:KFS::MetaChunkRequest
MetaChunkRequest	cc/meta/request.h	/^struct MetaChunkRequest: public MetaRequest {$/;"	s	namespace:KFS
MetaChunkRetire	cc/meta/request.h	/^	MetaChunkRetire(seq_t n, ChunkServer *s):$/;"	f	struct:KFS::MetaChunkRetire
MetaChunkRetire	cc/meta/request.h	/^struct MetaChunkRetire: public MetaChunkRequest {$/;"	s	namespace:KFS
MetaChunkServerRestart	cc/meta/request.h	/^	MetaChunkServerRestart(seq_t n, ChunkServer *s)$/;"	f	struct:KFS::MetaChunkServerRestart
MetaChunkServerRestart	cc/meta/request.h	/^struct MetaChunkServerRestart : public MetaChunkRequest {$/;"	s	namespace:KFS
MetaChunkSetProperties	cc/meta/request.h	/^	MetaChunkSetProperties($/;"	f	struct:KFS::MetaChunkSetProperties
MetaChunkSetProperties	cc/meta/request.h	/^struct MetaChunkSetProperties: public MetaChunkRequest {$/;"	s	namespace:KFS
MetaChunkSize	cc/meta/request.h	/^	MetaChunkSize(seq_t n, ChunkServer *s, fid_t f, chunkId_t c, $/;"	f	struct:KFS::MetaChunkSize
MetaChunkSize	cc/meta/request.h	/^struct MetaChunkSize: public MetaChunkRequest {$/;"	s	namespace:KFS
MetaChunkStaleNotify	cc/meta/request.h	/^	MetaChunkStaleNotify(seq_t n, ChunkServer *s):$/;"	f	struct:KFS::MetaChunkStaleNotify
MetaChunkStaleNotify	cc/meta/request.h	/^struct MetaChunkStaleNotify: public MetaChunkRequest {$/;"	s	namespace:KFS
MetaChunkTruncate	cc/meta/request.h	/^	MetaChunkTruncate(seq_t n, ChunkServer *s, chunkId_t c, size_t sz):$/;"	f	struct:KFS::MetaChunkTruncate
MetaChunkTruncate	cc/meta/request.h	/^struct MetaChunkTruncate: public MetaChunkRequest {$/;"	s	namespace:KFS
MetaChunkVersChange	cc/meta/request.h	/^	MetaChunkVersChange(seq_t n, ChunkServer *s, fid_t f, chunkId_t c, seq_t v):$/;"	f	struct:KFS::MetaChunkVersChange
MetaChunkVersChange	cc/meta/request.h	/^struct MetaChunkVersChange: public MetaChunkRequest {$/;"	s	namespace:KFS
MetaCoalesceBlocks	cc/meta/request.h	/^	MetaCoalesceBlocks(seq_t s, int pv, const char *o, const char *d):$/;"	f	struct:KFS::MetaCoalesceBlocks
MetaCoalesceBlocks	cc/meta/request.h	/^struct MetaCoalesceBlocks: public MetaRequest {$/;"	s	namespace:KFS
MetaCreate	cc/meta/request.h	/^	MetaCreate(seq_t s, int pv, fid_t d, string n, int16_t r, bool e,string handler):$/;"	f	struct:KFS::MetaCreate
MetaCreate	cc/meta/request.h	/^struct MetaCreate: public MetaRequest {$/;"	s	namespace:KFS
MetaDentry	cc/meta/meta.h	/^	MetaDentry(const MetaDentry *other) :$/;"	f	class:KFS::MetaDentry
MetaDentry	cc/meta/meta.h	/^	MetaDentry(fid_t parent, string fname, fid_t myID):$/;"	f	class:KFS::MetaDentry
MetaDentry	cc/meta/meta.h	/^class MetaDentry: public Meta {$/;"	c	namespace:KFS
MetaDumpChunkReplicationCandidates	cc/meta/request.h	/^	MetaDumpChunkReplicationCandidates(seq_t s, int pv):$/;"	f	struct:KFS::MetaDumpChunkReplicationCandidates
MetaDumpChunkReplicationCandidates	cc/meta/request.h	/^struct MetaDumpChunkReplicationCandidates: public MetaRequest {$/;"	s	namespace:KFS
MetaDumpChunkToServerMap	cc/meta/request.h	/^	MetaDumpChunkToServerMap(seq_t s, int pv):$/;"	f	struct:KFS::MetaDumpChunkToServerMap
MetaDumpChunkToServerMap	cc/meta/request.h	/^struct MetaDumpChunkToServerMap: public MetaRequest {$/;"	s	namespace:KFS
MetaExecuteRebalancePlan	cc/meta/request.h	/^	MetaExecuteRebalancePlan(seq_t s, int pv, const std::string &p) :$/;"	f	struct:KFS::MetaExecuteRebalancePlan
MetaExecuteRebalancePlan	cc/meta/request.h	/^struct MetaExecuteRebalancePlan : public MetaRequest {$/;"	s	namespace:KFS
MetaFattr	cc/meta/meta.h	/^	MetaFattr(): Meta(KFS_FATTR, 0), type(KFS_NONE) { }$/;"	f	class:KFS::MetaFattr
MetaFattr	cc/meta/meta.h	/^	MetaFattr(FileType t, fid_t id, int16_t n, const std::string handler_key = ""):$/;"	f	class:KFS::MetaFattr
MetaFattr	cc/meta/meta.h	/^	MetaFattr(FileType t, fid_t id, struct timeval mt,$/;"	f	class:KFS::MetaFattr
MetaFattr	cc/meta/meta.h	/^class MetaFattr: public Meta {$/;"	c	namespace:KFS
MetaFsck	cc/meta/request.h	/^	MetaFsck(seq_t s, int pv):$/;"	f	struct:KFS::MetaFsck
MetaFsck	cc/meta/request.h	/^struct MetaFsck: public MetaRequest {$/;"	s	namespace:KFS
MetaGetChunkServersCounters	cc/meta/request.h	/^	MetaGetChunkServersCounters(seq_t s, int pv)$/;"	f	struct:KFS::MetaGetChunkServersCounters
MetaGetChunkServersCounters	cc/meta/request.h	/^struct MetaGetChunkServersCounters : public MetaRequest {$/;"	s	namespace:KFS
MetaGetalloc	cc/meta/request.h	/^	MetaGetalloc(seq_t s, int pv, fid_t f, chunkOff_t o, std::string n):$/;"	f	struct:KFS::MetaGetalloc
MetaGetalloc	cc/meta/request.h	/^struct MetaGetalloc: public MetaRequest {$/;"	s	namespace:KFS
MetaGetlayout	cc/meta/request.h	/^	MetaGetlayout(seq_t s, int pv, fid_t f):$/;"	f	struct:KFS::MetaGetlayout
MetaGetlayout	cc/meta/request.h	/^struct MetaGetlayout: public MetaRequest {$/;"	s	namespace:KFS
MetaHello	cc/meta/request.h	/^	MetaHello(seq_t s): MetaRequest(META_HELLO, s, 0, false) { }$/;"	f	struct:KFS::MetaHello
MetaHello	cc/meta/request.h	/^struct MetaHello: public MetaRequest {$/;"	s	namespace:KFS
MetaLeaseAcquire	cc/meta/request.h	/^	MetaLeaseAcquire(seq_t s, int pv, chunkId_t c, std::string n):$/;"	f	struct:KFS::MetaLeaseAcquire
MetaLeaseAcquire	cc/meta/request.h	/^struct MetaLeaseAcquire: public MetaRequest {$/;"	s	namespace:KFS
MetaLeaseCleanup	cc/meta/request.h	/^	MetaLeaseCleanup(seq_t s, KfsCallbackObj *c):$/;"	f	struct:KFS::MetaLeaseCleanup
MetaLeaseCleanup	cc/meta/request.h	/^struct MetaLeaseCleanup: public MetaRequest {$/;"	s	namespace:KFS
MetaLeaseRelinquish	cc/meta/request.h	/^	MetaLeaseRelinquish(seq_t s, int pv, LeaseType t, chunkId_t c, int64_t l,$/;"	f	struct:KFS::MetaLeaseRelinquish
MetaLeaseRelinquish	cc/meta/request.h	/^struct MetaLeaseRelinquish: public MetaRequest {$/;"	s	namespace:KFS
MetaLeaseRenew	cc/meta/request.h	/^	MetaLeaseRenew(seq_t s, int pv, LeaseType t, chunkId_t c, int64_t l, std::string n):$/;"	f	struct:KFS::MetaLeaseRenew
MetaLeaseRenew	cc/meta/request.h	/^struct MetaLeaseRenew: public MetaRequest {$/;"	s	namespace:KFS
MetaLogMakeChunkStable	cc/meta/request.h	/^	MetaLogMakeChunkStable(fid_t fileId, chunkId_t id, seq_t version,$/;"	f	struct:KFS::MetaLogMakeChunkStable
MetaLogMakeChunkStable	cc/meta/request.h	/^struct MetaLogMakeChunkStable : public MetaRequest, public  KfsCallbackObj {$/;"	s	namespace:KFS
MetaLogMakeChunkStableDone	cc/meta/request.h	/^	MetaLogMakeChunkStableDone(fid_t fileId, chunkId_t id, seq_t version,$/;"	f	struct:KFS::MetaLogMakeChunkStableDone
MetaLogMakeChunkStableDone	cc/meta/request.h	/^struct MetaLogMakeChunkStableDone : public MetaLogMakeChunkStable {$/;"	s	namespace:KFS
MetaLookup	cc/meta/request.h	/^	MetaLookup(seq_t s, int  pv, fid_t d, string n):$/;"	f	struct:KFS::MetaLookup
MetaLookup	cc/meta/request.h	/^struct MetaLookup: public MetaRequest {$/;"	s	namespace:KFS
MetaLookupPath	cc/meta/request.h	/^	MetaLookupPath(seq_t s, int pv, fid_t r, string p):$/;"	f	struct:KFS::MetaLookupPath
MetaLookupPath	cc/meta/request.h	/^struct MetaLookupPath: public MetaRequest {$/;"	s	namespace:KFS
MetaMkdir	cc/meta/request.h	/^	MetaMkdir(seq_t s, int pv, fid_t d, string n):$/;"	f	struct:KFS::MetaMkdir
MetaMkdir	cc/meta/request.h	/^struct MetaMkdir: public MetaRequest {$/;"	s	namespace:KFS
MetaNode	cc/meta/base.h	/^	MetaNode(MetaType t): type(t), flagbits(0) { }$/;"	f	class:KFS::MetaNode
MetaNode	cc/meta/base.h	/^	MetaNode(MetaType t, int f): type(t), flagbits(f) { }$/;"	f	class:KFS::MetaNode
MetaNode	cc/meta/base.h	/^class MetaNode {$/;"	c	namespace:KFS
MetaOp	cc/meta/request.h	/^enum MetaOp {$/;"	g	namespace:KFS
MetaOpenFiles	cc/meta/request.h	/^	MetaOpenFiles(seq_t s, int pv):$/;"	f	struct:KFS::MetaOpenFiles
MetaOpenFiles	cc/meta/request.h	/^struct MetaOpenFiles: public MetaRequest {$/;"	s	namespace:KFS
MetaPing	cc/meta/request.h	/^	MetaPing(seq_t s, int pv):$/;"	f	struct:KFS::MetaPing
MetaPing	cc/meta/request.h	/^struct MetaPing: public MetaRequest {$/;"	s	namespace:KFS
MetaPingOp	cc/tools/MonUtils.h	/^        MetaPingOp(int32_t s) :$/;"	f	struct:KFS_MON::MetaPingOp
MetaPingOp	cc/tools/MonUtils.h	/^    struct MetaPingOp : public KfsMonOp {$/;"	s	namespace:KFS_MON
MetaQueue	cc/meta/queue.h	/^	MetaQueue(): waiters(0) { }$/;"	f	class:KFS::MetaQueue
MetaQueue	cc/meta/queue.h	/^template <typename T> class MetaQueue {$/;"	c	namespace:KFS
MetaReadConfig	cc/meta/request.h	/^	MetaReadConfig(seq_t s, int pv, const std::string &p) :$/;"	f	struct:KFS::MetaReadConfig
MetaReadConfig	cc/meta/request.h	/^struct MetaReadConfig : public MetaRequest {$/;"	s	namespace:KFS
MetaReaddir	cc/meta/request.h	/^	MetaReaddir(seq_t s, int pv, fid_t d):$/;"	f	struct:KFS::MetaReaddir
MetaReaddir	cc/meta/request.h	/^struct MetaReaddir: public MetaRequest {$/;"	s	namespace:KFS
MetaReaddirPlus	cc/meta/request.h	/^	MetaReaddirPlus(seq_t s, int pv, fid_t d):$/;"	f	struct:KFS::MetaReaddirPlus
MetaReaddirPlus	cc/meta/request.h	/^struct MetaReaddirPlus: public MetaRequest {$/;"	s	namespace:KFS
MetaRecomputeDirsize	cc/meta/request.h	/^	MetaRecomputeDirsize(seq_t s, int pv):$/;"	f	struct:KFS::MetaRecomputeDirsize
MetaRecomputeDirsize	cc/meta/request.h	/^struct MetaRecomputeDirsize: public MetaRequest {$/;"	s	namespace:KFS
MetaRemove	cc/meta/request.h	/^	MetaRemove(seq_t s, int pv, fid_t d, string n):$/;"	f	struct:KFS::MetaRemove
MetaRemove	cc/meta/request.h	/^struct MetaRemove: public MetaRequest {$/;"	s	namespace:KFS
MetaRename	cc/meta/request.h	/^	MetaRename(seq_t s, int pv, fid_t d, const char *o, const char *n, bool c):$/;"	f	struct:KFS::MetaRename
MetaRename	cc/meta/request.h	/^struct MetaRename: public MetaRequest {$/;"	s	namespace:KFS
MetaRequest	cc/meta/request.h	/^	MetaRequest(MetaOp o, seq_t ops, int pv, bool mu):$/;"	f	struct:KFS::MetaRequest
MetaRequest	cc/meta/request.h	/^struct MetaRequest {$/;"	s	namespace:KFS
MetaRetireChunkserver	cc/meta/request.h	/^	MetaRetireChunkserver(seq_t s, int pv, const ServerLocation &l, int d) :$/;"	f	struct:KFS::MetaRetireChunkserver
MetaRetireChunkserver	cc/meta/request.h	/^struct MetaRetireChunkserver : public MetaRequest {$/;"	s	namespace:KFS
MetaRmdir	cc/meta/request.h	/^	MetaRmdir(seq_t s, int pv, fid_t d, string n):$/;"	f	struct:KFS::MetaRmdir
MetaRmdir	cc/meta/request.h	/^struct MetaRmdir: public MetaRequest {$/;"	s	namespace:KFS
MetaServer	cc/libkfsClient/KfsProtocolWorker.cc	/^    typedef WriteAppender::MetaServer MetaServer;$/;"	t	class:KFS::KfsProtocolWorker::Impl	file:
MetaServer	cc/libkfsClient/WriteAppender.h	/^    typedef KfsNetClient MetaServer;$/;"	t	class:KFS::WriteAppender
MetaServerSM	cc/chunk/MetaServerSM.cc	/^MetaServerSM::MetaServerSM()$/;"	f	class:MetaServerSM
MetaServerSM	cc/chunk/MetaServerSM.h	/^class MetaServerSM : public KfsCallbackObj, private ITimeout {$/;"	c	namespace:KFS
MetaSetChunkServersProperties	cc/meta/request.h	/^	MetaSetChunkServersProperties(seq_t s, int pv)$/;"	f	struct:KFS::MetaSetChunkServersProperties
MetaSetChunkServersProperties	cc/meta/request.h	/^struct MetaSetChunkServersProperties : public MetaRequest {$/;"	s	namespace:KFS
MetaSetMtime	cc/meta/request.h	/^	MetaSetMtime(seq_t s, int pv, string p, struct timeval &m):$/;"	f	struct:KFS::MetaSetMtime
MetaSetMtime	cc/meta/request.h	/^struct MetaSetMtime: public MetaRequest {$/;"	s	namespace:KFS
MetaStats	cc/meta/request.h	/^	MetaStats(seq_t s, int pv):$/;"	f	struct:KFS::MetaStats
MetaStats	cc/meta/request.h	/^struct MetaStats: public MetaRequest {$/;"	s	namespace:KFS
MetaStatsOp	cc/tools/MonUtils.h	/^        MetaStatsOp(int32_t s) :$/;"	f	struct:KFS_MON::MetaStatsOp
MetaStatsOp	cc/tools/MonUtils.h	/^    struct MetaStatsOp : public KfsMonOp {$/;"	s	namespace:KFS_MON
MetaThread	cc/meta/thread.h	/^	MetaThread() : threadInited(false)$/;"	f	class:KFS::MetaThread
MetaThread	cc/meta/thread.h	/^class MetaThread {$/;"	c	namespace:KFS
MetaToggleRebalancing	cc/meta/request.h	/^	MetaToggleRebalancing(seq_t s, int pv, bool v) :$/;"	f	struct:KFS::MetaToggleRebalancing
MetaToggleRebalancing	cc/meta/request.h	/^struct MetaToggleRebalancing : public MetaRequest {$/;"	s	namespace:KFS
MetaToggleWORM	cc/meta/request.h	/^	MetaToggleWORM(seq_t s, int pv, bool v):$/;"	f	struct:KFS::MetaToggleWORM
MetaToggleWORM	cc/meta/request.h	/^struct MetaToggleWORM: public MetaRequest {$/;"	s	namespace:KFS
MetaToggleWORMOp	cc/tools/MonUtils.h	/^        MetaToggleWORMOp(int32_t s, int v) :$/;"	f	struct:KFS_MON::MetaToggleWORMOp
MetaToggleWORMOp	cc/tools/MonUtils.h	/^    struct MetaToggleWORMOp : public KfsMonOp {$/;"	s	namespace:KFS_MON
MetaTruncate	cc/meta/request.h	/^	MetaTruncate(seq_t s, int pv, fid_t f, chunkOff_t o):$/;"	f	struct:KFS::MetaTruncate
MetaTruncate	cc/meta/request.h	/^struct MetaTruncate: public MetaRequest {$/;"	s	namespace:KFS
MetaType	cc/meta/kfstypes.h	/^enum MetaType {$/;"	g	namespace:KFS
MetaUpServers	cc/meta/request.h	/^	MetaUpServers(seq_t s, int pv):$/;"	f	struct:KFS::MetaUpServers
MetaUpServers	cc/meta/request.h	/^struct MetaUpServers: public MetaRequest {$/;"	s	namespace:KFS
MetaWriteDone	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppender::MetaWriteDone(int status)$/;"	f	class:KFS::AtomicRecordAppender
MethodPtr	cc/libkfsIO/KfsCallbackObj.h	/^    typedef int (T::*MethodPtr)(int code, void *data);$/;"	t	class:KFS::ObjectMethod
MicorSecs	cc/chunk/KfsOps.cc	/^inline static int64_t MicorSecs(const struct timeval& tv)$/;"	f	file:
MicorSecs	cc/meta/ClientSM.cc	/^	static int64_t MicorSecs(const struct timeval& tv)$/;"	f	class:RequestStatsGatherer	file:
Min	cc/qcdio/qcdiskqueue.cpp	/^    template <typename T> T static Min($/;"	f	class:QCDiskQueue::Queue	file:
MinTimeout	cc/libkfsIO/NetManager.h	/^        static int MinTimeout(int tmL, int tmR)$/;"	f	class:KFS::NetManager::Timer
Mkdir	cc/libkfsClient/KfsClient.cc	/^KfsClient::Mkdir(const char *pathname)$/;"	f	class:KfsClient
Mkdir	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::Mkdir(const char *pathname)$/;"	f	class:KfsClientImpl
Mkdir	cc/libkfsClient/WriteAppender.cc	/^    void Mkdir()$/;"	f	class:KFS::WriteAppender::Impl	file:
MkdirOp	cc/libkfsClient/KfsOps.h	/^    MkdirOp(kfsSeq_t s, kfsFileId_t p, const char *d) :$/;"	f	struct:KFS::MkdirOp
MkdirOp	cc/libkfsClient/KfsOps.h	/^struct MkdirOp : public KfsOp {$/;"	s	namespace:KFS
Mkdirs	cc/libkfsClient/KfsClient.cc	/^KfsClient::Mkdirs(const char *pathname)$/;"	f	class:KfsClient
Mkdirs	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::Mkdirs(const char *pathname)$/;"	f	class:KfsClientImpl
Modify	cc/chunk/BufferManager.cc	/^BufferManager::Modify($/;"	f	class:KFS::BufferManager
Move	cc/libkfsIO/IOBuffer.cc	/^int IOBuffer::Move(IOBuffer *other, int numBytes)$/;"	f	class:IOBuffer
Move	cc/libkfsIO/IOBuffer.cc	/^void IOBuffer::Move(IOBuffer *other)$/;"	f	class:IOBuffer
MovingChunkDone	cc/meta/ChunkServer.h	/^		void MovingChunkDone(chunkId_t chunkId) {$/;"	f	class:KFS::ChunkServer
MsgLogger	cc/common/log.cc	/^MsgLogger::MsgLogger($/;"	f	class:KFS::MsgLogger
MsgLogger	cc/common/log.h	/^    class MsgLogger : public BufferedLogWriter$/;"	c	namespace:KFS
MsgPrefix	cc/common/BufferedLogWriter.cc	/^    size_t MsgPrefix($/;"	f	class:KFS::BufferedLogWriter::Impl	file:
MsgPrefixSelf	cc/common/BufferedLogWriter.cc	/^    size_t MsgPrefixSelf($/;"	f	class:KFS::BufferedLogWriter::Impl	file:
Mutable	cc/meta/LayoutManager.h	/^		template<typename T> static T& Mutable(const T& val)$/;"	f	struct:KFS::LeaseInfo
MutexLock	cc/libkfsClient/concurrency.h	/^    MutexLock( pthread_mutex_t *mutex ) : mMutex(mutex) $/;"	f	class:KFS::MutexLock
MutexLock	cc/libkfsClient/concurrency.h	/^class KFS::MutexLock {$/;"	c	class:KFS
NDAYS_PER_FULL_REPLICATION_CHECK	cc/meta/LayoutManager.cc	/^int NDAYS_PER_FULL_REPLICATION_CHECK = 30;$/;"	v
NET_CONNECTION_LOG_STREAM_DEBUG	cc/libkfsIO/NetConnection.cc	36;"	d	file:
NET_ERROR_SIMULATOR_H	cc/libkfsIO/NetErrorSimulator.h	26;"	d
NFEWEST	cc/meta/kfstree.h	/^	static const int NFEWEST = NKEY - NSPLIT;$/;"	m	class:KFS::Node
NKEY	cc/meta/kfstree.h	/^	static const int NKEY = 32;$/;"	m	class:KFS::Node
NSPLIT	cc/meta/kfstree.h	/^	static const int NSPLIT = NKEY \/ 2;$/;"	m	class:KFS::Node
NUM_REPLICAS_PER_FILE	cc/common/kfstypes.h	/^const short int NUM_REPLICAS_PER_FILE = 3; \/\/!< default degree of replication$/;"	m	namespace:KFS
NameToFdMap	cc/libkfsClient/KfsClientInt.h	/^typedef std::tr1::unordered_map<std::string, int, Hsieh_hash_fcn> NameToFdMap;$/;"	t	namespace:KFS
NameToFdMapIter	cc/libkfsClient/KfsClientInt.h	/^    typedef std::tr1::unordered_map<std::string, int, Hsieh_hash_fcn>::iterator NameToFdMapIter;$/;"	t	namespace:KFS
NanoSec	cc/common/BufferedLogWriter.cc	/^    static inline Time NanoSec($/;"	f	class:KFS::BufferedLogWriter::Impl	file:
NeedToChangeReplica	cc/libkfsClient/KfsRead.cc	/^NeedToChangeReplica(int errcode)$/;"	f	file:
NeedToKickNetThread	cc/chunk/ChunkServer.h	/^    bool NeedToKickNetThread() {$/;"	f	class:KFS::ChunkServer
NeedToReadChunkMetadata	cc/chunk/ChunkManager.h	/^    bool NeedToReadChunkMetadata(kfsChunkId_t c) {$/;"	f	class:KFS::ChunkManager
NeedToRetryAllocation	cc/libkfsClient/KfsWrite.cc	/^NeedToRetryAllocation(int status)$/;"	f	file:
NeedToRetryRead	cc/libkfsClient/KfsRead.cc	/^NeedToRetryRead(int status)$/;"	f	file:
NetConnection	cc/libkfsIO/NetConnection.h	/^    NetConnection(TcpSocket *sock, KfsCallbackObj *c,$/;"	f	class:KFS::NetConnection
NetConnection	cc/libkfsIO/NetConnection.h	/^class NetConnection {$/;"	c	namespace:KFS
NetConnectionPtr	cc/libkfsIO/NetConnection.h	/^    typedef boost::shared_ptr<NetConnection> NetConnectionPtr;$/;"	t	class:KFS::NetConnection
NetConnectionPtr	cc/libkfsIO/NetConnection.h	/^typedef NetConnection::NetConnectionPtr NetConnectionPtr;$/;"	t	namespace:KFS
NetDispatch	cc/meta/NetDispatch.cc	/^NetDispatch::NetDispatch()$/;"	f	class:NetDispatch
NetDispatch	cc/meta/NetDispatch.h	/^    class NetDispatch {$/;"	c	namespace:KFS
NetErrorSimulator	cc/libkfsIO/NetErrorSimulator.cc	/^    NetErrorSimulator($/;"	f	class:KFS::NetErrorSimulator
NetErrorSimulator	cc/libkfsIO/NetErrorSimulator.cc	/^class NetErrorSimulator : public NetManager::PollEventHook$/;"	c	namespace:KFS	file:
NetErrorSimulatorConfigure	cc/libkfsIO/NetErrorSimulator.cc	/^NetErrorSimulatorConfigure($/;"	f	namespace:KFS
NetKicker	cc/libkfsIO/NetKicker.cc	/^NetKicker::NetKicker()$/;"	f	class:NetKicker
NetKicker	cc/libkfsIO/NetKicker.h	/^    class NetKicker {$/;"	c	namespace:KFS
NetManager	cc/libkfsIO/NetManager.cc	/^NetManager::NetManager(int timeoutMs)$/;"	f	class:NetManager
NetManager	cc/libkfsIO/NetManager.h	/^class NetManager {$/;"	c	namespace:KFS
NetManagerEntry	cc/libkfsIO/NetConnection.h	/^        NetManagerEntry()$/;"	f	class:KFS::NetConnection::NetManagerEntry
NetManagerEntry	cc/libkfsIO/NetConnection.h	/^    class NetManagerEntry$/;"	c	class:KFS::NetConnection
NewAppender	cc/libkfsClient/KfsProtocolWorker.cc	/^    bool NewAppender($/;"	f	class:KFS::KfsProtocolWorker::Impl	file:
Next	cc/qcdio/qcdiskqueue.cpp	/^        char** Next()$/;"	f	class:QCDiskQueue::Queue::BuffersIterator	file:
Next	cc/qcdio/qcdllist.h	/^        NodeT* Next()$/;"	f	class:QCDLList::Iterator
Next	cc/qcdio/qcfdpoll.cpp	/^    bool Next($/;"	f	class:QCFdPoll::Impl
Next	cc/qcdio/qcfdpoll.cpp	/^QCFdPoll::Next($/;"	f	class:QCFdPoll
NextSeq	cc/chunk/RemoteSyncSM.cc	/^NextSeq()$/;"	f	file:
NextSeq	cc/meta/ChunkServer.h	/^		seq_t NextSeq() { return mSeqNo++; }$/;"	f	class:KFS::ChunkServer
NextSeqnum	cc/chunk/RemoteSyncSM.cc	/^RemoteSyncSM::NextSeqnum()$/;"	f	class:RemoteSyncSM
Node	cc/meta/kfstree.h	/^	Node(int f): MetaNode(KFS_INTERNAL, f), count(0), next(NULL) { }$/;"	f	class:KFS::Node
Node	cc/meta/kfstree.h	/^class Node: public MetaNode {$/;"	c	namespace:KFS
NodeMap	cc/telemetry/telemetry_server.h	/^    typedef std::tr1::unordered_map<std::string, NodeState_t> NodeMap;$/;"	t	namespace:KFS
NodeMapIter	cc/telemetry/telemetry_server.h	/^    typedef std::tr1::unordered_map<std::string, NodeState_t>::iterator NodeMapIter;$/;"	t	namespace:KFS
NodeState_t	cc/telemetry/telemetry_server.h	/^        NodeState_t() : numSamplesInPeriod(0), totalTimeInPeriod(0.0), movingAvg(0.0) { }$/;"	f	struct:KFS::NodeState_t
NodeState_t	cc/telemetry/telemetry_server.h	/^    struct NodeState_t {$/;"	s	namespace:KFS
NonStableChunksMap	cc/meta/LayoutManager.h	/^        > NonStableChunksMap;$/;"	t	namespace:KFS
NopDispatch	cc/libkfsClient/WriteAppender.cc	/^    struct NopDispatch$/;"	s	class:KFS::WriteAppender::Impl	file:
Notify	cc/qcdio/qcmutex.h	/^    void Notify()$/;"	f	class:QCCondVar
NotifyAll	cc/qcdio/qcmutex.h	/^    void NotifyAll()$/;"	f	class:QCCondVar
NotifyChunkClosed	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppender::NotifyChunkClosed()$/;"	f	class:KFS::AtomicRecordAppender
NotifyChunkVersChange	cc/meta/ChunkServer.cc	/^ChunkServer::NotifyChunkVersChange(fid_t fid, chunkId_t chunkId, seq_t chunkVers)$/;"	f	class:ChunkServer
NotifyMetaChunksLost	cc/chunk/ChunkManager.cc	/^ChunkManager::NotifyMetaChunksLost(const string &dirname)$/;"	f	class:KFS::ChunkManager
NotifyMetaCorruptedChunk	cc/chunk/ChunkManager.cc	/^ChunkManager::NotifyMetaCorruptedChunk(kfsChunkId_t chunkId)$/;"	f	class:KFS::ChunkManager
NotifyStaleChunk	cc/meta/ChunkServer.cc	/^ChunkServer::NotifyStaleChunk(chunkId_t staleChunkId)$/;"	f	class:ChunkServer
NotifyStaleChunks	cc/meta/ChunkServer.cc	/^ChunkServer::NotifyStaleChunks(const vector<chunkId_t> &staleChunkIds)$/;"	f	class:ChunkServer
Now	cc/chunk/AtomicRecordAppender.cc	/^    static inline time_t Now()$/;"	f	class:KFS::AtomicRecordAppender	file:
Now	cc/chunk/LeaseClerk.cc	/^LeaseClerk::Now()$/;"	f	class:LeaseClerk
Now	cc/common/BufferedLogWriter.cc	/^    static Time Now()$/;"	f	class:KFS::BufferedLogWriter::Impl	file:
Now	cc/common/BufferedLogWriter.cc	/^    static void Now($/;"	f	class:KFS::BufferedLogWriter::Impl	file:
Now	cc/libkfsClient/KfsNetClient.cc	/^    time_t Now() const$/;"	f	class:KFS::KfsNetClient::Impl
Now	cc/libkfsClient/WriteAppender.cc	/^    time_t Now() const$/;"	f	class:KFS::WriteAppender::Impl	file:
Now	cc/libkfsIO/NetManager.cc	/^NetManager::Timer::Handler::Now() const$/;"	f	class:NetManager::Timer::Handler
Now	cc/libkfsIO/NetManager.h	/^    time_t Now() const$/;"	f	class:KFS::NetManager
Now	cc/tests/KfsLogTest_main.cc	/^static uint64_t Now()$/;"	f	file:
NowMs	cc/libkfsIO/ITimeout.h	/^    static int64_t NowMs() {$/;"	f	class:KFS::ITimeout
NullAllocator	cc/libkfsClient/KfsAsyncRW.h	/^        NullAllocator() : bufsz(0) { }$/;"	f	class:KFS::NullAllocator
NullAllocator	cc/libkfsClient/KfsAsyncRW.h	/^    class NullAllocator : public libkfsio::IOBufferAllocator$/;"	c	namespace:KFS
NumDiskIOOutstanding	cc/libkfsIO/DiskManager.h	/^    int NumDiskIOOutstanding() {$/;"	f	class:KFS::DiskManager
OPNAME_LEN	cc/telemetry/packet.h	/^    static const int OPNAME_LEN = 32;$/;"	m	namespace:KFS
OP_NONE	cc/libkfsIO/DiskEvent.h	/^    OP_NONE,$/;"	e	enum:KFS::DiskEventOp_t
OP_READ	cc/libkfsIO/DiskEvent.h	/^    OP_READ,$/;"	e	enum:KFS::DiskEventOp_t
OP_REQUEST	cc/chunk/KfsOps.h	/^    OP_REQUEST,$/;"	e	enum:KFS::OpType_t
OP_RESPONSE	cc/chunk/KfsOps.h	/^    OP_RESPONSE$/;"	e	enum:KFS::OpType_t
OP_SYNC	cc/libkfsIO/DiskEvent.h	/^    OP_SYNC$/;"	e	enum:KFS::DiskEventOp_t
OP_WRITE	cc/libkfsIO/DiskEvent.h	/^    OP_WRITE,$/;"	e	enum:KFS::DiskEventOp_t
OStream	cc/libkfsIO/IOBuffer.h	/^    OStream()$/;"	f	class:KFS::IOBuffer::OStream
OStream	cc/libkfsIO/IOBuffer.h	/^class IOBuffer::OStream :$/;"	c	class:KFS::IOBuffer
O_DIRECT	cc/qcdio/iovperf.c	57;"	d	file:
O_NOATIME	cc/qcdio/iovperf.c	60;"	d	file:
ObjectMethod	cc/libkfsIO/KfsCallbackObj.h	/^    ObjectMethod( T* optr, MethodPtr mptr )$/;"	f	class:KFS::ObjectMethod
ObjectMethod	cc/libkfsIO/KfsCallbackObj.h	/^class ObjectMethod : public ObjectMethodBase {$/;"	c	namespace:KFS
ObjectMethodBase	cc/libkfsIO/KfsCallbackObj.h	/^class ObjectMethodBase {  $/;"	c	namespace:KFS
OffsetToChecksumBlockEnd	cc/libkfsIO/Checksum.cc	/^OffsetToChecksumBlockEnd(off_t offset)$/;"	f	namespace:KFS
OffsetToChecksumBlockNum	cc/libkfsIO/Checksum.cc	/^OffsetToChecksumBlockNum(off_t offset)$/;"	f	namespace:KFS
OffsetToChecksumBlockStart	cc/libkfsIO/Checksum.cc	/^OffsetToChecksumBlockStart(off_t offset)$/;"	f	namespace:KFS
OkHeader	cc/chunk/KfsOps.cc	/^OkHeader(const KfsOp* op, ostream &os, bool checkStatus = true)$/;"	f	file:
OkHeader	cc/meta/request.cc	/^OkHeader(const MetaRequest* op, ostream &os, bool checkStatus = true)$/;"	f	namespace:KFS
OpCounterMap	cc/chunk/KfsOps.cc	/^    OpCounterMap()$/;"	f	struct:OpCounterMap
OpCounterMap	cc/chunk/KfsOps.cc	/^static struct OpCounterMap : public map<KfsOp_t, Counter *>$/;"	s	file:
OpCounterMap	cc/meta/request.cc	/^typedef map<MetaOp, Counter *> OpCounterMap;$/;"	t	namespace:KFS	file:
OpCounterMapIter	cc/chunk/KfsOps.cc	/^typedef OpCounterMap::iterator OpCounterMapIter;$/;"	t	file:
OpCounterMapIter	cc/meta/request.cc	/^typedef map<MetaOp, Counter *>::iterator OpCounterMapIter;$/;"	t	namespace:KFS	file:
OpDispatcher	cc/chunk/MetaServerSM.cc	/^    OpDispatcher(NetConnectionPtr &c) : conn(c) { }$/;"	f	class:OpDispatcher
OpDispatcher	cc/chunk/MetaServerSM.cc	/^class OpDispatcher {$/;"	c	file:
OpDispatcher	cc/emulator/LayoutEmulator.cc	/^    OpDispatcher() { }$/;"	f	class:OpDispatcher
OpDispatcher	cc/emulator/LayoutEmulator.cc	/^class OpDispatcher {$/;"	c	file:
OpDone	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppender::OpDone(ReadOp* op)$/;"	f	class:KFS::AtomicRecordAppender
OpDone	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppender::OpDone(RecordAppendOp* op)$/;"	f	class:KFS::AtomicRecordAppender
OpDone	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppender::OpDone(WriteOp *op)$/;"	f	class:KFS::AtomicRecordAppender
OpDone	cc/libkfsClient/KfsNetClient.cc	/^        void OpDone($/;"	f	struct:KFS::KfsNetClient::Impl::OpQueueEntry
OpDone	cc/libkfsClient/WriteAppender.cc	/^    virtual void OpDone($/;"	f	class:KFS::WriteAppender::Impl
OpDone	cc/meta/ClientSM.cc	/^	void OpDone(const MetaRequest& op)$/;"	f	class:RequestStatsGatherer
OpFailer	cc/chunk/RemoteSyncSM.cc	/^    OpFailer(int c) : errCode(c) { };$/;"	f	class:OpFailer
OpFailer	cc/chunk/RemoteSyncSM.cc	/^class OpFailer {$/;"	c	file:
OpFailer	cc/meta/ChunkServer.cc	/^	OpFailer(int c) : errCode(c) { };$/;"	f	class:OpFailer
OpFailer	cc/meta/ChunkServer.cc	/^class OpFailer {$/;"	c	file:
OpFinished	cc/chunk/ChunkServer.h	/^    void OpFinished() {$/;"	f	class:KFS::ChunkServer
OpFinished	cc/chunk/ClientSM.cc	/^ClientSM::OpFinished(KfsOp *doneOp)$/;"	f	class:ClientSM
OpInserted	cc/chunk/ChunkServer.h	/^    void OpInserted() {$/;"	f	class:KFS::ChunkServer
OpListEntry	cc/chunk/ChunkManager.h	/^        class OpListEntry$/;"	c	class:KFS::ChunkManager::PendingWrites
OpListEntry	cc/chunk/ChunkManager.h	/^inline ChunkManager::PendingWrites::OpListEntry::OpListEntry()$/;"	f	class:KFS::ChunkManager::PendingWrites::OpListEntry
OpMatch	cc/meta/ChunkServer.cc	/^	OpMatch(seq_t s) : myseq(s) { }$/;"	f	class:OpMatch
OpMatch	cc/meta/ChunkServer.cc	/^class OpMatch {$/;"	c	file:
OpMatcher	cc/chunk/KfsOps.h	/^    OpMatcher(kfsSeq_t s) : seqNum(s) { };$/;"	f	class:KFS::OpMatcher
OpMatcher	cc/chunk/KfsOps.h	/^class OpMatcher {$/;"	c	namespace:KFS
OpOwner	cc/libkfsClient/KfsNetClient.h	/^    class OpOwner$/;"	c	class:KFS::KfsNetClient
OpPair	cc/chunk/ClientSM.h	/^    struct OpPair {$/;"	s	namespace:KFS
OpQueue	cc/libkfsClient/KfsNetClient.cc	/^    > OpQueue;$/;"	t	class:KFS::KfsNetClient::Impl	file:
OpQueueEntry	cc/libkfsClient/KfsNetClient.cc	/^        OpQueueEntry($/;"	f	struct:KFS::KfsNetClient::Impl::OpQueueEntry
OpQueueEntry	cc/libkfsClient/KfsNetClient.cc	/^    struct OpQueueEntry$/;"	s	class:KFS::KfsNetClient::Impl	file:
OpType	cc/qcdio/qcfdpoll.h	/^    enum OpType$/;"	g	class:QCFdPoll
OpType_t	cc/chunk/KfsOps.h	/^enum OpType_t {$/;"	g	namespace:KFS
Open	cc/chunk/DiskIo.cc	/^DiskIo::File::Open($/;"	f	class:KFS::DiskIo::File
Open	cc/common/BufferedLogWriter.cc	/^    int Open($/;"	f	class:KFS::BufferedLogWriter::Impl
Open	cc/common/BufferedLogWriter.cc	/^BufferedLogWriter::Open($/;"	f	class:KFS::BufferedLogWriter
Open	cc/libkfsClient/KfsClient.cc	/^KfsClient::Open(const char *pathname, int openFlags, int numReplicas)$/;"	f	class:KfsClient
Open	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::Open(const char *pathname, int openMode, int numReplicas)$/;"	f	class:KfsClientImpl
Open	cc/libkfsClient/KfsProtocolWorker.cc	/^        int Open($/;"	f	class:KFS::KfsProtocolWorker::Impl::Appender
Open	cc/libkfsClient/WriteAppender.cc	/^    int Open($/;"	f	class:KFS::WriteAppender::Impl
Open	cc/libkfsClient/WriteAppender.cc	/^WriteAppender::Open($/;"	f	class:KFS::WriteAppender
OpenChunk	cc/chunk/ChunkManager.cc	/^ChunkManager::OpenChunk(kfsChunkId_t chunkId, $/;"	f	class:KFS::ChunkManager
OpenChunk	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::OpenChunk(int fd, bool nonblockingConnect)$/;"	f	class:KfsClientImpl
OpenFile	cc/qcdio/qcdiskqueue.cpp	/^QCDiskQueue::OpenFile($/;"	f	class:QCDiskQueue
OpenFile	cc/qcdio/qcdiskqueue.cpp	/^QCDiskQueue::Queue::OpenFile($/;"	f	class:QCDiskQueue::Queue
OpenFileChecker	cc/meta/LayoutManager.cc	/^	OpenFileChecker(set<fid_t> &r, set<fid_t> &w) :$/;"	f	class:OpenFileChecker
OpenFileChecker	cc/meta/LayoutManager.cc	/^class OpenFileChecker {$/;"	c	file:
OpenFileStatus	cc/qcdio/qcdiskqueue.h	/^        OpenFileStatus($/;"	f	class:QCDiskQueue::OpenFileStatus
OpenFileStatus	cc/qcdio/qcdiskqueue.h	/^    class OpenFileStatus : public Status$/;"	c	class:QCDiskQueue
OpenLogFile	cc/common/BufferedLogWriter.cc	/^    void OpenLogFile()$/;"	f	class:KFS::BufferedLogWriter::Impl	file:
OpenOp	cc/chunk/KfsOps.h	/^    OpenOp(kfsSeq_t s) :$/;"	f	struct:KFS::OpenOp
OpenOp	cc/chunk/KfsOps.h	/^struct OpenOp : public KfsOp {$/;"	s	namespace:KFS
OpenOp	cc/libkfsClient/KfsOps.h	/^    OpenOp(kfsSeq_t s, kfsChunkId_t c) :$/;"	f	struct:KFS::OpenOp
OpenOp	cc/libkfsClient/KfsOps.h	/^struct OpenOp : public KfsOp {$/;"	s	namespace:KFS
OpsQueue	cc/chunk/ClientSM.h	/^    typedef std::deque<std::pair<KfsOp*, ByteCount> > OpsQueue;$/;"	t	class:KFS::ClientSM
OpsTimeout	cc/libkfsClient/KfsNetClient.cc	/^    void OpsTimeout()$/;"	f	class:KFS::KfsNetClient::Impl	file:
Out	cc/qcdio/qcfdpoll.h	/^    int Out($/;"	f	class:QCFdPoll
OutputIterator	cc/qcdio/qcdiskqueue.h	/^    typedef QCIoBufferPool::OutputIterator OutputIterator;$/;"	t	class:QCDiskQueue
OutputIterator	cc/qcdio/qciobufferpool.h	/^        OutputIterator()$/;"	f	class:QCIoBufferPool::OutputIterator
OutputIterator	cc/qcdio/qciobufferpool.h	/^    class OutputIterator$/;"	c	class:QCIoBufferPool
Owner	cc/libkfsClient/KfsProtocolWorker.cc	/^        typedef KfsProtocolWorker::Impl Owner;$/;"	t	class:KFS::KfsProtocolWorker::Impl::Appender	file:
Parse	cc/emulator/LayoutEmulator.cc	/^void LayoutEmulator::Parse(const char *line, bool addChunksToReplicationChecker)$/;"	f	class:LayoutEmulator
ParseAllocateChunk	cc/chunk/Logger.cc	/^ParseAllocateChunk(istringstream &ist)$/;"	f	file:
ParseChangeChunkVers	cc/chunk/Logger.cc	/^ParseChangeChunkVers(istringstream &ist)$/;"	f	file:
ParseCkptEntry	cc/chunk/Logger.cc	/^Logger::ParseCkptEntry(const char *line, ChunkInfo_t &entry)$/;"	f	class:Logger
ParseCommand	cc/chunk/KfsOps.cc	/^KFS::ParseCommand(std::istream& is, KfsOp **res)$/;"	f	class:KFS
ParseCommand	cc/meta/request.cc	/^ParseCommand(std::istream& is, MetaRequest **res)$/;"	f	namespace:KFS
ParseContent	cc/chunk/KfsOps.cc	/^SetProperties::ParseContent(istream& is)$/;"	f	class:SetProperties
ParseContent	cc/chunk/KfsOps.cc	/^StaleChunksOp::ParseContent(istream& is)$/;"	f	class:StaleChunksOp
ParseContent	cc/chunk/KfsOps.h	/^    virtual bool ParseContent(std::istream& is) { return true; }$/;"	f	struct:KFS::KfsOp
ParseDeleteChunk	cc/chunk/Logger.cc	/^ParseDeleteChunk(istringstream &ist)$/;"	f	file:
ParseHandler	cc/chunk/KfsOps.cc	/^typedef int (*ParseHandler)(Properties &, KfsOp **);$/;"	t	file:
ParseHandler	cc/meta/request.cc	/^typedef int (*ParseHandler)(Properties &, MetaRequest **);$/;"	t	namespace:KFS	file:
ParseHandlerMap	cc/chunk/KfsOps.cc	/^typedef map<string, ParseHandler> ParseHandlerMap;$/;"	t	file:
ParseHandlerMap	cc/meta/request.cc	/^typedef map<string, ParseHandler> ParseHandlerMap;$/;"	t	namespace:KFS	file:
ParseHandlerMapIter	cc/chunk/KfsOps.cc	/^typedef map<string, ParseHandler>::iterator ParseHandlerMapIter;$/;"	t	file:
ParseHandlerMapIter	cc/meta/request.cc	/^typedef map<string, ParseHandler>::iterator ParseHandlerMapIter;$/;"	t	namespace:KFS	file:
ParseHandler_t	cc/chunk/Logger.cc	/^typedef void (*ParseHandler_t)(istringstream &ist);$/;"	t	file:
ParseLayoutInfo	cc/libkfsClient/KfsOps.cc	/^GetLayoutOp::ParseLayoutInfo()$/;"	f	class:GetLayoutOp
ParseResponse	cc/meta/ChunkServer.cc	/^ChunkServer::ParseResponse(std::istream& is, Properties &prop)$/;"	f	class:ChunkServer
ParseResponse	cc/tools/MonUtils.cc	/^ChunkPingOp::ParseResponse(const char *resp, int len)$/;"	f	class:ChunkPingOp
ParseResponse	cc/tools/MonUtils.cc	/^ChunkStatsOp::ParseResponse(const char *resp, int len)$/;"	f	class:ChunkStatsOp
ParseResponse	cc/tools/MonUtils.cc	/^MetaPingOp::ParseResponse(const char *resp, int len)$/;"	f	class:MetaPingOp
ParseResponse	cc/tools/MonUtils.cc	/^MetaStatsOp::ParseResponse(const char *resp, int len)$/;"	f	class:MetaStatsOp
ParseResponse	cc/tools/MonUtils.cc	/^MetaToggleWORMOp::ParseResponse(const char *resp, int len)$/;"	f	class:MetaToggleWORMOp
ParseResponse	cc/tools/MonUtils.cc	/^RetireChunkserverOp::ParseResponse(const char *resp, int len)$/;"	f	class:RetireChunkserverOp
ParseResponseCommon	cc/tools/MonUtils.cc	/^KfsMonOp::ParseResponseCommon(string &resp, Properties &prop)$/;"	f	class:KfsMonOp
ParseResponseHeader	cc/libkfsClient/KfsOps.cc	/^KfsOp::ParseResponseHeader(const Properties &prop)$/;"	f	class:KfsOp
ParseResponseHeader	cc/libkfsClient/KfsOps.cc	/^KfsOp::ParseResponseHeader(std::istream& is)$/;"	f	class:KfsOp
ParseResponseHeaderSelf	cc/libkfsClient/KfsOps.cc	/^AllocateOp::ParseResponseHeaderSelf(const Properties &prop)$/;"	f	class:AllocateOp
ParseResponseHeaderSelf	cc/libkfsClient/KfsOps.cc	/^ChangeFileReplicationOp::ParseResponseHeaderSelf(const Properties &prop)$/;"	f	class:ChangeFileReplicationOp
ParseResponseHeaderSelf	cc/libkfsClient/KfsOps.cc	/^CoalesceBlocksOp::ParseResponseHeaderSelf(const Properties &prop)$/;"	f	class:CoalesceBlocksOp
ParseResponseHeaderSelf	cc/libkfsClient/KfsOps.cc	/^CreateOp::ParseResponseHeaderSelf(const Properties &prop)$/;"	f	class:CreateOp
ParseResponseHeaderSelf	cc/libkfsClient/KfsOps.cc	/^DumpChunkMapOp::ParseResponseHeaderSelf(const Properties &prop)$/;"	f	class:DumpChunkMapOp
ParseResponseHeaderSelf	cc/libkfsClient/KfsOps.cc	/^DumpChunkServerMapOp::ParseResponseHeaderSelf(const Properties &prop)$/;"	f	class:DumpChunkServerMapOp
ParseResponseHeaderSelf	cc/libkfsClient/KfsOps.cc	/^GetAllocOp::ParseResponseHeaderSelf(const Properties &prop)$/;"	f	class:GetAllocOp
ParseResponseHeaderSelf	cc/libkfsClient/KfsOps.cc	/^GetDirSummaryOp::ParseResponseHeaderSelf(const Properties &prop)$/;"	f	class:GetDirSummaryOp
ParseResponseHeaderSelf	cc/libkfsClient/KfsOps.cc	/^GetLayoutOp::ParseResponseHeaderSelf(const Properties &prop)$/;"	f	class:GetLayoutOp
ParseResponseHeaderSelf	cc/libkfsClient/KfsOps.cc	/^GetRecordAppendOpStatus::ParseResponseHeaderSelf(const Properties &prop)$/;"	f	class:GetRecordAppendOpStatus
ParseResponseHeaderSelf	cc/libkfsClient/KfsOps.cc	/^KfsOp::ParseResponseHeaderSelf(const Properties &prop)$/;"	f	class:KfsOp
ParseResponseHeaderSelf	cc/libkfsClient/KfsOps.cc	/^LeaseAcquireOp::ParseResponseHeaderSelf(const Properties &prop)$/;"	f	class:LeaseAcquireOp
ParseResponseHeaderSelf	cc/libkfsClient/KfsOps.cc	/^LookupOp::ParseResponseHeaderSelf(const Properties &prop)$/;"	f	class:LookupOp
ParseResponseHeaderSelf	cc/libkfsClient/KfsOps.cc	/^LookupPathOp::ParseResponseHeaderSelf(const Properties &prop)$/;"	f	class:LookupPathOp
ParseResponseHeaderSelf	cc/libkfsClient/KfsOps.cc	/^MkdirOp::ParseResponseHeaderSelf(const Properties &prop)$/;"	f	class:MkdirOp
ParseResponseHeaderSelf	cc/libkfsClient/KfsOps.cc	/^ReadOp::ParseResponseHeaderSelf(const Properties &prop)$/;"	f	class:ReadOp
ParseResponseHeaderSelf	cc/libkfsClient/KfsOps.cc	/^ReaddirOp::ParseResponseHeaderSelf(const Properties &prop)$/;"	f	class:ReaddirOp
ParseResponseHeaderSelf	cc/libkfsClient/KfsOps.cc	/^ReaddirPlusOp::ParseResponseHeaderSelf(const Properties &prop)$/;"	f	class:ReaddirPlusOp
ParseResponseHeaderSelf	cc/libkfsClient/KfsOps.cc	/^SizeOp::ParseResponseHeaderSelf(const Properties &prop)$/;"	f	class:SizeOp
ParseResponseHeaderSelf	cc/libkfsClient/KfsOps.cc	/^UpServersOp::ParseResponseHeaderSelf(const Properties &prop)$/;"	f	class:UpServersOp
ParseResponseHeaderSelf	cc/libkfsClient/KfsOps.cc	/^WriteIdAllocOp::ParseResponseHeaderSelf(const Properties &prop)$/;"	f	class:WriteIdAllocOp
ParseTruncateChunk	cc/chunk/Logger.cc	/^ParseTruncateChunk(istringstream &ist)$/;"	f	file:
ParseWrite	cc/chunk/Logger.cc	/^ParseWrite(istringstream &ist)$/;"	f	file:
Partition	cc/qcdio/qciobufferpool.cpp	/^    Partition()$/;"	f	class:QCIoBufferPool::Partition
Partition	cc/qcdio/qciobufferpool.cpp	/^class QCIoBufferPool::Partition$/;"	c	class:QCIoBufferPool	file:
PathToFidCacheEntry	cc/meta/kfstree.h	/^	PathToFidCacheEntry() : fid(-1), fa(NULL), lastAccessTime(0) { }$/;"	f	struct:KFS::PathToFidCacheEntry
PathToFidCacheEntry	cc/meta/kfstree.h	/^struct PathToFidCacheEntry {$/;"	s	namespace:KFS
PathToFidCacheMap	cc/meta/kfstree.h	/^typedef std::tr1::unordered_map <std::string, PathToFidCacheEntry> PathToFidCacheMap;$/;"	t	namespace:KFS
PathToFidCacheMapIter	cc/meta/kfstree.h	/^typedef std::tr1::unordered_map <std::string, PathToFidCacheEntry>::iterator PathToFidCacheMapIter;$/;"	t	namespace:KFS
Peek	cc/libkfsIO/TcpSocket.cc	/^int TcpSocket::Peek(char *buf, int bufLen)$/;"	f	class:TcpSocket
PeerName	cc/meta/ClientSM.cc	/^PeerName(NetConnectionPtr conn)$/;"	f
Pending	cc/meta/ChildProcessTracker.h	/^		typedef std::multimap<pid_t, MetaRequest *> Pending;$/;"	t	class:KFS::ChildProcessTrackingTimer
PendingChunkRead	cc/libkfsClient/KfsClientInt.h	/^class PendingChunkRead$/;"	c	namespace:KFS
PendingChunkRead	cc/libkfsClient/KfsRead.cc	/^PendingChunkRead::PendingChunkRead($/;"	f	class:PendingChunkRead
PendingFlushList	cc/chunk/AtomicRecordAppender.cc	/^typedef QCDLList<AtomicRecordAppender> PendingFlushList;$/;"	t	namespace:KFS	file:
PendingMakeStableEntry	cc/meta/LayoutManager.h	/^		PendingMakeStableEntry($/;"	f	struct:KFS::PendingMakeStableEntry
PendingMakeStableEntry	cc/meta/LayoutManager.h	/^	struct PendingMakeStableEntry {$/;"	s	namespace:KFS
PendingMakeStableMap	cc/meta/LayoutManager.h	/^	> PendingMakeStableMap;$/;"	t	namespace:KFS
PendingMetaSyncQueue	cc/chunk/ChunkManager.cc	/^typedef QCDLList<ChunkInfoHandle, 1> PendingMetaSyncQueue;$/;"	t	namespace:KFS	file:
PendingOpsList	cc/chunk/ClientSM.h	/^        boost::fast_pool_allocator<OpPair> > PendingOpsList;$/;"	t	class:KFS::ClientSM
PendingReqs	cc/meta/ChunkServer.h	/^		typedef MetaQueue <MetaChunkRequest> PendingReqs;$/;"	t	class:KFS::ChunkServer
PendingWrites	cc/chunk/ChunkManager.h	/^        PendingWrites()$/;"	f	class:KFS::ChunkManager::PendingWrites
PendingWrites	cc/chunk/ChunkManager.h	/^    class PendingWrites$/;"	c	class:KFS::ChunkManager
Ping	cc/meta/ChunkServer.cc	/^ChunkServer::Ping(string &result)$/;"	f	class:ChunkServer
Ping	cc/meta/LayoutManager.cc	/^LayoutManager::Ping(string &systemInfo, string &upServers, string &downServers, string &retiringServers)$/;"	f	class:LayoutManager
PingChunkServer	cc/tools/kfsping_main.cc	/^PingChunkServer(const ServerLocation &location)$/;"	f
PingMetaServer	cc/tools/kfsping_main.cc	/^PingMetaServer(const ServerLocation &location)$/;"	f
PingOp	cc/chunk/KfsOps.h	/^    PingOp(kfsSeq_t s) :$/;"	f	struct:KFS::PingOp
PingOp	cc/chunk/KfsOps.h	/^struct PingOp : public KfsOp {$/;"	s	namespace:KFS
Pinger	cc/meta/LayoutManager.cc	/^	Pinger(string &r, uint64_t &t, uint64_t &u) :$/;"	f	class:Pinger
Pinger	cc/meta/LayoutManager.cc	/^class Pinger {$/;"	c	file:
Poll	cc/qcdio/qcfdpoll.cpp	/^    int Poll($/;"	f	class:QCFdPoll::Impl
Poll	cc/qcdio/qcfdpoll.cpp	/^QCFdPoll::Poll($/;"	f	class:QCFdPoll
PollEventHook	cc/libkfsIO/NetManager.h	/^        PollEventHook()  {}$/;"	f	class:KFS::NetManager::PollEventHook
PollEventHook	cc/libkfsIO/NetManager.h	/^    class PollEventHook$/;"	c	class:KFS::NetManager
PollEventMask	cc/qcdio/qcfdpoll.cpp	/^    int PollEventMask($/;"	f	class:QCFdPoll::Impl	file:
PopBack	cc/qcdio/qcdllist.h	/^    static NodeT* PopBack($/;"	f	class:QCDLList
PopFront	cc/qcdio/qcdiskqueue.cpp	/^    Request* PopFront($/;"	f	class:QCDiskQueue::Queue	file:
PopFront	cc/qcdio/qcdllist.h	/^    static NodeT* PopFront($/;"	f	class:QCDLList
Positionable	java/org/kosmix/kosmosfs/access/Positionable.java	/^public interface Positionable$/;"	i
PredBase	cc/meta/queue.h	/^	PredBase() { }$/;"	f	class:KFS::PredBase
PredBase	cc/meta/queue.h	/^template <typename T> class PredBase {$/;"	c	namespace:KFS
PredWrapper	cc/meta/queue.h	/^	PredWrapper(PredBase<T> *f) : func(f) { }$/;"	f	class:KFS::PredWrapper
PredWrapper	cc/meta/queue.h	/^template <typename T> class PredWrapper {$/;"	c	namespace:KFS
PrintBlockCount	cc/emulator/LayoutEmulator.cc	/^    PrintBlockCount() { }$/;"	f	class:PrintBlockCount
PrintBlockCount	cc/emulator/LayoutEmulator.cc	/^class PrintBlockCount {$/;"	c	file:
PrintChunkBasicStatsHeader	cc/tools/kfsstats_main.cc	/^PrintChunkBasicStatsHeader()$/;"	f	file:
PrintChunkInfo	cc/chunk/KfsOps.cc	/^    PrintChunkInfo(ostringstream &o) : os(o) { }$/;"	f	class:PrintChunkInfo
PrintChunkInfo	cc/chunk/KfsOps.cc	/^class PrintChunkInfo {$/;"	c	file:
PrintChunkServerInfo	cc/meta/LayoutManager.cc	/^	PrintChunkServerInfo(ofstream &o) : ofs(o) { }$/;"	f	class:PrintChunkServerInfo
PrintChunkServerInfo	cc/meta/LayoutManager.cc	/^class PrintChunkServerInfo {$/;"	c	file:
PrintChunkServerLocations	cc/meta/request.cc	/^	PrintChunkServerLocations(ostream &out): os(out) { }$/;"	f	class:KFS::PrintChunkServerLocations
PrintChunkServerLocations	cc/meta/request.cc	/^class PrintChunkServerLocations {$/;"	c	namespace:KFS	file:
PrintChunkserverBlockCount	cc/emulator/LayoutEmulator.cc	/^LayoutEmulator::PrintChunkserverBlockCount()$/;"	f	class:LayoutEmulator
PrintMetaBasicStatsHeader	cc/tools/kfsstats_main.cc	/^PrintMetaBasicStatsHeader()$/;"	f	file:
PrintRpcStat	cc/tools/kfsstats_main.cc	/^PrintRpcStat(const string &statName, Properties &prop)$/;"	f	file:
Process	cc/libkfsClient/KfsProtocolWorker.cc	/^        void Process($/;"	f	class:KFS::KfsProtocolWorker::Impl::Appender
Process	cc/qcdio/qcdiskqueue.cpp	/^QCDiskQueue::Queue::Process($/;"	f	class:QCDiskQueue::Queue
ProcessPendingBeginMakeStable	cc/meta/LayoutManager.cc	/^LayoutManager::ProcessPendingBeginMakeStable()$/;"	f	class:LayoutManager
Producer	cc/libkfsIO/IOBuffer.h	/^    char *Producer() { return mProducer; }$/;"	f	class:KFS::IOBufferData
Producer	cc/libkfsIO/IOBuffer.h	/^    const char *Producer() const { return mProducer; }$/;"	f	class:KFS::IOBufferData
PropMap	cc/common/properties.h	/^    > PropMap;$/;"	t	class:KFS::Properties
Properties	cc/common/properties.cc	/^Properties::Properties()$/;"	f	class:Properties
Properties	cc/common/properties.cc	/^Properties::Properties(const Properties &p)$/;"	f	class:Properties
Properties	cc/common/properties.h	/^class Properties {$/;"	c	namespace:KFS
Properties2Str	cc/meta/request.h	/^	static string Properties2Str(const Properties& props)$/;"	f	struct:KFS::MetaChunkSetProperties
PruneFromHead	cc/libkfsClient/KfsClient.cc	/^KfsClient::PruneFromHead(int fd, off_t offset)$/;"	f	class:KfsClient
PruneFromHead	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::PruneFromHead(int fd, off_t offset)$/;"	f	class:KfsClientImpl
PushBack	cc/chunk/AtomicRecordAppender.cc	/^    template <typename OpT> void PushBack($/;"	f	class:KFS::AtomicRecordAppender	file:
PushBack	cc/qcdio/qcdllist.h	/^    static void PushBack($/;"	f	class:QCDLList
PushData	cc/libkfsClient/KfsWrite.cc	/^KfsClientImpl::PushData(int fd, vector<WritePrepareOp *> &ops, $/;"	f	class:KfsClientImpl
PushFront	cc/qcdio/qcdllist.h	/^    static void PushFront($/;"	f	class:QCDLList
Put	cc/chunk/BufferManager.h	/^    bool Put($/;"	f	class:KFS::BufferManager
Put	cc/chunk/DiskIo.cc	/^    void Put($/;"	f	class:KFS::DiskIoQueues
Put	cc/qcdio/qcdiskqueue.cpp	/^        virtual void Put($/;"	f	class:QCDiskQueue::Queue::BuffersIterator
Put	cc/qcdio/qcdiskqueue.cpp	/^    void Put($/;"	f	class:QCDiskQueue::Queue	file:
Put	cc/qcdio/qciobufferpool.cpp	/^    bool Put($/;"	f	class:QCIoBufferPool::Partition
Put	cc/qcdio/qciobufferpool.cpp	/^QCIoBufferPool::Put($/;"	f	class:QCIoBufferPool
Put	cc/qcdio/qcunittest.cpp	/^        virtual void Put($/;"	f	class:QCDiskQueueTest::Iterator
PutHeader	cc/chunk/KfsOps.cc	/^PutHeader(const KfsOp* op, ostream &os)$/;"	f	file:
PutHeader	cc/meta/request.cc	/^PutHeader(const MetaRequest* op, ostream &os)$/;"	f	namespace:KFS
PutSelf	cc/qcdio/qciobufferpool.cpp	/^QCIoBufferPool::PutSelf($/;"	f	class:QCIoBufferPool
PutSyncRequest	cc/libkfsClient/KfsProtocolWorker.cc	/^    void PutSyncRequest($/;"	f	class:KFS::KfsProtocolWorker::Impl	file:
Py_RETURN_NONE	cc/access/KfsModulePy.cc	45;"	d	file:
QCASSERT	cc/qcdio/qcdebug.h	30;"	d
QCCondVar	cc/qcdio/qcmutex.cpp	/^QCCondVar::QCCondVar()$/;"	f	class:QCCondVar
QCCondVar	cc/qcdio/qcmutex.h	/^class QCCondVar$/;"	c
QCDEBUG_H	cc/qcdio/qcdebug.h	26;"	d
QCDISKQUEUE_H	cc/qcdio/qcdiskqueue.h	26;"	d
QCDLLIST_H	cc/qcdio/qcdllist.h	26;"	d
QCDLList	cc/qcdio/qcdllist.h	/^class QCDLList$/;"	c
QCDLListOp	cc/qcdio/qcdllist.h	/^class QCDLListOp$/;"	c
QCDiskQueue	cc/qcdio/qcdiskqueue.cpp	/^QCDiskQueue::QCDiskQueue()$/;"	f	class:QCDiskQueue
QCDiskQueue	cc/qcdio/qcdiskqueue.h	/^class QCDiskQueue$/;"	c
QCDiskQueueTest	cc/qcdio/qcunittest.cpp	/^    QCDiskQueueTest()$/;"	f	class:QCDiskQueueTest
QCDiskQueueTest	cc/qcdio/qcunittest.cpp	/^class QCDiskQueueTest$/;"	c	file:
QCFDPOLL_H	cc/qcdio/qcfdpoll.h	26;"	d
QCFdPoll	cc/qcdio/qcfdpoll.cpp	/^QCFdPoll::QCFdPoll()$/;"	f	class:QCFdPoll
QCFdPoll	cc/qcdio/qcfdpoll.h	/^class QCFdPoll$/;"	c
QCIOBUFFERPOOL_H	cc/qcdio/qciobufferpool.h	26;"	d
QCIoBufferPool	cc/qcdio/qciobufferpool.cpp	/^QCIoBufferPool::QCIoBufferPool()$/;"	f	class:QCIoBufferPool
QCIoBufferPool	cc/qcdio/qciobufferpool.h	/^class QCIoBufferPool$/;"	c
QCIoBufferPoolClientList	cc/qcdio/qciobufferpool.cpp	/^typedef QCDLList<QCIoBufferPool::Client, 0> QCIoBufferPoolClientList;$/;"	t	file:
QCMUTEX_H	cc/qcdio/qcmutex.h	26;"	d
QCMutex	cc/qcdio/qcmutex.cpp	/^QCMutex::QCMutex()$/;"	f	class:QCMutex
QCMutex	cc/qcdio/qcmutex.h	/^class QCMutex$/;"	c
QCRTASSERT	cc/qcdio/qcutils.h	31;"	d
QCRunnable	cc/qcdio/qcthread.h	/^    QCRunnable()$/;"	f	class:QCRunnable
QCRunnable	cc/qcdio/qcthread.h	/^class QCRunnable$/;"	c
QCSTUTILS_H	cc/qcdio/qcstutils.h	26;"	d
QCStMutexLocker	cc/qcdio/qcstutils.h	/^    QCStMutexLocker($/;"	f	class:QCStMutexLocker
QCStMutexLocker	cc/qcdio/qcstutils.h	/^class QCStMutexLocker$/;"	c
QCStMutexUnlocker	cc/qcdio/qcstutils.h	/^    QCStMutexUnlocker($/;"	f	class:QCStMutexUnlocker
QCStMutexUnlocker	cc/qcdio/qcstutils.h	/^class QCStMutexUnlocker$/;"	c
QCStValueChanger	cc/qcdio/qcstutils.h	/^    QCStValueChanger($/;"	f	class:QCStValueChanger
QCStValueChanger	cc/qcdio/qcstutils.h	/^class QCStValueChanger$/;"	c
QCStValueIncrementor	cc/qcdio/qcstutils.h	/^    QCStValueIncrementor($/;"	f	class:QCStValueIncrementor
QCStValueIncrementor	cc/qcdio/qcstutils.h	/^class QCStValueIncrementor$/;"	c
QCStartedThreadList	cc/qcdio/qcthread.cpp	/^    QCStartedThreadList()$/;"	f	class:QCStartedThreadList
QCStartedThreadList	cc/qcdio/qcthread.cpp	/^class QCStartedThreadList$/;"	c	file:
QCTHREAD_H	cc/qcdio/qcthread.h	26;"	d
QCThread	cc/qcdio/qcthread.cpp	/^QCThread::QCThread($/;"	f	class:QCThread
QCThread	cc/qcdio/qcthread.h	/^class QCThread : public QCRunnable$/;"	c
QCUTILS_H	cc/qcdio/qcutils.h	26;"	d
QCUtils	cc/qcdio/qcutils.h	/^struct QCUtils$/;"	s
QCVERIFY	cc/qcdio/qcdebug.h	33;"	d
QCVERIFY	cc/qcdio/qcdebug.h	35;"	d
QC_USE_XFS_RESVSP	cc/qcdio/qcutils.cpp	39;"	d	file:
Queue	cc/meta/queue.h	/^	typedef deque<T *> Queue;$/;"	t	class:KFS::MetaQueue
Queue	cc/qcdio/qcdiskqueue.cpp	/^    Queue()$/;"	f	class:QCDiskQueue::Queue
Queue	cc/qcdio/qcdiskqueue.cpp	/^class QCDiskQueue::Queue$/;"	c	class:QCDiskQueue	file:
QueueStack	cc/libkfsClient/KfsNetClient.cc	/^    > QueueStack;$/;"	t	class:KFS::KfsNetClient::Impl	file:
RD_CRTIME	python/flogger/readdirplus.py	/^RD_CRTIME = 4$/;"	v
RD_CTIME	python/flogger/readdirplus.py	/^RD_CTIME = 3$/;"	v
RD_FILEID	python/flogger/readdirplus.py	/^RD_FILEID = 1$/;"	v
RD_MTIME	python/flogger/readdirplus.py	/^RD_MTIME = 2$/;"	v
RD_NAME	python/flogger/readdirplus.py	/^RD_NAME = 0$/;"	v
RD_SIZE	python/flogger/readdirplus.py	/^RD_SIZE = 6$/;"	v
RD_TYPE	python/flogger/readdirplus.py	/^RD_TYPE = 5$/;"	v
READ_LEASE	cc/meta/kfstypes.h	/^	READ_LEASE,$/;"	e	enum:KFS::LeaseType
READ_WORKER_INACTIVITY_TIMEOUT	cc/libkfsClient/KfsAsyncRW.cc	/^static const int READ_WORKER_INACTIVITY_TIMEOUT = 90;$/;"	v	file:
READ_WORKER_LIFETIME	cc/libkfsClient/KfsAsyncRW.cc	/^static const int READ_WORKER_LIFETIME = 120;$/;"	v	file:
REBALANCER_REBALANCER_H	cc/rebalancer/rebalancer.h	13;"	d
REPLICATION_CHECK_INTERVAL_MSECS	cc/meta/ChunkReplicator.h	/^	static const int REPLICATION_CHECK_INTERVAL_MSECS = $/;"	m	class:KFS::ChunkReplicator
REPLICATION_CHECK_INTERVAL_SECS	cc/meta/ChunkReplicator.h	/^	static const int REPLICATION_CHECK_INTERVAL_SECS = 60;$/;"	m	class:KFS::ChunkReplicator
RETRY_DELAY_SECS	cc/libkfsClient/KfsClientInt.h	/^const int RETRY_DELAY_SECS = 5;$/;"	m	namespace:KFS
RM	cc/access/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	cc/chunk/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	cc/common/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	cc/emulator/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	cc/libkfsClient/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	cc/libkfsIO/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	cc/meta/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	cc/qcdio/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	cc/rebalancer/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	cc/telemetry/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	cc/tests/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RM	cc/tools/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
ROOTFID	cc/common/kfstypes.h	/^const fid_t ROOTFID = 2;        \/\/!< special fid for "\/$/;"	m	namespace:KFS
RackAwareReplicationVerifier	cc/emulator/LayoutEmulator.cc	/^    RackAwareReplicationVerifier(int &s, int &u, int &m, int &z,$/;"	f	class:RackAwareReplicationVerifier
RackAwareReplicationVerifier	cc/emulator/LayoutEmulator.cc	/^class RackAwareReplicationVerifier {$/;"	c	file:
RackInfo	cc/meta/LayoutManager.h	/^		RackInfo(int id) : mRackId(id), mTotalSpace(0), mAllocSpace(0) { }$/;"	f	class:KFS::RackInfo
RackInfo	cc/meta/LayoutManager.h	/^	class RackInfo {$/;"	c	namespace:KFS
RackMatcher	cc/meta/LayoutManager.h	/^		RackMatcher(uint32_t rackId) : id(rackId) { }$/;"	f	class:KFS::RackMatcher
RackMatcher	cc/meta/LayoutManager.h	/^	class RackMatcher {$/;"	c	namespace:KFS
RackSetter	cc/meta/LayoutManager.cc	/^	RackSetter(set<int> &r, bool excludeRetiring = false) :$/;"	f	class:RackSetter
RackSetter	cc/meta/LayoutManager.cc	/^class RackSetter {$/;"	c	file:
RaiseError	cc/qcdio/qcmutex.cpp	/^QCCondVar::RaiseError($/;"	f	class:QCCondVar
RaiseError	cc/qcdio/qcmutex.cpp	/^QCMutex::RaiseError($/;"	f	class:QCMutex
Random	cc/libkfsIO/NetErrorSimulator.cc	/^    typedef boost::mt19937       Random;$/;"	t	class:KFS::NetErrorSimulator	file:
RandomSeqNo	cc/meta/ChunkServer.cc	/^static seq_t RandomSeqNo()$/;"	f	file:
RandomSeqNo	cc/meta/LayoutManager.cc	/^static inline seq_t RandomSeqNo() {$/;"	f	file:
RandomSleep	cc/libkfsIO/NetErrorSimulator.cc	/^    void RandomSleep($/;"	f	class:KFS::NetErrorSimulator	file:
ReReplicationCheckIniter	cc/meta/LayoutManager.cc	/^	ReReplicationCheckIniter(CRCandidateSet &c, CRCandidateSet &p) : crset(c), prioritySet(p) { }$/;"	f	class:ReReplicationCheckIniter
ReReplicationCheckIniter	cc/meta/LayoutManager.cc	/^class ReReplicationCheckIniter {$/;"	c	file:
Read	cc/chunk/DiskIo.cc	/^DiskIo::Read($/;"	f	class:KFS::DiskIo
Read	cc/chunk/Replicator.cc	/^Replicator::Read()$/;"	f	class:Replicator
Read	cc/libkfsClient/KfsClient.cc	/^KfsClient::Read(int fd, char *buf, size_t numBytes)$/;"	f	class:KfsClient
Read	cc/libkfsClient/KfsRead.cc	/^KfsClientImpl::Read(int fd, char *buf, size_t numBytes)$/;"	f	class:KfsClientImpl
Read	cc/libkfsClient/KfsRead.cc	/^PendingChunkRead::Read(char *buf, size_t numBytes)$/;"	f	class:PendingChunkRead
Read	cc/libkfsIO/IOBuffer.cc	/^int IOBuffer::Read(int fd, int maxReadAhead \/* = -1 *\/)$/;"	f	class:IOBuffer
Read	cc/libkfsIO/IOBuffer.cc	/^int IOBufferData::Read(int fd, int maxReadAhead \/* = -1 *\/)$/;"	f	class:IOBufferData
Read	cc/qcdio/qcdiskqueue.h	/^    EnqueueStatus Read($/;"	f	class:QCDiskQueue
ReadChunk	cc/chunk/ChunkManager.cc	/^ChunkManager::ReadChunk(ReadOp *op)$/;"	f	class:KFS::ChunkManager
ReadChunk	cc/libkfsClient/KfsRead.cc	/^KfsClientImpl::ReadChunk(int fd, char *buf, size_t numBytes)$/;"	f	class:KfsClientImpl
ReadChunkDone	cc/chunk/ChunkManager.cc	/^ChunkManager::ReadChunkDone(ReadOp *op)$/;"	f	class:KFS::ChunkManager
ReadChunkMetaNotifier	cc/chunk/KfsOps.cc	/^    ReadChunkMetaNotifier(int r) : res(r) { }$/;"	f	class:ReadChunkMetaNotifier
ReadChunkMetaNotifier	cc/chunk/KfsOps.cc	/^class ReadChunkMetaNotifier {$/;"	c	file:
ReadChunkMetaOp	cc/chunk/KfsOps.h	/^    ReadChunkMetaOp(kfsChunkId_t c, KfsCallbackObj *o) : $/;"	f	struct:KFS::ReadChunkMetaOp
ReadChunkMetaOp	cc/chunk/KfsOps.h	/^struct ReadChunkMetaOp : public KfsOp {$/;"	s	namespace:KFS
ReadChunkMetadata	cc/chunk/ChunkManager.cc	/^ChunkManager::ReadChunkMetadata(kfsChunkId_t chunkId, KfsOp *cb)$/;"	f	class:KFS::ChunkManager
ReadChunkMetadata	cc/chunk/KfsOps.cc	/^WriteIdAllocOp::ReadChunkMetadata()$/;"	f	class:WriteIdAllocOp
ReadChunkMetadataDone	cc/chunk/ChunkManager.cc	/^ChunkManager::ReadChunkMetadataDone(kfsChunkId_t chunkId)$/;"	f	class:KFS::ChunkManager
ReadChunkServerProperties	cc/chunk/ChunkServer_main.cc	/^ReadChunkServerProperties(char *fileName)$/;"	f	file:
ReadData	cc/libkfsClient/KfsAsyncRW.cc	/^AsyncReadWorker::ReadData(int code, void *data)$/;"	f	class:AsyncReadWorker
ReadFromServer	cc/libkfsClient/KfsRead.cc	/^KfsClientImpl::ReadFromServer(int fd, char *buf, size_t numBytes)$/;"	f	class:KfsClientImpl
ReadHeader	cc/libkfsClient/KfsNetClient.cc	/^    bool ReadHeader($/;"	f	class:KFS::KfsNetClient::Impl	file:
ReadLine	cc/libkfsIO/BufferedSocket.cc	/^BufferedSocket::ReadLine(string &result)$/;"	f	class:BufferedSocket
ReadMetaServerProperties	cc/meta/metaserver_main.cc	/^ReadMetaServerProperties(char *fileName)$/;"	f
ReadNetworkDefn	cc/emulator/LayoutEmulator.cc	/^LayoutEmulator::ReadNetworkDefn(const string &networkFn)$/;"	f	class:LayoutEmulator
ReadOp	cc/chunk/KfsOps.h	/^    ReadOp(WriteOp *w, off_t o, size_t n) :$/;"	f	struct:KFS::ReadOp
ReadOp	cc/chunk/KfsOps.h	/^    ReadOp(kfsSeq_t s) :$/;"	f	struct:KFS::ReadOp
ReadOp	cc/chunk/KfsOps.h	/^struct ReadOp : public KfsOp {$/;"	s	namespace:KFS
ReadOp	cc/libkfsClient/KfsOps.h	/^    ReadOp(kfsSeq_t s, kfsChunkId_t c, int64_t v) :$/;"	f	struct:KFS::ReadOp
ReadOp	cc/libkfsClient/KfsOps.h	/^struct ReadOp : public KfsOp {$/;"	s	namespace:KFS
ReadPending	cc/chunk/DiskIo.cc	/^    void ReadPending($/;"	f	class:KFS::DiskIoQueues
ReadPrefetch	cc/libkfsClient/KfsClient.cc	/^KfsClient::ReadPrefetch(int fd, char *buf, size_t numBytes)$/;"	f	class:KfsClient
ReadPrefetch	cc/libkfsClient/KfsRead.cc	/^KfsClientImpl::ReadPrefetch(int fd, char *buf, size_t numBytes)$/;"	f	class:KfsClientImpl
ReadResponseHeader	cc/libkfsClient/KfsAsyncRW.cc	/^AsyncReadWorker::ReadResponseHeader(int code, void *data)$/;"	f	class:AsyncReadWorker
Readdir	cc/libkfsClient/KfsClient.cc	/^KfsClient::Readdir(const char *pathname, std::vector<std::string> &result)$/;"	f	class:KfsClient
Readdir	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::Readdir(const char *pathname, vector<string> &result)$/;"	f	class:KfsClientImpl
ReaddirOp	cc/libkfsClient/KfsOps.h	/^    ReaddirOp(kfsSeq_t s, kfsFileId_t f):$/;"	f	struct:KFS::ReaddirOp
ReaddirOp	cc/libkfsClient/KfsOps.h	/^struct ReaddirOp : public KfsOp {$/;"	s	namespace:KFS
ReaddirPlus	cc/libkfsClient/KfsClient.cc	/^KfsClient::ReaddirPlus(const char *pathname, std::vector<KfsFileAttr> &result)$/;"	f	class:KfsClient
ReaddirPlus	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::ReaddirPlus(const char *pathname, kfsFileId_t dirFid, $/;"	f	class:KfsClientImpl
ReaddirPlus	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::ReaddirPlus(const char *pathname, vector<KfsFileAttr> &result,$/;"	f	class:KfsClientImpl
ReaddirPlusOp	cc/libkfsClient/KfsOps.h	/^    ReaddirPlusOp(kfsSeq_t s, kfsFileId_t f):$/;"	f	struct:KFS::ReaddirPlusOp
ReaddirPlusOp	cc/libkfsClient/KfsOps.h	/^struct ReaddirPlusOp : public KfsOp {$/;"	s	namespace:KFS
ReallocIfNeeded	cc/meta/LayoutManager.cc	/^template<typename T> static T& ReallocIfNeeded(T& vec) {$/;"	f	file:
RebalancePlanExecutor	cc/meta/LayoutManager.cc	/^	RebalancePlanExecutor(LayoutManager *l) : mgr(l) { }$/;"	f	class:RebalancePlanExecutor
RebalancePlanExecutor	cc/meta/LayoutManager.cc	/^class RebalancePlanExecutor {$/;"	c	file:
RebalancePlanInfo_t	cc/meta/LayoutManager.h	/^	struct RebalancePlanInfo_t {$/;"	s	namespace:KFS
RebalancePlanInfo_t	cc/rebalancer/rebalancer.h	/^    struct RebalancePlanInfo_t {$/;"	s	namespace:KFS
RebalanceServers	cc/meta/LayoutManager.cc	/^LayoutManager::RebalanceServers()$/;"	f	class:LayoutManager
Rebalancer	cc/rebalancer/rebalancer.h	/^        Rebalancer() : mPercentVariationFromMean(0.1) { };$/;"	f	class:KFS::Rebalancer
Rebalancer	cc/rebalancer/rebalancer.h	/^    class Rebalancer {$/;"	c	namespace:KFS
RebuildPriorityReplicationList	cc/meta/LayoutManager.cc	/^LayoutManager::RebuildPriorityReplicationList()$/;"	f	class:LayoutManager
RecordAppend	cc/libkfsClient/KfsClient.cc	/^KfsClient::RecordAppend(int fd, const char *buf, int reclen)$/;"	f	class:KfsClient
RecordAppend	cc/libkfsClient/KfsWrite.cc	/^KfsClientImpl::RecordAppend(int fd, const char *buf, int reclen)$/;"	f	class:KfsClientImpl
RecordAppendOp	cc/chunk/AtomicRecordAppender.cc	/^RecordAppendOp::RecordAppendOp(kfsSeq_t s)$/;"	f	class:KFS::RecordAppendOp
RecordAppendOp	cc/chunk/KfsOps.h	/^struct RecordAppendOp : public KfsOp {$/;"	s	namespace:KFS
RecordAppendOp	cc/libkfsClient/KfsOps.h	/^    RecordAppendOp(kfsSeq_t s, kfsChunkId_t c, int64_t v, off_t o, std::vector<WriteInfo> &w) :$/;"	f	struct:KFS::RecordAppendOp
RecordAppendOp	cc/libkfsClient/KfsOps.h	/^struct RecordAppendOp : public KfsOp {$/;"	s	namespace:KFS
Recv	cc/libkfsIO/BufferedSocket.cc	/^BufferedSocket::Recv(char *buf, int bufLen)$/;"	f	class:BufferedSocket
Recv	cc/libkfsIO/TcpSocket.cc	/^int TcpSocket::Recv(char *buf, int bufLen)$/;"	f	class:TcpSocket
RecvConnection	cc/libkfsIO/Acceptor.cc	/^Acceptor::RecvConnection(int code, void *data)$/;"	f	class:Acceptor
RefillReqId	cc/qcdio/qciobufferpool.h	/^    typedef int RefillReqId;$/;"	t	class:QCIoBufferPool
Regex	cc/libkfsIO/NetErrorSimulator.cc	/^    typedef boost::regex Regex;$/;"	t	class:KFS::NetErrorSimulator	file:
Register	cc/libkfsClient/WriteAppender.cc	/^    void Register($/;"	f	class:KFS::WriteAppender::Impl
Register	cc/libkfsClient/WriteAppender.cc	/^WriteAppender::Register($/;"	f	class:KFS::WriteAppender
Register	cc/qcdio/qciobufferpool.cpp	/^QCIoBufferPool::Register($/;"	f	class:QCIoBufferPool
RegisterCounters	cc/chunk/KfsOps.cc	/^KFS::RegisterCounters()$/;"	f	class:KFS
RegisterCounters	cc/meta/request.cc	/^RegisterCounters()$/;"	f	namespace:KFS
RegisterLease	cc/chunk/LeaseClerk.cc	/^LeaseClerk::RegisterLease(kfsChunkId_t chunkId, int64_t leaseId)$/;"	f	class:LeaseClerk
RegisterLease	cc/libkfsClient/LeaseClerk.cc	/^LeaseClerk::RegisterLease(kfsChunkId_t chunkId, int64_t leaseId)$/;"	f	class:LeaseClerk
RegisterTimeoutHandler	cc/libkfsIO/NetManager.cc	/^NetManager::RegisterTimeoutHandler(ITimeout *handler)$/;"	f	class:NetManager
Release	cc/chunk/ChunkManager.cc	/^ChunkInfoHandle::Release(ChunkInfoHandle** chunkInfoLists) $/;"	f	class:KFS::ChunkInfoHandle
Release	cc/chunk/ChunkManager.cc	/^inline void ChunkManager::Release(ChunkInfoHandle& cih) {$/;"	f	class:KFS::ChunkManager
Release	cc/libkfsClient/concurrency.h	/^    void Release()$/;"	f	class:KFS::MutexLock
Release	cc/qcdio/qcunittest.cpp	/^        Iterator& Release()$/;"	f	class:QCDiskQueueTest::Iterator
Release	cc/qcdio/qcunittest.cpp	/^        virtual void Release($/;"	f	class:QCDiskQueueTest::BPClient
ReleaseAllServers	cc/chunk/RemoteSyncSM.cc	/^KFS::ReleaseAllServers(list<RemoteSyncSMPtr> &remoteSyncers)$/;"	f	class:KFS
ReleaseChunkSpaceReservations	cc/chunk/ClientSM.cc	/^ClientSM::ReleaseChunkSpaceReservations()$/;"	f	class:ClientSM
ReleaseContentBuf	cc/libkfsClient/KfsOps.h	/^    void ReleaseContentBuf() {$/;"	f	struct:KFS::KfsOp
ReleaseFileTableEntry	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::ReleaseFileTableEntry(int fte)$/;"	f	class:KfsClientImpl
ReleaseReservedSpace	cc/chunk/ClientSM.h	/^    void ReleaseReservedSpace(kfsChunkId_t chunkId, int64_t writeId) {$/;"	f	class:KFS::ClientSM
RelinquishLease	cc/chunk/LeaseClerk.cc	/^LeaseClerk::RelinquishLease(kfsChunkId_t chunkId, off_t size, bool hasChecksum, uint32_t checksum)$/;"	f	class:LeaseClerk
RelinquishLease	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::RelinquishLease(kfsChunkId_t chunkId)$/;"	f	class:KfsClientImpl
RemoteSyncSM	cc/chunk/RemoteSyncSM.cc	/^RemoteSyncSM::RemoteSyncSM(const ServerLocation &location)         $/;"	f	class:RemoteSyncSM
RemoteSyncSM	cc/chunk/RemoteSyncSM.h	/^class RemoteSyncSM : public KfsCallbackObj,$/;"	c	namespace:KFS
RemoteSyncSMMatcher	cc/chunk/RemoteSyncSM.cc	/^    RemoteSyncSMMatcher(const ServerLocation &loc) :$/;"	f	class:RemoteSyncSMMatcher
RemoteSyncSMMatcher	cc/chunk/RemoteSyncSM.cc	/^class RemoteSyncSMMatcher {$/;"	c	file:
RemoteSyncSMPtr	cc/chunk/RemoteSyncSM.h	/^typedef boost::shared_ptr<RemoteSyncSM> RemoteSyncSMPtr;$/;"	t	namespace:KFS
Remove	cc/chunk/ChunkManager.h	/^        bool Remove(bool front)$/;"	f	class:KFS::ChunkManager::PendingWrites
Remove	cc/chunk/ClientManager.h	/^    void Remove(ClientSM * \/* clnt *\/) {$/;"	f	class:KFS::ClientManager
Remove	cc/libkfsClient/KfsClient.cc	/^KfsClient::Remove(const char *pathname)$/;"	f	class:KfsClient
Remove	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::Remove(const char *pathname)$/;"	f	class:KfsClientImpl
Remove	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::Remove(const string &dirname, kfsFileId_t dirFid, const string &filename)$/;"	f	class:KfsClientImpl
Remove	cc/libkfsIO/NetErrorSimulator.cc	/^    virtual void Remove($/;"	f	class:KFS::NetErrorSimulator
Remove	cc/libkfsIO/NetManager.h	/^        virtual void Remove(NetManager& netMgr, NetConnection& conn) {}$/;"	f	class:KFS::NetManager::PollEventHook
Remove	cc/qcdio/qcdiskqueue.cpp	/^    void Remove($/;"	f	class:QCDiskQueue::Queue	file:
Remove	cc/qcdio/qcdllist.h	/^    static void Remove($/;"	f	class:QCDLList
Remove	cc/qcdio/qcdllist.h	/^    static void Remove($/;"	f	class:QCDLListOp
Remove	cc/qcdio/qcfdpoll.cpp	/^    int Remove($/;"	f	class:QCFdPoll::Impl
Remove	cc/qcdio/qcfdpoll.cpp	/^QCFdPoll::Remove($/;"	f	class:QCFdPoll
Remove	cc/qcdio/qcthread.cpp	/^    void Remove($/;"	f	class:QCStartedThreadList
RemoveChunkToServerMapping	cc/meta/LayoutManager.cc	/^LayoutManager::RemoveChunkToServerMapping(chunkId_t chunkId)$/;"	f	class:LayoutManager
RemoveCounter	cc/libkfsIO/Counter.h	/^    void RemoveCounter(Counter *counter) {$/;"	f	class:KFS::CounterManager
RemoveDirtyChunks	cc/chunk/ChunkManager.cc	/^ChunkManager::RemoveDirtyChunks()$/;"	f	class:KFS::ChunkManager
RemoveDumpsterEntry	cc/meta/kfsops.cc	/^	RemoveDumpsterEntry(fid_t d) : dir(d) { }$/;"	f	class:RemoveDumpsterEntry
RemoveDumpsterEntry	cc/meta/kfsops.cc	/^class RemoveDumpsterEntry {$/;"	c	file:
RemoveOp	cc/libkfsClient/KfsOps.h	/^    RemoveOp(kfsSeq_t s, kfsFileId_t p, const char *f, const char *pn) :$/;"	f	struct:KFS::RemoveOp
RemoveOp	cc/libkfsClient/KfsOps.h	/^struct RemoveOp : public KfsOp {$/;"	s	namespace:KFS
RemoveServer	cc/chunk/ChunkServer.cc	/^void ChunkServer::RemoveServer(RemoteSyncSM *target)$/;"	f	class:ChunkServer
RemoveServer	cc/chunk/RemoteSyncSM.cc	/^KFS::RemoveServer(list<RemoteSyncSMPtr> &remoteSyncers, RemoteSyncSM *target)$/;"	f	class:KFS
RemoveServer	cc/meta/ChunkServerFactory.cc	/^ChunkServerFactory::RemoveServer(const ChunkServer *target)$/;"	f	class:ChunkServerFactory
RemoveTimeout	cc/libkfsIO/NetManager.h	/^        void RemoveTimeout()$/;"	f	class:KFS::NetManager::Timer
Rename	cc/libkfsClient/KfsClient.cc	/^KfsClient::Rename(const char *oldpath, const char *newpath, bool overwrite)$/;"	f	class:KfsClient
Rename	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::Rename(const char *oldpath, const char *newpath, bool overwrite)$/;"	f	class:KfsClientImpl
RenameOp	cc/libkfsClient/KfsOps.h	/^    RenameOp(kfsSeq_t s, kfsFileId_t p, const char *o,$/;"	f	struct:KFS::RenameOp
RenameOp	cc/libkfsClient/KfsOps.h	/^struct RenameOp : public KfsOp {$/;"	s	namespace:KFS
RenewLease	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::RenewLease(kfsChunkId_t chunkId, const string &pathname)$/;"	f	class:KfsClientImpl
Reopen	cc/common/BufferedLogWriter.cc	/^    bool Reopen()$/;"	f	class:KFS::BufferedLogWriter::Impl
Reopen	cc/common/BufferedLogWriter.cc	/^BufferedLogWriter::Reopen()$/;"	f	class:KFS::BufferedLogWriter
Replace	cc/libkfsIO/IOBuffer.cc	/^void IOBuffer::Replace(IOBuffer *other, int offset, int numBytes)$/;"	f	class:IOBuffer
ReplaceKeepBuffersFull	cc/libkfsIO/IOBuffer.cc	/^void IOBuffer::ReplaceKeepBuffersFull(IOBuffer* srcBuf, int inOffset, int numBytes)$/;"	f	class:IOBuffer
Replay	cc/meta/replay.h	/^	Replay(): number(-1) { };$/;"	f	class:KFS::Replay
Replay	cc/meta/replay.h	/^class Replay {$/;"	c	namespace:KFS
ReplayAllocChunk	cc/chunk/ChunkManager.cc	/^ChunkManager::ReplayAllocChunk(kfsFileId_t fileId, kfsChunkId_t chunkId,$/;"	f	class:KFS::ChunkManager
ReplayChangeChunkVers	cc/chunk/ChunkManager.cc	/^ChunkManager::ReplayChangeChunkVers(kfsFileId_t fileId, kfsChunkId_t chunkId,$/;"	f	class:KFS::ChunkManager
ReplayDeleteChunk	cc/chunk/ChunkManager.cc	/^ChunkManager::ReplayDeleteChunk(kfsChunkId_t chunkId)$/;"	f	class:KFS::ChunkManager
ReplayLog	cc/chunk/Logger.cc	/^Logger::ReplayLog()$/;"	f	class:Logger
ReplayPendingMakeStable	cc/meta/LayoutManager.cc	/^LayoutManager::ReplayPendingMakeStable($/;"	f	class:LayoutManager
ReplayTruncateDone	cc/chunk/ChunkManager.cc	/^ChunkManager::ReplayTruncateDone(kfsChunkId_t chunkId, off_t chunkSize)$/;"	f	class:KFS::ChunkManager
ReplayWriteDone	cc/chunk/ChunkManager.cc	/^ChunkManager::ReplayWriteDone(kfsChunkId_t chunkId, off_t chunkSize,$/;"	f	class:KFS::ChunkManager
ReplicateChunk	cc/meta/ChunkServer.cc	/^ChunkServer::ReplicateChunk(fid_t fid, chunkId_t chunkId, seq_t chunkVersion,$/;"	f	class:ChunkServer
ReplicateChunk	cc/meta/LayoutManager.cc	/^LayoutManager::ReplicateChunk(chunkId_t chunkId, ChunkPlacementInfo &clli,$/;"	f	class:LayoutManager
ReplicateChunkDone	cc/meta/ChunkServer.h	/^		void ReplicateChunkDone(chunkId_t chunkId) {$/;"	f	class:KFS::ChunkServer
ReplicateChunkOp	cc/chunk/KfsOps.h	/^    ReplicateChunkOp(kfsSeq_t s) :$/;"	f	struct:KFS::ReplicateChunkOp
ReplicateChunkOp	cc/chunk/KfsOps.h	/^struct ReplicateChunkOp : public KfsOp {$/;"	s	namespace:KFS
ReplicateChunkToServers	cc/meta/LayoutManager.cc	/^LayoutManager::ReplicateChunkToServers(chunkId_t chunkId, ChunkPlacementInfo &clli,$/;"	f	class:LayoutManager
ReplicationCandidates	cc/meta/LayoutManager.h	/^        typedef CRCandidateSet ReplicationCandidates;$/;"	t	namespace:KFS
ReplicationDone	cc/chunk/ChunkManager.cc	/^ChunkManager::ReplicationDone(kfsChunkId_t chunkId)$/;"	f	class:KFS::ChunkManager
ReplicationDoneNotifier	cc/meta/LayoutManager.cc	/^	ReplicationDoneNotifier(chunkId_t c) : cid(c) { }$/;"	f	class:ReplicationDoneNotifier
ReplicationDoneNotifier	cc/meta/LayoutManager.cc	/^class ReplicationDoneNotifier {$/;"	c	file:
Replicator	cc/chunk/Replicator.cc	/^Replicator::Replicator(ReplicateChunkOp *op) :$/;"	f	class:Replicator
Replicator	cc/chunk/Replicator.h	/^class Replicator : public KfsCallbackObj,$/;"	c	namespace:KFS
ReplicatorPtr	cc/chunk/KfsOps.h	/^typedef boost::shared_ptr<Replicator> ReplicatorPtr;$/;"	t	namespace:KFS
ReplicatorPtr	cc/chunk/Replicator.h	/^typedef boost::shared_ptr<Replicator> ReplicatorPtr;$/;"	t	namespace:KFS
ReportCompletion	cc/libkfsClient/WriteAppender.cc	/^    void ReportCompletion()$/;"	f	class:KFS::WriteAppender::Impl	file:
ReportError	cc/chunk/DiskIo.cc	/^    void ReportError($/;"	f	class:KFS::DiskIoQueues
ReqType	cc/qcdio/qcdiskqueue.h	/^    enum ReqType$/;"	g	class:QCDiskQueue
Request	cc/chunk/KfsOps.cc	/^CloseOp::Request(ostream &os)$/;"	f	class:CloseOp
Request	cc/chunk/KfsOps.cc	/^CorruptChunkOp::Request(ostream &os)$/;"	f	class:CorruptChunkOp
Request	cc/chunk/KfsOps.cc	/^GetChunkMetadataOp::Request(ostream &os)$/;"	f	class:GetChunkMetadataOp
Request	cc/chunk/KfsOps.cc	/^GetRecordAppendOpStatus::Request(std::ostream &os)$/;"	f	class:GetRecordAppendOpStatus
Request	cc/chunk/KfsOps.cc	/^HelloMetaOp::Request(ostream &os)$/;"	f	class:HelloMetaOp
Request	cc/chunk/KfsOps.cc	/^LeaseRelinquishOp::Request(ostream &os)$/;"	f	class:LeaseRelinquishOp
Request	cc/chunk/KfsOps.cc	/^LeaseRenewOp::Request(ostream &os)$/;"	f	class:LeaseRenewOp
Request	cc/chunk/KfsOps.cc	/^ReadOp::Request(ostream &os)$/;"	f	class:ReadOp
Request	cc/chunk/KfsOps.cc	/^RecordAppendOp::Request(ostream &os)$/;"	f	class:RecordAppendOp
Request	cc/chunk/KfsOps.cc	/^SetProperties::Request(std::ostream &os)$/;"	f	class:SetProperties
Request	cc/chunk/KfsOps.cc	/^SizeOp::Request(ostream &os)$/;"	f	class:SizeOp
Request	cc/chunk/KfsOps.cc	/^WriteIdAllocOp::Request(ostream &os)$/;"	f	class:WriteIdAllocOp
Request	cc/chunk/KfsOps.cc	/^WritePrepareFwdOp::Request(ostream &os)$/;"	f	class:WritePrepareFwdOp
Request	cc/chunk/KfsOps.cc	/^WriteSyncOp::Request(ostream &os)$/;"	f	class:WriteSyncOp
Request	cc/chunk/KfsOps.h	/^    virtual void Request(std::ostream &os) {$/;"	f	struct:KFS::KfsOp
Request	cc/chunk/KfsOps.h	/^    void Request(std::ostream &os) { }$/;"	f	struct:KFS::KillRemoteSyncOp
Request	cc/chunk/KfsOps.h	/^    void Request(std::ostream &os) { }$/;"	f	struct:KFS::TimeoutOp
Request	cc/libkfsClient/KfsOps.cc	/^AllocateOp::Request(ostream &os)$/;"	f	class:AllocateOp
Request	cc/libkfsClient/KfsOps.cc	/^ChangeFileReplicationOp::Request(ostream &os)$/;"	f	class:ChangeFileReplicationOp
Request	cc/libkfsClient/KfsOps.cc	/^ChunkSpaceReleaseOp::Request(ostream &os)$/;"	f	class:ChunkSpaceReleaseOp
Request	cc/libkfsClient/KfsOps.cc	/^ChunkSpaceReserveOp::Request(ostream &os)$/;"	f	class:ChunkSpaceReserveOp
Request	cc/libkfsClient/KfsOps.cc	/^CloseOp::Request(ostream &os)$/;"	f	class:CloseOp
Request	cc/libkfsClient/KfsOps.cc	/^CoalesceBlocksOp::Request(ostream &os)$/;"	f	class:CoalesceBlocksOp
Request	cc/libkfsClient/KfsOps.cc	/^CreateOp::Request(ostream &os)$/;"	f	class:CreateOp
Request	cc/libkfsClient/KfsOps.cc	/^DumpChunkMapOp::Request(ostream &os)$/;"	f	class:DumpChunkMapOp
Request	cc/libkfsClient/KfsOps.cc	/^DumpChunkServerMapOp::Request(ostream &os)$/;"	f	class:DumpChunkServerMapOp
Request	cc/libkfsClient/KfsOps.cc	/^GetAllocOp::Request(ostream &os)$/;"	f	class:GetAllocOp
Request	cc/libkfsClient/KfsOps.cc	/^GetChunkMetadataOp::Request(ostream &os)$/;"	f	class:GetChunkMetadataOp
Request	cc/libkfsClient/KfsOps.cc	/^GetDirSummaryOp::Request(ostream &os)$/;"	f	class:GetDirSummaryOp
Request	cc/libkfsClient/KfsOps.cc	/^GetLayoutOp::Request(ostream &os)$/;"	f	class:GetLayoutOp
Request	cc/libkfsClient/KfsOps.cc	/^GetRecordAppendOpStatus::Request(ostream &os)$/;"	f	class:GetRecordAppendOpStatus
Request	cc/libkfsClient/KfsOps.cc	/^LeaseAcquireOp::Request(ostream &os)$/;"	f	class:LeaseAcquireOp
Request	cc/libkfsClient/KfsOps.cc	/^LeaseRelinquishOp::Request(ostream &os)$/;"	f	class:LeaseRelinquishOp
Request	cc/libkfsClient/KfsOps.cc	/^LeaseRenewOp::Request(ostream &os)$/;"	f	class:LeaseRenewOp
Request	cc/libkfsClient/KfsOps.cc	/^LookupOp::Request(ostream &os)$/;"	f	class:LookupOp
Request	cc/libkfsClient/KfsOps.cc	/^LookupPathOp::Request(ostream &os)$/;"	f	class:LookupPathOp
Request	cc/libkfsClient/KfsOps.cc	/^MkdirOp::Request(ostream &os)$/;"	f	class:MkdirOp
Request	cc/libkfsClient/KfsOps.cc	/^OpenOp::Request(ostream &os)$/;"	f	class:OpenOp
Request	cc/libkfsClient/KfsOps.cc	/^ReadOp::Request(ostream &os)$/;"	f	class:ReadOp
Request	cc/libkfsClient/KfsOps.cc	/^ReaddirOp::Request(ostream &os)$/;"	f	class:ReaddirOp
Request	cc/libkfsClient/KfsOps.cc	/^ReaddirPlusOp::Request(ostream &os)$/;"	f	class:ReaddirPlusOp
Request	cc/libkfsClient/KfsOps.cc	/^RecordAppendOp::Request(ostream &os)$/;"	f	class:RecordAppendOp
Request	cc/libkfsClient/KfsOps.cc	/^RemoveOp::Request(ostream &os)$/;"	f	class:RemoveOp
Request	cc/libkfsClient/KfsOps.cc	/^RenameOp::Request(ostream &os)$/;"	f	class:RenameOp
Request	cc/libkfsClient/KfsOps.cc	/^RmdirOp::Request(ostream &os)$/;"	f	class:RmdirOp
Request	cc/libkfsClient/KfsOps.cc	/^SetMtimeOp::Request(ostream &os)$/;"	f	class:SetMtimeOp
Request	cc/libkfsClient/KfsOps.cc	/^SizeOp::Request(ostream &os)$/;"	f	class:SizeOp
Request	cc/libkfsClient/KfsOps.cc	/^TruncateOp::Request(ostream &os)$/;"	f	class:TruncateOp
Request	cc/libkfsClient/KfsOps.cc	/^UpServersOp::Request(ostream &os)$/;"	f	class:UpServersOp
Request	cc/libkfsClient/KfsOps.cc	/^WriteIdAllocOp::Request(ostream &os)$/;"	f	class:WriteIdAllocOp
Request	cc/libkfsClient/KfsOps.cc	/^WritePrepareOp::Request(ostream &os)$/;"	f	class:WritePrepareOp
Request	cc/libkfsClient/KfsOps.cc	/^WriteSyncOp::Request(ostream &os)$/;"	f	class:WriteSyncOp
Request	cc/libkfsClient/KfsProtocolWorker.cc	/^KfsProtocolWorker::Request::Request($/;"	f	class:KFS::KfsProtocolWorker::Request
Request	cc/libkfsClient/KfsProtocolWorker.h	/^    class Request$/;"	c	class:KFS::KfsProtocolWorker
Request	cc/qcdio/qcdiskqueue.cpp	/^        Request()$/;"	f	class:QCDiskQueue::Queue::Request
Request	cc/qcdio/qcdiskqueue.cpp	/^    class Request$/;"	c	class:QCDiskQueue::Queue	file:
Request	cc/tools/MonUtils.cc	/^ChunkPingOp::Request(ostringstream &os)$/;"	f	class:ChunkPingOp
Request	cc/tools/MonUtils.cc	/^ChunkStatsOp::Request(ostringstream &os)$/;"	f	class:ChunkStatsOp
Request	cc/tools/MonUtils.cc	/^MetaPingOp::Request(ostringstream &os)$/;"	f	class:MetaPingOp
Request	cc/tools/MonUtils.cc	/^MetaStatsOp::Request(ostringstream &os)$/;"	f	class:MetaStatsOp
Request	cc/tools/MonUtils.cc	/^MetaToggleWORMOp::Request(ostringstream &os)$/;"	f	class:MetaToggleWORMOp
Request	cc/tools/MonUtils.cc	/^RetireChunkserverOp::Request(ostringstream &os)$/;"	f	class:RetireChunkserverOp
RequestComplete	cc/qcdio/qcdiskqueue.cpp	/^    void RequestComplete($/;"	f	class:QCDiskQueue::Queue	file:
RequestCount	cc/chunk/BufferManager.h	/^    typedef int64_t RequestCount;$/;"	t	class:KFS::BufferManager
RequestDone	cc/chunk/ClientManager.h	/^    void RequestDone(int64_t requestTimeMicroSecs, const KfsOp& op) {$/;"	f	class:KFS::ClientManager
RequestDone	cc/meta/LayoutManager.cc	/^ARAChunkCache::RequestDone(const MetaAllocate& req)$/;"	f	class:ARAChunkCache
RequestId	cc/qcdio/qcdiskqueue.h	/^    typedef int      RequestId;$/;"	t	class:QCDiskQueue
RequestIdx	cc/qcdio/qcdiskqueue.cpp	/^    typedef unsigned int RequestIdx;$/;"	t	class:QCDiskQueue::Queue	file:
RequestLengthExceeded	cc/chunk/ClientManager.h	/^    void RequestLengthExceeded() {$/;"	f	class:KFS::ClientManager
RequestNew	cc/meta/LayoutManager.cc	/^ARAChunkCache::RequestNew(MetaAllocate& req)$/;"	f	class:ARAChunkCache
RequestStatsGatherer	cc/meta/ClientSM.cc	/^	RequestStatsGatherer()$/;"	f	class:RequestStatsGatherer
RequestStatsGatherer	cc/meta/ClientSM.cc	/^static class RequestStatsGatherer$/;"	c	file:
RequestType	cc/libkfsClient/KfsProtocolWorker.h	/^    enum RequestType$/;"	g	class:KFS::KfsProtocolWorker
RequestWaiter	cc/qcdio/qcdiskqueue.cpp	/^    RequestWaiter($/;"	f	class:QCDiskQueue::RequestWaiter
RequestWaiter	cc/qcdio/qcdiskqueue.cpp	/^class QCDiskQueue::RequestWaiter : public QCDiskQueue::IoCompletion$/;"	c	class:QCDiskQueue	file:
RequestWaiter	cc/qcdio/qcunittest.cpp	/^        RequestWaiter()$/;"	f	class:QCDiskQueueTest::RequestWaiter
RequestWaiter	cc/qcdio/qcunittest.cpp	/^    class RequestWaiter : public QCDiskQueue::IoCompletion$/;"	c	class:QCDiskQueueTest	file:
ReserveFileSpace	cc/qcdio/qcutils.cpp	/^QCUtils::ReserveFileSpace($/;"	f	class:QCUtils
ReserveSpace	cc/chunk/DiskIo.cc	/^DiskIo::File::ReserveSpace($/;"	f	class:KFS::DiskIo::File
ReserveSpace	cc/libkfsClient/WriteAppender.cc	/^    bool ReserveSpace()$/;"	f	class:KFS::WriteAppender::Impl	file:
Reset	cc/chunk/DiskIo.cc	/^DiskIo::File::Reset()$/;"	f	class:KFS::DiskIo::File
Reset	cc/chunk/KfsOps.h	/^    void Reset() {$/;"	f	struct:KFS::WriteOp
Reset	cc/common/kfsdecls.h	/^    void Reset(const char *h, int p) {$/;"	f	struct:KFS::ServerLocation
Reset	cc/libkfsClient/KfsAttr.h	/^    void Reset() {$/;"	f	struct:KFS::FileAttr
Reset	cc/libkfsClient/KfsClientInt.h	/^    void Reset() { Start(-1, 0); }$/;"	f	class:KFS::PendingChunkRead
Reset	cc/libkfsClient/KfsClientInt.h	/^    void Reset() {$/;"	f	struct:KFS::FilePosition
Reset	cc/libkfsClient/KfsNetClient.cc	/^    void Reset()$/;"	f	class:KFS::KfsNetClient::Impl	file:
Reset	cc/libkfsClient/KfsProtocolWorker.cc	/^        SyncRequest& Reset($/;"	f	class:KFS::KfsProtocolWorker::Impl::SyncRequest
Reset	cc/libkfsClient/KfsProtocolWorker.cc	/^KfsProtocolWorker::Request::Reset($/;"	f	class:KFS::KfsProtocolWorker::Request
Reset	cc/libkfsClient/WriteAppender.cc	/^    void Reset($/;"	f	class:KFS::WriteAppender::Impl	file:
Reset	cc/libkfsClient/WriteAppender.cc	/^    void Reset()$/;"	f	class:KFS::WriteAppender::Impl	file:
Reset	cc/libkfsIO/BufferedSocket.h	/^    void Reset() {$/;"	f	class:KFS::BufferedSocket
Reset	cc/libkfsIO/Counter.h	/^    virtual void Reset() { mCount = 0; mTimeSpent = 0.0; }$/;"	f	class:KFS::Counter
Reset	cc/libkfsIO/IOBuffer.h	/^        void Reset(int maxReadLength = std::numeric_limits<int>::max())$/;"	f	class:KFS::IOBuffer::StreamBuffer
Reset	cc/qcdio/qcdllist.h	/^        void Reset()$/;"	f	class:QCDLList::Iterator
Reset	cc/qcdio/qcunittest.cpp	/^        Iterator& Reset()$/;"	f	class:QCDiskQueueTest::Iterator
ResetServers	cc/libkfsClient/KfsClientInt.h	/^    void ResetServers() {$/;"	f	struct:KFS::FilePosition
ResetTimeout	cc/libkfsIO/NetManager.cc	/^NetManager::Timer::Handler::ResetTimeout()$/;"	f	class:NetManager::Timer::Handler
ResetTimeout	cc/libkfsIO/NetManager.h	/^        void ResetTimeout()$/;"	f	class:KFS::NetManager::Timer
ResetTimer	cc/libkfsIO/ITimeout.h	/^    void ResetTimer() {$/;"	f	class:KFS::ITimeout
RespondingServer	cc/libkfsClient/KfsClient.cc	/^    RespondingServer(KfsClientImpl *cli, const ChunkLayoutInfo &lay,$/;"	f	struct:RespondingServer
RespondingServer	cc/libkfsClient/KfsClient.cc	/^struct RespondingServer {$/;"	s	file:
RespondingServer2	cc/libkfsClient/KfsClient.cc	/^    RespondingServer2(KfsClientImpl *cli, const ChunkLayoutInfo &lay) :$/;"	f	struct:RespondingServer2
RespondingServer2	cc/libkfsClient/KfsClient.cc	/^struct RespondingServer2 {$/;"	s	file:
Response	cc/chunk/KfsOps.cc	/^BeginMakeChunkStableOp::Response(std::ostream& os)$/;"	f	class:BeginMakeChunkStableOp
Response	cc/chunk/KfsOps.cc	/^DumpChunkMapOp::Response(ostream &os)$/;"	f	class:DumpChunkMapOp
Response	cc/chunk/KfsOps.cc	/^GetChunkMetadataOp::Response(ostream &os)$/;"	f	class:GetChunkMetadataOp
Response	cc/chunk/KfsOps.cc	/^GetRecordAppendOpStatus::Response(std::ostream &os)$/;"	f	class:GetRecordAppendOpStatus
Response	cc/chunk/KfsOps.cc	/^HeartbeatOp::Response(ostream &os)$/;"	f	class:HeartbeatOp
Response	cc/chunk/KfsOps.cc	/^KfsOp::Response(ostream &os)$/;"	f	class:KfsOp
Response	cc/chunk/KfsOps.cc	/^PingOp::Response(ostream &os)$/;"	f	class:PingOp
Response	cc/chunk/KfsOps.cc	/^ReadOp::Response(ostream &os)$/;"	f	class:ReadOp
Response	cc/chunk/KfsOps.cc	/^RecordAppendOp::Response(ostream &os)$/;"	f	class:RecordAppendOp
Response	cc/chunk/KfsOps.cc	/^ReplicateChunkOp::Response(ostream &os)$/;"	f	class:ReplicateChunkOp
Response	cc/chunk/KfsOps.cc	/^SizeOp::Response(ostream &os)$/;"	f	class:SizeOp
Response	cc/chunk/KfsOps.cc	/^StatsOp::Response(ostream &os)$/;"	f	class:StatsOp
Response	cc/chunk/KfsOps.cc	/^WriteIdAllocOp::Response(ostream &os)$/;"	f	class:WriteIdAllocOp
Response	cc/chunk/KfsOps.cc	/^WritePrepareOp::Response(ostream &os)$/;"	f	class:WritePrepareOp
Response	cc/chunk/KfsOps.h	/^    void Response(std::ostream &os) { };$/;"	f	struct:KFS::CheckpointOp
Response	cc/chunk/KfsOps.h	/^    void Response(std::ostream &os) { };$/;"	f	struct:KFS::WriteOp
Response	cc/chunk/KfsOps.h	/^    void Response(std::ostream &os) {$/;"	f	struct:KFS::CloseOp
ResponseContent	cc/chunk/KfsOps.h	/^    virtual void ResponseContent(IOBuffer*& buf, int& size) {$/;"	f	struct:KFS::KfsOp
ResponseContent	cc/chunk/KfsOps.h	/^    void ResponseContent(IOBuffer*& buf, int& size) {$/;"	f	struct:KFS::GetChunkMetadataOp
ResponseContent	cc/chunk/KfsOps.h	/^    void ResponseContent(IOBuffer*& buf, int& size) {$/;"	f	struct:KFS::ReadOp
Restart	cc/chunk/ChunkManager.cc	/^ChunkManager::Restart()$/;"	f	class:KFS::ChunkManager
Restart	cc/chunk/ChunkServer_main.cc	/^    string Restart()$/;"	f	class:Restarter
Restart	cc/meta/ChunkServer.cc	/^ChunkServer::Restart()$/;"	f	class:ChunkServer
RestartChunkServer	cc/chunk/ChunkServer_main.cc	/^string RestartChunkServer()$/;"	f
RestartChunkServer	cc/chunk/chunkupgrade_main.cc	/^string RestartChunkServer()$/;"	f
RestartChunkServerOp	cc/chunk/KfsOps.h	/^    RestartChunkServerOp(kfsSeq_t seq)$/;"	f	struct:KFS::RestartChunkServerOp
RestartChunkServerOp	cc/chunk/KfsOps.h	/^struct RestartChunkServerOp : public KfsOp {$/;"	s	namespace:KFS
RestartSelf	cc/chunk/ChunkServer_main.cc	/^    static void RestartSelf()$/;"	f	class:Restarter	file:
Restarter	cc/chunk/ChunkServer_main.cc	/^    Restarter()$/;"	f	class:Restarter
Restarter	cc/chunk/ChunkServer_main.cc	/^class Restarter$/;"	c	file:
Restore	cc/chunk/ChunkManager.cc	/^ChunkManager::Restore()$/;"	f	class:KFS::ChunkManager
Restore	cc/chunk/Logger.cc	/^Logger::Restore()$/;"	f	class:Logger
Restore	cc/qcdio/qcstutils.h	/^    void Restore()$/;"	f	class:QCStValueChanger
RestoreDir	cc/tools/KfsToolsCommon.cc	/^KFS::tools::RestoreDir(KfsClientPtr kfsClient, string &kfsdirname, string &dirname)$/;"	f	class:KFS::tools
RestoreDir	cc/tools/cpfromkfs_main.cc	/^RestoreDir(string &kfsdirname, string &dirname)$/;"	f
RestoreFile	cc/tools/KfsToolsCommon.cc	/^KFS::tools::RestoreFile(KfsClientPtr kfsClient, string &kfsPath, string &localPath)$/;"	f	class:KFS::tools
RestoreFile	cc/tools/cpfromkfs_main.cc	/^RestoreFile(string &kfsPath, string &localPath)$/;"	f
RestoreFile2	cc/tools/KfsToolsCommon.cc	/^RestoreFile2(KfsClientPtr kfsClient, string kfsfilename, string localfilename)$/;"	f	file:
RestoreFile2	cc/tools/cpfromkfs_main.cc	/^RestoreFile2(string kfsfilename, string localfilename)$/;"	f
Restorer	cc/meta/restore.h	/^class Restorer {$/;"	c	namespace:KFS
ResubmitOps	cc/chunk/MetaServerSM.cc	/^MetaServerSM::ResubmitOps()$/;"	f	class:MetaServerSM
Retire	cc/meta/ChunkServer.cc	/^ChunkServer::Retire()$/;"	f	class:ChunkServer
RetireChunkserver	cc/tools/kfsretire_main.cc	/^RetireChunkserver(const ServerLocation &metaLoc, const ServerLocation &chunkLoc,$/;"	f	file:
RetireChunkserverOp	cc/tools/MonUtils.h	/^        RetireChunkserverOp(int32_t s, const KFS::ServerLocation &c, int d) :$/;"	f	struct:KFS_MON::RetireChunkserverOp
RetireChunkserverOp	cc/tools/MonUtils.h	/^    struct RetireChunkserverOp : public KfsMonOp {$/;"	s	namespace:KFS_MON
RetireOp	cc/chunk/KfsOps.h	/^    RetireOp(kfsSeq_t s) : KfsOp(CMD_RETIRE, s) { }$/;"	f	struct:KFS::RetireOp
RetireOp	cc/chunk/KfsOps.h	/^struct RetireOp : public KfsOp {$/;"	s	namespace:KFS
RetireServer	cc/meta/LayoutManager.cc	/^LayoutManager::RetireServer(const ServerLocation &loc, int downtime)$/;"	f	class:LayoutManager
RetiringServerPred	cc/meta/LayoutManager.cc	/^	RetiringServerPred() { }$/;"	f	class:RetiringServerPred
RetiringServerPred	cc/meta/LayoutManager.cc	/^class RetiringServerPred {$/;"	c	file:
RetiringStatus	cc/meta/LayoutManager.cc	/^	RetiringStatus(string &r):result(r) { }$/;"	f	class:RetiringStatus
RetiringStatus	cc/meta/LayoutManager.cc	/^class RetiringStatus {$/;"	c	file:
RetryAll	cc/libkfsClient/KfsNetClient.cc	/^    void RetryAll()$/;"	f	class:KFS::KfsNetClient::Impl	file:
RetryConnect	cc/libkfsClient/KfsNetClient.cc	/^    void RetryConnect()$/;"	f	class:KFS::KfsNetClient::Impl	file:
Rewind	cc/libkfsIO/IOBuffer.h	/^    void Rewind(int maxReadLength) {$/;"	f	class:KFS::IOBuffer::IStream
Rmdir	cc/libkfsClient/KfsClient.cc	/^KfsClient::Rmdir(const char *pathname)$/;"	f	class:KfsClient
Rmdir	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::Rmdir(const char *pathname)$/;"	f	class:KfsClientImpl
RmdirOp	cc/libkfsClient/KfsOps.h	/^    RmdirOp(kfsSeq_t s, kfsFileId_t p, const char *d, const char *pn) :$/;"	f	struct:KFS::RmdirOp
RmdirOp	cc/libkfsClient/KfsOps.h	/^struct RmdirOp : public KfsOp {$/;"	s	namespace:KFS
Rmdirs	cc/libkfsClient/KfsClient.cc	/^KfsClient::Rmdirs(const char *pathname)$/;"	f	class:KfsClient
Rmdirs	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::Rmdirs(const char *pathname)$/;"	f	class:KfsClientImpl
Rmdirs	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::Rmdirs(const string &parentDir, kfsFileId_t parentFid,$/;"	f	class:KfsClientImpl
RmdirsFast	cc/libkfsClient/KfsClient.cc	/^KfsClient::RmdirsFast(const char *pathname)$/;"	f	class:KfsClient
RmdirsFast	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::RmdirsFast(const char *pathname)$/;"	f	class:KfsClientImpl
RotateLog	cc/chunk/Logger.cc	/^Logger::RotateLog()$/;"	f	class:Logger
RotateLogs	cc/common/BufferedLogWriter.cc	/^    static void RotateLogs($/;"	f	class:KFS::BufferedLogWriter::Impl	file:
RpcStatsChunkServer	cc/tools/kfsstats_main.cc	/^RpcStatsChunkServer(TcpSocket &chunkServerSock, int numSecs)$/;"	f
RpcStatsMetaServer	cc/tools/kfsstats_main.cc	/^RpcStatsMetaServer(TcpSocket &metaServerSock, int numSecs)$/;"	f
Run	cc/common/BufferedLogWriter.cc	/^    void Run()$/;"	f	class:KFS::BufferedLogWriter::Impl
Run	cc/libkfsClient/KfsAsyncRW.cc	/^Asyncer::Run()$/;"	f	class:Asyncer
Run	cc/libkfsClient/KfsPendingOp.cc	/^KfsPendingOp::Run()$/;"	f	class:KfsPendingOp
Run	cc/libkfsClient/KfsProtocolWorker.cc	/^    virtual void Run()$/;"	f	class:KFS::KfsProtocolWorker::Impl
Run	cc/qcdio/qcdiskqueue.cpp	/^        virtual void Run()$/;"	f	class:QCDiskQueue::Queue::IoThread
Run	cc/qcdio/qcdiskqueue.cpp	/^QCDiskQueue::Queue::Run($/;"	f	class:QCDiskQueue::Queue
Run	cc/qcdio/qcthread.h	/^    virtual void Run()$/;"	f	class:QCThread
RunCompletion	cc/chunk/DiskIo.cc	/^    bool RunCompletion()$/;"	f	class:KFS::DiskIoQueues
RunCompletion	cc/chunk/DiskIo.cc	/^DiskIo::RunCompletion()$/;"	f	class:KFS::DiskIo
RunIoCompletion	cc/chunk/DiskIo.cc	/^DiskIo::RunIoCompletion()$/;"	f	class:KFS::DiskIo
RunTimers	cc/common/BufferedLogWriter.cc	/^    void RunTimers($/;"	f	class:KFS::BufferedLogWriter::Impl	file:
Runner	cc/qcdio/qcthread.cpp	/^QCThread::Runner($/;"	f	class:QCThread
SEPARATOR	cc/meta/entry.h	/^	static const char SEPARATOR = '\/';$/;"	m	class:KFS::DiskEntry
SET_HANDLER	cc/libkfsIO/KfsCallbackObj.h	/^void SET_HANDLER( T* pobj, typename ObjectMethod<T>::MethodPtr meth )$/;"	f	namespace:KFS
SHELL	cc/access/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	cc/chunk/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	cc/common/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	cc/emulator/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	cc/libkfsClient/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	cc/libkfsIO/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	cc/meta/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	cc/qcdio/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	cc/rebalancer/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	cc/telemetry/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	cc/tests/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	cc/tools/Makefile	/^SHELL = \/bin\/sh$/;"	m
SUFFIXES	cc/access/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	cc/chunk/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	cc/common/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	cc/emulator/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	cc/libkfsClient/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	cc/libkfsIO/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	cc/meta/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	cc/qcdio/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	cc/rebalancer/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	cc/telemetry/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	cc/tests/Makefile	/^SUFFIXES =$/;"	m
SUFFIXES	cc/tools/Makefile	/^SUFFIXES =$/;"	m
ScavengePendingWrites	cc/chunk/ChunkManager.cc	/^ChunkManager::ScavengePendingWrites(time_t now)$/;"	f	class:KFS::ChunkManager
Schedule	cc/libkfsIO/EventManager.cc	/^void EventManager::Schedule(EventPtr &event, int afterMs)$/;"	f	class:EventManager
ScheduleChunkServersRestart	cc/meta/LayoutManager.cc	/^void LayoutManager::ScheduleChunkServersRestart()$/;"	f	class:LayoutManager
ScheduleRestart	cc/meta/ChunkServer.cc	/^ChunkServer::ScheduleRestart(int64_t gracefulRestartTimeout, int64_t gracefulRestartAppendWithWidTimeout)$/;"	f	class:ChunkServer
ScheduleSyncMeta	cc/chunk/ChunkManager.cc	/^inline void ChunkInfoHandle::ScheduleSyncMeta(ChunkInfoHandle** chunkInfoLists) {$/;"	f	class:KFS::ChunkInfoHandle
ScheduleTimeoutNoLaterThanIn	cc/libkfsIO/NetManager.cc	/^NetManager::Timer::Handler::ScheduleTimeoutNoLaterThanIn(int tmSec)$/;"	f	class:NetManager::Timer::Handler
ScheduleTimeoutNoLaterThanIn	cc/libkfsIO/NetManager.h	/^        void ScheduleTimeoutNoLaterThanIn(int tmSec)$/;"	f	class:KFS::NetManager::Timer
ScheduleWriteChunkMetadata	cc/chunk/ChunkManager.cc	/^ChunkManager::ScheduleWriteChunkMetadata(kfsChunkId_t chunkId)$/;"	f	class:KFS::ChunkManager
Seconds	cc/common/BufferedLogWriter.cc	/^    static inline Time Seconds($/;"	f	class:KFS::BufferedLogWriter::Impl	file:
Seek	cc/libkfsClient/KfsClient.cc	/^KfsClient::Seek(int fd, off_t offset)$/;"	f	class:KfsClient
Seek	cc/libkfsClient/KfsClient.cc	/^KfsClient::Seek(int fd, off_t offset, int whence)$/;"	f	class:KfsClient
Seek	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::Seek(int fd, off_t offset)$/;"	f	class:KfsClientImpl
Seek	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::Seek(int fd, off_t offset, int whence, bool flushIfBufDirty)$/;"	f	class:KfsClientImpl
Send	cc/libkfsIO/TcpSocket.cc	/^int TcpSocket::Send(const char *buf, int bufLen)$/;"	f	class:TcpSocket
SendCommit	cc/libkfsClient/KfsWrite.cc	/^KfsClientImpl::SendCommit(int fd, off_t offset, size_t numBytes, $/;"	f	class:KfsClientImpl
SendCommitAck	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppender::SendCommitAck()$/;"	f	class:KFS::AtomicRecordAppender
SendHello	cc/chunk/MetaServerSM.cc	/^MetaServerSM::SendHello()$/;"	f	class:MetaServerSM
SendResponse	cc/chunk/ClientSM.cc	/^ClientSM::SendResponse(KfsOp *op)$/;"	f	class:ClientSM
SendResponse	cc/chunk/ClientSM.cc	/^inline void ClientSM::SendResponse(KfsOp* op, ClientSM::ByteCount opBytes)$/;"	f	class:ClientSM
SendResponse	cc/meta/ChunkServer.cc	/^ChunkServer::SendResponse(MetaChunkRequest *op)$/;"	f	class:ChunkServer
SendResponse	cc/meta/ClientSM.cc	/^ClientSM::SendResponse(MetaRequest *op)$/;"	f	class:ClientSM
SendTelemetryReport	cc/chunk/ChunkServer.cc	/^ChunkServer::SendTelemetryReport(KfsOp_t op, double timeSpent)$/;"	f	class:ChunkServer
Serialize	cc/chunk/Chunk.h	/^    void Serialize(IOBuffer *dataBuf) {$/;"	f	struct:KFS::ChunkInfo_t
ServerDown	cc/meta/LayoutManager.cc	/^LayoutManager::ServerDown(ChunkServer *server)$/;"	f	class:LayoutManager
ServerID	cc/meta/ChunkServer.h	/^		string ServerID() const$/;"	f	class:KFS::ChunkServer
ServerLocation	cc/common/kfsdecls.h	/^    ServerLocation(): hostname(""), port(-1) { }$/;"	f	struct:KFS::ServerLocation
ServerLocation	cc/common/kfsdecls.h	/^    ServerLocation(const ServerLocation &other):$/;"	f	struct:KFS::ServerLocation
ServerLocation	cc/common/kfsdecls.h	/^    ServerLocation(const std::string &h, int p): hostname(h), port(p) { }$/;"	f	struct:KFS::ServerLocation
ServerLocation	cc/common/kfsdecls.h	/^struct ServerLocation {$/;"	s	namespace:KFS
ServerLocationSet	cc/meta/LayoutManager.h	/^	> ServerLocationSet;$/;"	t	namespace:KFS
ServerSpace	cc/meta/LayoutManager.cc	/^struct ServerSpace {$/;"	s	file:
ServerSpaceUtil	cc/meta/LayoutManager.cc	/^struct ServerSpaceUtil {$/;"	s	file:
Set	cc/libkfsIO/Counter.h	/^    virtual void Set(int c) { mCount = c; }$/;"	f	class:KFS::Counter
Set	cc/libkfsIO/NetErrorSimulator.cc	/^    static bool Set($/;"	f	class:KFS::NetErrorSimulator
Set	cc/qcdio/qcfdpoll.cpp	/^    int Set($/;"	f	class:QCFdPoll::Impl
Set	cc/qcdio/qcfdpoll.cpp	/^QCFdPoll::Set($/;"	f	class:QCFdPoll
SetBacklogLimit	cc/libkfsIO/NetManager.h	/^    void SetBacklogLimit(int64_t v)$/;"	f	class:KFS::NetManager
SetBufferSize	cc/libkfsClient/KfsAsyncRW.h	/^        void SetBufferSize(size_t s) { bufsz = s; }$/;"	f	class:KFS::NullAllocator
SetCanBeChunkMaster	cc/meta/ChunkServer.h	/^                void SetCanBeChunkMaster(bool flag) {$/;"	f	class:KFS::ChunkServer
SetCanDoLowOnBuffersFlushFlag	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppender::SetCanDoLowOnBuffersFlushFlag(bool flag)$/;"	f	class:KFS::AtomicRecordAppender
SetChecksums	cc/chunk/Chunk.h	/^    void SetChecksums(const uint32_t *checksums) {$/;"	f	struct:KFS::ChunkInfo_t
SetChecksums	cc/chunk/Chunk.h	/^    void SetChecksums(const uint32_t *checksums) {$/;"	f	struct:KFS::DiskChunkInfo_t
SetChecksums	cc/chunk/chunkupgrade_main.cc	/^    void SetChecksums(const uint32_t *checksums) {$/;"	f	struct:DiskChunkInfoV1_t
SetChunkMetadata	cc/chunk/ChunkManager.cc	/^ChunkManager::SetChunkMetadata(const DiskChunkInfo_t &dci, kfsChunkId_t chunkId)$/;"	f	class:KFS::ChunkManager
SetChunkServersProperties	cc/meta/LayoutManager.cc	/^LayoutManager::SetChunkServersProperties(const Properties& props)$/;"	f	class:LayoutManager
SetConnectPending	cc/libkfsIO/NetConnection.h	/^        void SetConnectPending(bool flag) { mConnectPending = flag; }$/;"	f	class:KFS::NetConnection::NetManagerEntry
SetDefaultClient	cc/libkfsClient/KfsClient.h	/^    void SetDefaultClient(KfsClientPtr &clnt) {$/;"	f	class:KFS::KfsClientFactory
SetDefaultIOTimeout	cc/libkfsClient/KfsClient.cc	/^KfsClient::SetDefaultIOTimeout(int nsecs)$/;"	f	class:KfsClient
SetDefaultIoBufferSize	cc/libkfsClient/KfsClient.cc	/^KfsClient::SetDefaultIoBufferSize(size_t size)$/;"	f	class:KfsClient
SetDefaultIoBufferSize	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::SetDefaultIoBufferSize(size_t size)$/;"	f	class:KfsClientImpl
SetDefaultReadAheadSize	cc/libkfsClient/KfsClient.cc	/^KfsClient::SetDefaultReadAheadSize(size_t size)$/;"	f	class:KfsClient
SetDefaultReadAheadSize	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::SetDefaultReadAheadSize(size_t size)$/;"	f	class:KfsClientImpl
SetDirname	cc/chunk/Chunk.h	/^    void SetDirname(const std::string &path) {$/;"	f	struct:KFS::ChunkInfo_t
SetDoingNonblockingConnect	cc/libkfsIO/NetConnection.h	/^    void SetDoingNonblockingConnect() {$/;"	f	class:KFS::NetConnection
SetEOFMark	cc/libkfsClient/KfsClient.cc	/^KfsClient::SetEOFMark(int fd, off_t offset)$/;"	f	class:KfsClient
SetEOFMark	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::SetEOFMark(int fd, off_t offset)$/;"	f	class:KfsClientImpl
SetEventObserver	cc/libkfsClient/KfsNetClient.cc	/^    void SetEventObserver($/;"	f	class:KFS::KfsNetClient::Impl
SetEventObserver	cc/libkfsClient/KfsNetClient.cc	/^KfsNetClient::SetEventObserver($/;"	f	class:KFS::KfsNetClient
SetFlushInterval	cc/common/BufferedLogWriter.cc	/^    void SetFlushInterval($/;"	f	class:KFS::BufferedLogWriter::Impl
SetFlushInterval	cc/common/BufferedLogWriter.cc	/^BufferedLogWriter::SetFlushInterval($/;"	f	class:KFS::BufferedLogWriter
SetForcedAllocationInterval	cc/libkfsClient/WriteAppender.cc	/^    void SetForcedAllocationInterval($/;"	f	class:KFS::WriteAppender::Impl
SetForcedAllocationInterval	cc/libkfsClient/WriteAppender.cc	/^WriteAppender::SetForcedAllocationInterval($/;"	f	class:KFS::WriteAppender
SetForkedChild	cc/libkfsIO/NetManager.h	/^    void SetForkedChild()$/;"	f	class:KFS::NetManager
SetHandler	cc/libkfsIO/KfsCallbackObj.h	/^    void SetHandler(T* pobj, typename ObjectMethod<T>::MethodPtr meth) {$/;"	f	class:KFS::KfsCallbackObj
SetIOBufferAllocator	cc/libkfsIO/IOBuffer.cc	/^bool libkfsio::SetIOBufferAllocator(libkfsio::IOBufferAllocator* allocator)$/;"	f	class:libkfsio
SetIdleTimeoutSec	cc/libkfsClient/KfsNetClient.cc	/^    void SetIdleTimeoutSec($/;"	f	class:KFS::KfsNetClient::Impl
SetIdleTimeoutSec	cc/libkfsClient/KfsNetClient.cc	/^KfsNetClient::SetIdleTimeoutSec($/;"	f	class:KFS::KfsNetClient
SetInactivityTimeout	cc/libkfsIO/NetConnection.h	/^    void SetInactivityTimeout(int nsecs) {$/;"	f	class:KFS::NetConnection
SetInterval	cc/meta/logger.h	/^	void SetInterval(int rotateIntervalSec) {$/;"	f	class:KFS::LogRotater
SetIoBufferSize	cc/libkfsClient/KfsClient.cc	/^KfsClient::SetIoBufferSize(int fd, size_t size)$/;"	f	class:KfsClient
SetIoBufferSize	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::SetIoBufferSize(int fd, size_t size)$/;"	f	class:KfsClientImpl
SetLevel	cc/common/log.h	/^        static void SetLevel(LogLevel logLevel) {$/;"	f	class:KFS::MsgLogger
SetLogLevel	cc/common/BufferedLogWriter.cc	/^BufferedLogWriter::SetLogLevel($/;"	f	class:KFS::BufferedLogWriter
SetLogLevel	cc/common/BufferedLogWriter.h	/^    void SetLogLevel($/;"	f	class:KFS::BufferedLogWriter
SetLogLevel	cc/libkfsClient/KfsClient.cc	/^KfsClient::SetLogLevel(string logLevel)$/;"	f	class:KfsClient
SetLongtermWait	cc/libkfsIO/Event.h	/^    void SetLongtermWait(int waitMs) {$/;"	f	class:KFS::Event
SetMaxLogWaitTime	cc/common/BufferedLogWriter.cc	/^    void SetMaxLogWaitTime($/;"	f	class:KFS::BufferedLogWriter::Impl
SetMaxLogWaitTime	cc/common/BufferedLogWriter.cc	/^BufferedLogWriter::SetMaxLogWaitTime($/;"	f	class:KFS::BufferedLogWriter
SetMaxNumRetriesPerOp	cc/libkfsClient/KfsClientInt.h	/^    void SetMaxNumRetriesPerOp(int maxNumRetries) {$/;"	f	class:KFS::KfsClientImpl
SetMaxOutstandingIOs	cc/libkfsIO/DiskManager.h	/^    void	SetMaxOutstandingIOs(int v) {$/;"	f	class:KFS::DiskManager
SetMaxReadAhead	cc/libkfsIO/NetConnection.h	/^    void SetMaxReadAhead(int readAhead) {$/;"	f	class:KFS::NetConnection
SetMaxRetryCount	cc/libkfsClient/KfsNetClient.cc	/^    void SetMaxRetryCount($/;"	f	class:KFS::KfsNetClient::Impl
SetMaxRetryCount	cc/libkfsClient/KfsNetClient.cc	/^KfsNetClient::SetMaxRetryCount($/;"	f	class:KFS::KfsNetClient
SetMetaInfo	cc/chunk/MetaServerSM.cc	/^MetaServerSM::SetMetaInfo(const ServerLocation &metaLoc, const char *clusterKey, $/;"	f	class:MetaServerSM
SetMetaWriteInFlight	cc/chunk/ChunkManager.cc	/^inline void ChunkInfoHandle::SetMetaWriteInFlight(ChunkInfoHandle** chunkInfoLists, KfsOp* op) {$/;"	f	class:KFS::ChunkInfoHandle
SetMinChunkserversToExitRecovery	cc/meta/LayoutManager.h	/^		void SetMinChunkserversToExitRecovery(uint32_t n) {$/;"	f	class:KFS::LayoutManager
SetMtime	cc/libkfsClient/KfsClient.cc	/^KfsClient::SetMtime(const char *pathname, const struct timeval &mtime)$/;"	f	class:KfsClient
SetMtime	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::SetMtime(const char *pathname, const struct timeval &mtime)$/;"	f	class:KfsClientImpl
SetMtimeOp	cc/libkfsClient/KfsOps.h	/^    SetMtimeOp(kfsSeq_t s, const char *p, const struct timeval &m):$/;"	f	struct:KFS::SetMtimeOp
SetMtimeOp	cc/libkfsClient/KfsOps.h	/^struct SetMtimeOp : public KfsOp {$/;"	s	namespace:KFS
SetName	cc/libkfsIO/Counter.h	/^    void SetName(const char *name) {$/;"	f	class:KFS::Counter
SetOpTimeout	cc/libkfsClient/KfsNetClient.cc	/^    void SetOpTimeout($/;"	f	class:KFS::KfsNetClient::Impl
SetOpTimeout	cc/libkfsClient/KfsNetClient.cc	/^KfsNetClient::SetOpTimeout($/;"	f	class:KFS::KfsNetClient
SetOpTimeoutSec	cc/libkfsClient/KfsNetClient.cc	/^    void SetOpTimeoutSec($/;"	f	class:KFS::KfsNetClient::Impl
SetOpTimeoutSec	cc/libkfsClient/KfsNetClient.cc	/^KfsNetClient::SetOpTimeoutSec($/;"	f	class:KFS::KfsNetClient
SetOverloaded	cc/chunk/DiskIo.cc	/^    void SetOverloaded($/;"	f	class:KFS::DiskIoQueues	file:
SetOwningKfsCallbackObj	cc/libkfsIO/NetConnection.h	/^    void SetOwningKfsCallbackObj(KfsCallbackObj *c) {$/;"	f	class:KFS::NetConnection
SetParameters	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppendManager::SetParameters(const Properties& props)$/;"	f	class:KFS::AtomicRecordAppendManager
SetParameters	cc/chunk/ChunkServer_main.cc	/^    void SetParameters(const Properties& props, string prefix)$/;"	f	class:Restarter
SetParameters	cc/common/BufferedLogWriter.cc	/^    void SetParameters($/;"	f	class:KFS::BufferedLogWriter::Impl
SetParameters	cc/common/BufferedLogWriter.cc	/^BufferedLogWriter::SetParameters($/;"	f	class:KFS::BufferedLogWriter
SetParameters	cc/libkfsIO/NetErrorSimulator.cc	/^    bool SetParameters($/;"	f	class:KFS::NetErrorSimulator
SetParameters	cc/meta/ChunkServer.cc	/^void ChunkServer::SetParameters(const Properties& prop)$/;"	f	class:ChunkServer
SetParameters	cc/meta/ClientSM.cc	/^ClientSM::SetParameters(const Properties& prop)$/;"	f	class:ClientSM
SetParameters	cc/meta/LayoutManager.cc	/^LayoutManager::SetParameters(const Properties& props)$/;"	f	class:LayoutManager
SetPollEventHook	cc/libkfsIO/NetManager.h	/^    PollEventHook* SetPollEventHook(PollEventHook* hook = 0)$/;"	f	class:KFS::NetManager
SetPreAllocation	cc/libkfsClient/WriteAppender.cc	/^    int SetPreAllocation($/;"	f	class:KFS::WriteAppender::Impl
SetPreAllocation	cc/libkfsClient/WriteAppender.cc	/^WriteAppender::SetPreAllocation($/;"	f	class:KFS::WriteAppender
SetPreferredServer	cc/libkfsClient/KfsClientInt.h	/^    void SetPreferredServer(const ServerLocation &loc, bool nonblockingConnect = false) {$/;"	f	struct:KFS::FilePosition
SetProperties	cc/chunk/KfsOps.h	/^    SetProperties(kfsSeq_t seq)$/;"	f	struct:KFS::SetProperties
SetProperties	cc/chunk/KfsOps.h	/^struct SetProperties : public KfsOp {$/;"	s	namespace:KFS
SetProperties	cc/meta/ChunkServer.cc	/^ChunkServer::SetProperties(const Properties& props)$/;"	f	class:ChunkServer
SetRack	cc/meta/ChunkServer.h	/^		void SetRack(int rackId) {$/;"	f	class:KFS::ChunkServer
SetReadAhead	cc/libkfsClient/KfsClientInt.h	/^    void SetReadAhead(size_t readAhead) { mReadAhead = readAhead; }$/;"	f	class:KFS::PendingChunkRead
SetReadAheadSize	cc/libkfsClient/KfsClient.cc	/^KfsClient::SetReadAheadSize(int fd, size_t size)$/;"	f	class:KfsClient
SetReadAheadSize	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::SetReadAheadSize(int fd, size_t size)$/;"	f	class:KfsClientImpl
SetRebalancePlanOutFd	cc/emulator/ChunkServerEmulator.h	/^        void SetRebalancePlanOutFd(int fd) {$/;"	f	class:KFS::ChunkServerEmulator
SetRebalancePlanOutFile	cc/emulator/LayoutEmulator.cc	/^LayoutEmulator::SetRebalancePlanOutFile(const string &rebalancePlanFn)$/;"	f	class:LayoutEmulator
SetRecoveryInterval	cc/meta/LayoutManager.h	/^		void SetRecoveryInterval(int secs) { $/;"	f	class:KFS::LayoutManager
SetReplicationFactor	cc/libkfsClient/KfsClient.cc	/^KfsClient::SetReplicationFactor(const char *pathname, int16_t numReplicas)$/;"	f	class:KfsClient
SetReplicationFactor	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::SetReplicationFactor(const char *pathname, int16_t numReplicas)$/;"	f	class:KfsClientImpl
SetResponseTimeoutSec	cc/chunk/RemoteSyncSM.h	/^    static void SetResponseTimeoutSec(int timeoutSec) {$/;"	f	class:KFS::RemoteSyncSM
SetRetiring	cc/meta/ChunkServer.cc	/^ChunkServer::SetRetiring()$/;"	f	class:ChunkServer
SetRetryConnectOnly	cc/libkfsClient/KfsNetClient.cc	/^    void SetRetryConnectOnly($/;"	f	class:KFS::KfsNetClient::Impl
SetRetryConnectOnly	cc/libkfsClient/KfsNetClient.cc	/^KfsNetClient::SetRetryConnectOnly($/;"	f	class:KFS::KfsNetClient
SetServer	cc/libkfsClient/KfsNetClient.cc	/^    bool SetServer($/;"	f	class:KFS::KfsNetClient::Impl
SetServer	cc/libkfsClient/KfsNetClient.cc	/^KfsNetClient::SetServer($/;"	f	class:KFS::KfsNetClient
SetServerLocation	cc/meta/ChunkServer.h	/^                void SetServerLocation(const ServerLocation &loc) {$/;"	f	class:KFS::ChunkServer
SetSpace	cc/meta/ChunkServer.h	/^                void SetSpace(int64_t total, int64_t used, int64_t alloc) {$/;"	f	class:KFS::ChunkServer
SetState	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppender::SetState(State state, bool notifyIfLostFlag \/* = true *\/)$/;"	f	class:KFS::AtomicRecordAppender
SetStatus	cc/libkfsIO/Event.h	/^    void SetStatus(EventStatus_t status) {$/;"	f	class:KFS::Event
SetTimeSecBetweenRetries	cc/libkfsClient/KfsNetClient.cc	/^    void SetTimeSecBetweenRetries($/;"	f	class:KFS::KfsNetClient::Impl
SetTimeSecBetweenRetries	cc/libkfsClient/KfsNetClient.cc	/^KfsNetClient::SetTimeSecBetweenRetries($/;"	f	class:KFS::KfsNetClient
SetTimeout	cc/libkfsIO/NetManager.cc	/^NetManager::Timer::Handler::SetTimeout(int tmSec)$/;"	f	class:NetManager::Timer::Handler
SetTimeout	cc/libkfsIO/NetManager.h	/^        void SetTimeout(int tmSec)$/;"	f	class:KFS::NetManager::Timer
SetTimeoutInterval	cc/libkfsIO/ITimeout.h	/^    void SetTimeoutInterval(int intervalMs, bool resetTimer = false) {$/;"	f	class:KFS::ITimeout
SetTimeouts	cc/chunk/ClientManager.h	/^    void SetTimeouts(int ioTimeoutSec, int idleTimeoutSec)  {$/;"	f	class:KFS::ClientManager
SetTraceRequestResponse	cc/chunk/ClientSM.h	/^    static void SetTraceRequestResponse(bool flag) {$/;"	f	class:KFS::ClientSM
SetTraceRequestResponse	cc/chunk/RemoteSyncSM.h	/^    static void SetTraceRequestResponse(bool flag) {$/;"	f	class:KFS::RemoteSyncSM
SetWriteAppenderOwns	cc/chunk/ChunkManager.cc	/^inline void ChunkInfoHandle::SetWriteAppenderOwns(ChunkInfoHandle** chunkInfoLists, bool flag) {$/;"	f	class:KFS::ChunkInfoHandle
SetWriteStatus	cc/chunk/ChunkManager.cc	/^ChunkManager::SetWriteStatus(int64_t writeId, int status)$/;"	f	class:KFS::ChunkManager
SetWriteThreshold	cc/libkfsClient/WriteAppender.cc	/^    int SetWriteThreshold($/;"	f	class:KFS::WriteAppender::Impl
SetWriteThreshold	cc/libkfsClient/WriteAppender.cc	/^WriteAppender::SetWriteThreshold($/;"	f	class:KFS::WriteAppender
SetupBufferForRead	cc/libkfsClient/KfsAsyncRW.cc	/^AsyncReadWorker::SetupBufferForRead(IOBuffer *buffer, int hdrLen)$/;"	f	class:AsyncReadWorker
SetupDiskIo	cc/chunk/ChunkManager.cc	/^ChunkManager::SetupDiskIo(kfsChunkId_t chunkId, KfsOp *op)$/;"	f	class:KFS::ChunkManager
SetupForRebalancePlanning	cc/emulator/LayoutEmulator.h	/^        void SetupForRebalancePlanning(int utilVariationFromMean) {$/;"	f	class:KFS::LayoutEmulator
SetupSocket	cc/libkfsIO/TcpSocket.cc	/^void TcpSocket::SetupSocket()$/;"	f	class:TcpSocket
ShouldRenewLease	cc/libkfsClient/LeaseClerk.cc	/^LeaseClerk::ShouldRenewLease(kfsChunkId_t chunkId)$/;"	f	class:LeaseClerk
Show	cc/chunk/AtomicRecordAppender.cc	/^RecordAppendOp::Show() const$/;"	f	class:KFS::RecordAppendOp
Show	cc/chunk/KfsOps.h	/^    std::string Show() const { return "kill remote sync"; }$/;"	f	struct:KFS::KillRemoteSyncOp
Show	cc/chunk/KfsOps.h	/^    std::string Show() const { return "timeout"; }$/;"	f	struct:KFS::TimeoutOp
Show	cc/chunk/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::AllocChunkOp
Show	cc/chunk/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::BeginMakeChunkStableOp
Show	cc/chunk/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::ChangeChunkVersOp
Show	cc/chunk/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::CheckpointOp
Show	cc/chunk/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::ChunkSpaceReleaseOp
Show	cc/chunk/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::ChunkSpaceReserveOp
Show	cc/chunk/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::CloseOp
Show	cc/chunk/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::CoalesceBlockOp
Show	cc/chunk/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::CorruptChunkOp
Show	cc/chunk/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::DeleteChunkOp
Show	cc/chunk/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::DumpChunkMapOp
Show	cc/chunk/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::GetChunkMetadataOp
Show	cc/chunk/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::HeartbeatOp
Show	cc/chunk/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::HelloMetaOp
Show	cc/chunk/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::LeaseRelinquishOp
Show	cc/chunk/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::LeaseRenewOp
Show	cc/chunk/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::MakeChunkStableOp
Show	cc/chunk/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::OpenOp
Show	cc/chunk/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::PingOp
Show	cc/chunk/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::ReadChunkMetaOp
Show	cc/chunk/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::ReadOp
Show	cc/chunk/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::ReplicateChunkOp
Show	cc/chunk/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::RetireOp
Show	cc/chunk/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::SizeOp
Show	cc/chunk/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::StaleChunksOp
Show	cc/chunk/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::StatsOp
Show	cc/chunk/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::TruncateChunkOp
Show	cc/chunk/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::WriteChunkMetaOp
Show	cc/chunk/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::WriteIdAllocOp
Show	cc/chunk/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::WriteOp
Show	cc/chunk/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::WritePrepareFwdOp
Show	cc/chunk/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::WritePrepareOp
Show	cc/chunk/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::WriteSyncOp
Show	cc/chunk/KfsOps.h	/^    std::string Show() const$/;"	f	struct:KFS::GetRecordAppendOpStatus
Show	cc/chunk/KfsOps.h	/^    virtual std::string Show() const {$/;"	f	struct:KFS::RestartChunkServerOp
Show	cc/chunk/KfsOps.h	/^    virtual std::string Show() const {$/;"	f	struct:KFS::SetProperties
Show	cc/libkfsClient/KfsOps.h	/^	std::string Show() const {$/;"	f	struct:KFS::DumpChunkMapOp
Show	cc/libkfsClient/KfsOps.h	/^	std::string Show() const {$/;"	f	struct:KFS::DumpChunkServerMapOp
Show	cc/libkfsClient/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::ChangeFileReplicationOp
Show	cc/libkfsClient/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::ChunkSpaceReleaseOp
Show	cc/libkfsClient/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::ChunkSpaceReserveOp
Show	cc/libkfsClient/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::CloseOp
Show	cc/libkfsClient/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::CoalesceBlocksOp
Show	cc/libkfsClient/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::CreateOp
Show	cc/libkfsClient/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::GetAllocOp
Show	cc/libkfsClient/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::GetChunkMetadataOp
Show	cc/libkfsClient/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::GetDirSummaryOp
Show	cc/libkfsClient/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::GetLayoutOp
Show	cc/libkfsClient/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::LeaseAcquireOp
Show	cc/libkfsClient/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::LeaseRelinquishOp
Show	cc/libkfsClient/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::LeaseRenewOp
Show	cc/libkfsClient/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::LookupOp
Show	cc/libkfsClient/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::LookupPathOp
Show	cc/libkfsClient/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::MkdirOp
Show	cc/libkfsClient/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::OpenOp
Show	cc/libkfsClient/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::ReadOp
Show	cc/libkfsClient/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::ReaddirOp
Show	cc/libkfsClient/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::ReaddirPlusOp
Show	cc/libkfsClient/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::RecordAppendOp
Show	cc/libkfsClient/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::RemoveOp
Show	cc/libkfsClient/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::RenameOp
Show	cc/libkfsClient/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::RmdirOp
Show	cc/libkfsClient/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::SetMtimeOp
Show	cc/libkfsClient/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::SizeOp
Show	cc/libkfsClient/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::TruncateOp
Show	cc/libkfsClient/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::UpServersOp
Show	cc/libkfsClient/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::WriteIdAllocOp
Show	cc/libkfsClient/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::WriteInfo
Show	cc/libkfsClient/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::WritePrepareOp
Show	cc/libkfsClient/KfsOps.h	/^    std::string Show() const {$/;"	f	struct:KFS::WriteSyncOp
Show	cc/libkfsClient/KfsOps.h	/^    std::string Show() const$/;"	f	struct:KFS::GetRecordAppendOpStatus
Show	cc/libkfsClient/KfsOps.h	/^    string Show() const {$/;"	f	struct:KFS::AllocateOp
Show	cc/libkfsIO/Counter.h	/^    virtual void Show(std::ostringstream &os) {$/;"	f	class:KFS::Counter
Show	cc/libkfsIO/Counter.h	/^    void Show(std::ostringstream &os) {$/;"	f	class:KFS::CounterManager
Show	cc/meta/request.cc	/^MetaAllocate::Show() const$/;"	f	class:KFS::MetaAllocate
Show	cc/meta/request.cc	/^MetaChunkMakeStable::Show() const$/;"	f	class:KFS::MetaChunkMakeStable
Show	cc/meta/request.h	/^	string Show() const$/;"	f	struct:KFS::MetaRetireChunkserver
Show	cc/meta/request.h	/^	virtual string Show() const { return ""; }$/;"	f	struct:KFS::MetaRequest
Show	cc/meta/request.h	/^	virtual string Show() const {$/;"	f	struct:KFS::MetaBeginMakeChunkStable
Show	cc/meta/request.h	/^	virtual string Show() const {$/;"	f	struct:KFS::MetaLogMakeChunkStable
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaBye
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaChangeChunkVersionInc
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaChangeFileReplication
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaCheckLeases
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaChunkAllocate
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaChunkCorrupt
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaChunkDelete
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaChunkHeartbeat
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaChunkReplicate
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaChunkReplicationCheck
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaChunkRetire
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaChunkServerRestart
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaChunkSetProperties
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaChunkSize
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaChunkStaleNotify
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaChunkTruncate
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaChunkVersChange
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaCoalesceBlocks
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaCreate
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaDumpChunkReplicationCandidates
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaDumpChunkToServerMap
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaExecuteRebalancePlan
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaFsck
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaGetChunkServersCounters
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaGetalloc
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaGetlayout
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaHello
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaLeaseAcquire
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaLeaseCleanup
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaLeaseRelinquish
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaLeaseRenew
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaLookup
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaLookupPath
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaMkdir
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaOpenFiles
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaPing
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaReaddir
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaReaddirPlus
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaRecomputeDirsize
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaRemove
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaRename
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaRmdir
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaSetChunkServersProperties
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaSetMtime
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaStats
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaToggleRebalancing
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaToggleWORM
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaTruncate
Show	cc/meta/request.h	/^	virtual string Show() const$/;"	f	struct:KFS::MetaUpServers
Show	cc/meta/request.h	/^	virtual string Show()$/;"	f	struct:KFS::MetaReadConfig
ShowCounter	cc/libkfsIO/Counter.h	/^    ShowCounter(std::ostringstream &o) : os(o) { }$/;"	f	class:KFS::ShowCounter
ShowCounter	cc/libkfsIO/Counter.h	/^class ShowCounter {$/;"	c	namespace:KFS
ShowWriteInfo	cc/libkfsClient/KfsOps.h	/^    ShowWriteInfo(std::ostringstream &o) : os(o) { }$/;"	f	class:KFS::ShowWriteInfo
ShowWriteInfo	cc/libkfsClient/KfsOps.h	/^class ShowWriteInfo {$/;"	c	namespace:KFS
Shutdown	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppendManager::Shutdown()$/;"	f	class:KFS::AtomicRecordAppendManager
Shutdown	cc/chunk/ChunkManager.cc	/^ChunkManager::Shutdown()$/;"	f	class:KFS::ChunkManager
Shutdown	cc/chunk/DiskIo.cc	/^    bool Shutdown($/;"	f	class:KFS::DiskIoQueues
Shutdown	cc/chunk/DiskIo.cc	/^DiskIo::Shutdown($/;"	f	class:KFS::DiskIo
Shutdown	cc/libkfsClient/KfsProtocolWorker.cc	/^        void Shutdown()$/;"	f	class:KFS::KfsProtocolWorker::Impl::Appender
Shutdown	cc/libkfsClient/WriteAppender.cc	/^    void Shutdown()$/;"	f	class:KFS::WriteAppender::Impl
Shutdown	cc/libkfsClient/WriteAppender.cc	/^WriteAppender::Shutdown()$/;"	f	class:KFS::WriteAppender
Shutdown	cc/libkfsIO/NetManager.h	/^    void Shutdown()$/;"	f	class:KFS::NetManager
SigAlrmHandler	cc/chunk/ChunkServer_main.cc	/^    static void SigAlrmHandler(int \/* sig *\/)$/;"	f	class:Restarter	file:
SigQuitHandler	cc/chunk/ChunkServer_main.cc	/^static void SigQuitHandler(int \/* sig *\/)$/;"	f	file:
SimSpec	cc/libkfsIO/NetErrorSimulator.cc	/^        SimSpec($/;"	f	struct:KFS::NetErrorSimulator::SimSpec
SimSpec	cc/libkfsIO/NetErrorSimulator.cc	/^        SimSpec()$/;"	f	struct:KFS::NetErrorSimulator::SimSpec
SimSpec	cc/libkfsIO/NetErrorSimulator.cc	/^    struct SimSpec$/;"	s	class:KFS::NetErrorSimulator	file:
SimSpecs	cc/libkfsIO/NetErrorSimulator.cc	/^    typedef std::vector<SimSpec> SimSpecs;$/;"	t	class:KFS::NetErrorSimulator	file:
SizeChunk	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::SizeChunk(int fd)$/;"	f	class:KfsClientImpl
SizeChunk	cc/libkfsClient/WriteAppender.cc	/^    void SizeChunk()$/;"	f	class:KFS::WriteAppender::Impl	file:
SizeOp	cc/chunk/KfsOps.h	/^    SizeOp(kfsSeq_t s) :$/;"	f	struct:KFS::SizeOp
SizeOp	cc/chunk/KfsOps.h	/^    SizeOp(kfsSeq_t s, kfsChunkId_t c, int64_t v) :$/;"	f	struct:KFS::SizeOp
SizeOp	cc/chunk/KfsOps.h	/^struct SizeOp : public KfsOp {$/;"	s	namespace:KFS
SizeOp	cc/libkfsClient/KfsOps.h	/^    SizeOp(kfsSeq_t s, kfsChunkId_t c, int64_t v) :$/;"	f	struct:KFS::SizeOp
SizeOp	cc/libkfsClient/KfsOps.h	/^struct SizeOp : public KfsOp {$/;"	s	namespace:KFS
SkipHolesInFile	cc/libkfsClient/KfsClient.cc	/^KfsClient::SkipHolesInFile(int fd)$/;"	f	class:KfsClient
SkipHolesInFile	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::SkipHolesInFile(int fd)$/;"	f	class:KfsClientImpl
Sleep	cc/libkfsClient/Utils.cc	/^KFS::Sleep(int nsecs)$/;"	f	class:KFS
Sleep	cc/libkfsClient/WriteAppender.cc	/^    bool Sleep(int inSec)$/;"	f	class:KFS::WriteAppender::Impl	file:
Sleep	cc/libkfsIO/NetErrorSimulator.cc	/^    void Sleep($/;"	f	class:KFS::NetErrorSimulator	file:
Sleep	cc/libkfsIO/NetManager.cc	/^    bool Sleep()$/;"	f	class:NetManager::Waker
SortServersByUtilization	cc/meta/LayoutManager.cc	/^LayoutManager::SortServersByUtilization(vector<ChunkServerPtr> &servers)$/;"	f	class:LayoutManager
SpaceAvailable	cc/libkfsIO/IOBuffer.h	/^    size_t SpaceAvailable() const { return mEnd - mProducer; }$/;"	f	class:KFS::IOBufferData
SpaceAvailableLast	cc/libkfsIO/IOBuffer.h	/^    int SpaceAvailableLast() const$/;"	f	class:KFS::IOBuffer
SpaceRelease	cc/libkfsClient/WriteAppender.cc	/^    void SpaceRelease()$/;"	f	class:KFS::WriteAppender::Impl	file:
SpaceReserved	cc/chunk/AtomicRecordAppender.cc	/^    size_t SpaceReserved() const$/;"	f	class:KFS::AtomicRecordAppender
SplitBufferListAt	cc/libkfsIO/IOBuffer.cc	/^IOBuffer::SplitBufferListAt(IOBuffer::BList& buf, int& nBytes)$/;"	f	class:IOBuffer
StaleChunk	cc/chunk/ChunkManager.cc	/^ChunkManager::StaleChunk(kfsChunkId_t chunkId, bool deleteOk)$/;"	f	class:KFS::ChunkManager
StaleChunksOp	cc/chunk/KfsOps.h	/^    StaleChunksOp(kfsSeq_t s) :$/;"	f	struct:KFS::StaleChunksOp
StaleChunksOp	cc/chunk/KfsOps.h	/^struct StaleChunksOp : public KfsOp {$/;"	s	namespace:KFS
Start	cc/chunk/ChunkManager.cc	/^ChunkManager::Start()$/;"	f	class:KFS::ChunkManager
Start	cc/chunk/DiskIo.cc	/^    bool Start($/;"	f	class:KFS::DiskIoQueues
Start	cc/chunk/Logger.cc	/^Logger::Start()$/;"	f	class:Logger
Start	cc/chunk/Replicator.cc	/^Replicator::Start(RemoteSyncSMPtr &peer)$/;"	f	class:Replicator
Start	cc/common/BufferedLogWriter.cc	/^    void Start()$/;"	f	class:KFS::BufferedLogWriter::Impl
Start	cc/libkfsClient/KfsAsyncRW.cc	/^Asyncer::Start()$/;"	f	class:Asyncer
Start	cc/libkfsClient/KfsNetClient.cc	/^    bool Start($/;"	f	class:KFS::KfsNetClient::Impl
Start	cc/libkfsClient/KfsNetClient.cc	/^KfsNetClient::Start($/;"	f	class:KFS::KfsNetClient
Start	cc/libkfsClient/KfsPendingOp.cc	/^KfsPendingOp::Start($/;"	f	class:KfsPendingOp
Start	cc/libkfsClient/KfsProtocolWorker.cc	/^    void Start()$/;"	f	class:KFS::KfsProtocolWorker::Impl
Start	cc/libkfsClient/KfsProtocolWorker.cc	/^KfsProtocolWorker::Start()$/;"	f	class:KFS::KfsProtocolWorker
Start	cc/libkfsClient/KfsRead.cc	/^PendingChunkRead::Start(int fd, size_t off)$/;"	f	class:PendingChunkRead
Start	cc/meta/NetDispatch.cc	/^NetDispatch::Start(int clientAcceptPort, int chunkServerAcceptPort)$/;"	f	class:NetDispatch
Start	cc/qcdio/qcdiskqueue.cpp	/^        int Start($/;"	f	class:QCDiskQueue::Queue::IoThread
Start	cc/qcdio/qcdiskqueue.cpp	/^QCDiskQueue::Queue::Start($/;"	f	class:QCDiskQueue::Queue
Start	cc/qcdio/qcdiskqueue.cpp	/^QCDiskQueue::Start($/;"	f	class:QCDiskQueue
Start	cc/qcdio/qcthread.h	/^    void Start($/;"	f	class:QCThread
StartAcceptor	cc/chunk/ClientManager.cc	/^ClientManager::StartAcceptor(int port)$/;"	f	class:ClientManager
StartAcceptor	cc/meta/ChunkServerFactory.h	/^                void StartAcceptor(int port) {$/;"	f	class:KFS::ChunkServerFactory
StartAcceptor	cc/meta/ClientManager.h	/^        void StartAcceptor(int port) {$/;"	f	class:KFS::ClientManager
StartAppend	cc/libkfsClient/WriteAppender.cc	/^    void StartAppend()$/;"	f	class:KFS::WriteAppender::Impl	file:
StartFlush	cc/libkfsIO/NetConnection.h	/^    void StartFlush() {$/;"	f	class:KFS::NetConnection
StartIoQueue	cc/chunk/DiskIo.cc	/^DiskIo::StartIoQueue($/;"	f	class:KFS::DiskIo
StartNetProcessor	cc/chunk/ChunkServer.cc	/^StartNetProcessor()$/;"	f	file:
Stat	cc/libkfsClient/KfsClient.cc	/^KfsClient::Stat(const char *pathname, struct stat &result, bool computeFilesize)$/;"	f	class:KfsClient
Stat	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::Stat(const char *pathname, struct stat &result, bool computeFilesize)$/;"	f	class:KfsClientImpl
StatVfs	cc/chunk/ChunkManager.cc	/^typedef struct statvfs StatVfs;$/;"	t	namespace:KFS	typeref:struct:KFS::statvfs	file:
StatVfs	cc/chunk/ChunkManager.cc	/^typedef struct statvfs64 StatVfs;$/;"	t	namespace:KFS	typeref:struct:KFS::statvfs64	file:
State	cc/chunk/AtomicRecordAppender.cc	/^    enum State$/;"	g	class:KFS::AtomicRecordAppender	file:
State	cc/libkfsClient/KfsProtocolWorker.h	/^        enum State$/;"	g	class:KFS::KfsProtocolWorker::Request
Stats	cc/libkfsClient/KfsNetClient.h	/^        Stats()$/;"	f	struct:KFS::KfsNetClient::Stats
Stats	cc/libkfsClient/KfsNetClient.h	/^    struct Stats$/;"	s	class:KFS::KfsNetClient
Stats	cc/libkfsClient/WriteAppender.h	/^        Stats()$/;"	f	struct:KFS::WriteAppender::Stats
Stats	cc/libkfsClient/WriteAppender.h	/^    struct Stats$/;"	s	class:KFS::WriteAppender
StatsChunkServer	cc/tools/kfsstats_main.cc	/^StatsChunkServer(const ServerLocation &location, bool rpcStats, int numSecs)$/;"	f
StatsMetaServer	cc/tools/kfsstats_main.cc	/^StatsMetaServer(const ServerLocation &location, bool rpcStats, int numSecs)$/;"	f
StatsOp	cc/chunk/KfsOps.h	/^    StatsOp(kfsSeq_t s) :$/;"	f	struct:KFS::StatsOp
StatsOp	cc/chunk/KfsOps.h	/^struct StatsOp : public KfsOp {$/;"	s	namespace:KFS
Status	cc/qcdio/qcdiskqueue.h	/^        Status($/;"	f	class:QCDiskQueue::Status
Status	cc/qcdio/qcdiskqueue.h	/^    class Status$/;"	c	class:QCDiskQueue
Stop	cc/common/BufferedLogWriter.cc	/^    void Stop()$/;"	f	class:KFS::BufferedLogWriter::Impl
Stop	cc/common/BufferedLogWriter.cc	/^BufferedLogWriter::Stop()$/;"	f	class:KFS::BufferedLogWriter
Stop	cc/common/log.cc	/^MsgLogger::Stop()$/;"	f	class:KFS::MsgLogger
Stop	cc/libkfsClient/KfsAsyncRW.cc	/^Asyncer::Stop()$/;"	f	class:Asyncer
Stop	cc/libkfsClient/KfsNetClient.cc	/^    void Stop()$/;"	f	class:KFS::KfsNetClient::Impl
Stop	cc/libkfsClient/KfsNetClient.cc	/^KfsNetClient::Stop()$/;"	f	class:KFS::KfsNetClient
Stop	cc/libkfsClient/KfsPendingOp.cc	/^KfsPendingOp::Stop()$/;"	f	class:KfsPendingOp
Stop	cc/libkfsClient/KfsProtocolWorker.cc	/^    void Stop()$/;"	f	class:KFS::KfsProtocolWorker::Impl
Stop	cc/libkfsClient/KfsProtocolWorker.cc	/^KfsProtocolWorker::Stop()$/;"	f	class:KFS::KfsProtocolWorker
Stop	cc/qcdio/qcdiskqueue.cpp	/^    void Stop()$/;"	f	class:QCDiskQueue::Queue
Stop	cc/qcdio/qcdiskqueue.cpp	/^QCDiskQueue::Stop()$/;"	f	class:QCDiskQueue
StopNetProcessor	cc/chunk/ChunkServer.cc	/^KFS::StopNetProcessor(int status)$/;"	f	class:KFS
StopRequest	cc/libkfsClient/KfsProtocolWorker.cc	/^        StopRequest()$/;"	f	class:KFS::KfsProtocolWorker::Impl::StopRequest
StopRequest	cc/libkfsClient/KfsProtocolWorker.cc	/^    class StopRequest : public Request$/;"	c	class:KFS::KfsProtocolWorker::Impl	file:
StopSelf	cc/qcdio/qcdiskqueue.cpp	/^QCDiskQueue::Queue::StopSelf()$/;"	f	class:QCDiskQueue::Queue
StrAppend	cc/qcdio/qcutils.cpp	/^StrAppend($/;"	f	file:
StreamBuffer	cc/libkfsIO/IOBuffer.h	/^        StreamBuffer($/;"	f	class:KFS::IOBuffer::StreamBuffer
StreamBuffer	cc/libkfsIO/IOBuffer.h	/^    class StreamBuffer : public std::streambuf$/;"	c	class:KFS::IOBuffer
StringPos	cc/libkfsClient/WriteAppender.cc	/^    typedef std::string::size_type StringPos;$/;"	t	class:KFS::WriteAppender::Impl	file:
Submit	cc/chunk/Logger.cc	/^Logger::Submit(KfsOp *op)$/;"	f	class:Logger
SubmitOp	cc/chunk/KfsOps.cc	/^KFS::SubmitOp(KfsOp *op)$/;"	f	class:KFS
SubmitOp	cc/meta/ClientSM.cc	/^ClientSM::SubmitOp()$/;"	f	class:ClientSM
SubmitOpResponse	cc/chunk/KfsOps.cc	/^KFS::SubmitOpResponse(KfsOp *op)$/;"	f	class:KFS
SubmitResponse	cc/chunk/AtomicRecordAppender.cc	/^    template <typename OpT> void SubmitResponse(OpT*& listHead, OpT*& listTail)$/;"	f	class:KFS::AtomicRecordAppender	file:
SubmitResponse	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppender::SubmitResponse(BeginMakeChunkStableOp& op)$/;"	f	class:KFS::AtomicRecordAppender
SubmitResponse	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppender::SubmitResponse(MakeChunkStableOp& op)$/;"	f	class:KFS::AtomicRecordAppender
SuperFastHash	cc/common/hsieh_hash.cc	/^uint32_t SuperFastHash (const char *data, int len)$/;"	f
Sync	cc/chunk/ChunkManager.cc	/^ChunkManager::Sync(WriteOp *op)$/;"	f	class:KFS::ChunkManager
Sync	cc/chunk/DiskIo.cc	/^DiskIo::Sync($/;"	f	class:KFS::DiskIo
Sync	cc/libkfsClient/KfsClient.cc	/^KfsClient::Sync(int fd, bool flushOnlyIfHasFullChecksumBlock)$/;"	f	class:KfsClient
Sync	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::Sync(int fd, bool flushOnlyIfHasFullChecksumBlock)$/;"	f	class:KfsClientImpl
Sync	cc/qcdio/qcdiskqueue.cpp	/^QCDiskQueue::Queue::Sync($/;"	f	class:QCDiskQueue::Queue
Sync	cc/qcdio/qcdiskqueue.cpp	/^QCDiskQueue::Sync($/;"	f	class:QCDiskQueue
SyncDone	cc/chunk/DiskIo.cc	/^    void SyncDone($/;"	f	class:KFS::DiskIoQueues
SyncIo	cc/qcdio/qcdiskqueue.cpp	/^QCDiskQueue::SyncIo($/;"	f	class:QCDiskQueue
SyncMeta	cc/chunk/ChunkManager.cc	/^ChunkInfoHandle::SyncMeta()$/;"	f	class:KFS::ChunkInfoHandle
SyncRead	cc/qcdio/qcdiskqueue.h	/^    CompletionStatus SyncRead($/;"	f	class:QCDiskQueue
SyncRequest	cc/libkfsClient/KfsProtocolWorker.cc	/^        SyncRequest($/;"	f	class:KFS::KfsProtocolWorker::Impl::SyncRequest
SyncRequest	cc/libkfsClient/KfsProtocolWorker.cc	/^    class SyncRequest : public Request$/;"	c	class:KFS::KfsProtocolWorker::Impl	file:
SyncWrite	cc/qcdio/qcdiskqueue.h	/^    CompletionStatus SyncWrite($/;"	f	class:QCDiskQueue
SysError	cc/qcdio/qcutils.cpp	/^QCUtils::SysError($/;"	f	class:QCUtils
TELEMETRY_PACKET_H	cc/telemetry/packet.h	27;"	d
TELEMETRY_TELEMETRY_SRV_H	cc/telemetry/telemetry_server.h	31;"	d
TESTNAME	python/flogger/flogger.py	/^TESTNAME = "flogger"$/;"	v
TESTNAME	python/rw/rw.py	/^TESTNAME = "rw"$/;"	v
TESTNAME	python/unittests/dirops.py	/^TESTNAME = "dirops"$/;"	v
TESTNAME	python/unittests/worm.py	/^TESTNAME = "worm"$/;"	v
TESTNAME	python/unittests/write-flush.py	/^TESTNAME = "write-flush"$/;"	v
TESTNAME	python/unittests/write.py	/^TESTNAME = "write-placement"$/;"	v
THIS_FILE	cc/common/log.h	67;"	d
TOOLS_KFSCOMMON_H	cc/tools/KfsToolsCommon.h	25;"	d
TOOLS_KFSSHELL_H	cc/tools/KfsShell.h	29;"	d
TOOLS_MONUTILS_H	cc/tools/MonUtils.h	27;"	d
TcpSocket	cc/libkfsIO/TcpSocket.h	/^    TcpSocket() {$/;"	f	class:KFS::TcpSocket
TcpSocket	cc/libkfsIO/TcpSocket.h	/^    TcpSocket(int fd) {$/;"	f	class:KFS::TcpSocket
TcpSocket	cc/libkfsIO/TcpSocket.h	/^class TcpSocket {$/;"	c	namespace:KFS
TcpSocketPtr	cc/libkfsIO/TcpSocket.h	/^typedef boost::shared_ptr<TcpSocket> TcpSocketPtr;$/;"	t	namespace:KFS
TelemetryClient	cc/libkfsIO/TelemetryClient.h	/^        TelemetryClient() : mSock(-1) { }$/;"	f	class:KFS::TelemetryClient
TelemetryClient	cc/libkfsIO/TelemetryClient.h	/^    class TelemetryClient {$/;"	c	namespace:KFS
TelemetryClntPacket_t	cc/telemetry/packet.h	/^        TelemetryClntPacket_t() { }$/;"	f	struct:KFS::TelemetryClntPacket_t
TelemetryClntPacket_t	cc/telemetry/packet.h	/^        TelemetryClntPacket_t(const struct in_addr &s, const struct in_addr &t,$/;"	f	struct:KFS::TelemetryClntPacket_t
TelemetryClntPacket_t	cc/telemetry/packet.h	/^    struct TelemetryClntPacket_t {$/;"	s	namespace:KFS
TelemetryServerPacket_t	cc/telemetry/packet.h	/^        TelemetryServerPacket_t() : numNodes(0) { }$/;"	f	struct:KFS::TelemetryServerPacket_t
TelemetryServerPacket_t	cc/telemetry/packet.h	/^    struct TelemetryServerPacket_t {$/;"	s	namespace:KFS
Tell	cc/libkfsClient/KfsClient.cc	/^KfsClient::Tell(int fd)$/;"	f	class:KfsClient
Tell	cc/libkfsClient/KfsClient.cc	/^off_t KfsClientImpl::Tell(int fd)$/;"	f	class:KfsClientImpl
Terminate	cc/chunk/Replicator.cc	/^Replicator::Terminate()$/;"	f	class:Replicator
ThreadList	cc/qcdio/qcthread.cpp	/^    typedef QCDLListOp<QCThread, 0> ThreadList;$/;"	t	class:QCStartedThreadList	file:
Time	cc/common/BufferedLogWriter.cc	/^    typedef int64_t  Time;$/;"	t	class:KFS::BufferedLogWriter::Impl	file:
Time	cc/qcdio/qcdiskqueue.h	/^    typedef QCMutex::Time                  Time;$/;"	t	class:QCDiskQueue
Time	cc/qcdio/qcmutex.h	/^    typedef QCMutex::Time Time;$/;"	t	class:QCCondVar
Time	cc/qcdio/qcmutex.h	/^    typedef int64_t Time;$/;"	t	class:QCMutex
TimeNow	cc/meta/ChunkServer.cc	/^static inline time_t TimeNow()$/;"	f	file:
TimeNow	cc/meta/LayoutManager.cc	/^static inline time_t TimeNow() {$/;"	f	file:
TimeNow	cc/meta/kfsops.cc	/^static inline time_t TimeNow()$/;"	f	file:
TimeSinceLastHeartbeat	cc/meta/ChunkServer.cc	/^ChunkServer::TimeSinceLastHeartbeat() const$/;"	f	class:ChunkServer
Timeout	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppendManager::Timeout()$/;"	f	class:KFS::AtomicRecordAppendManager
Timeout	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppender::Timeout()$/;"	f	class:KFS::AtomicRecordAppender
Timeout	cc/chunk/BufferManager.cc	/^BufferManager::Timeout()$/;"	f	class:KFS::BufferManager
Timeout	cc/chunk/ChunkManager.cc	/^    virtual void Timeout() {$/;"	f	class:KFS::ChunkManager::ChunkManagerTimeoutImpl
Timeout	cc/chunk/ChunkManager.cc	/^ChunkManager::Timeout()$/;"	f	class:KFS::ChunkManager
Timeout	cc/chunk/DiskIo.cc	/^    virtual void Timeout() \/\/ ITimeout$/;"	f	class:KFS::DiskIoQueues	file:
Timeout	cc/chunk/LeaseClerk.cc	/^LeaseClerk::Timeout()$/;"	f	class:LeaseClerk
Timeout	cc/chunk/Logger.h	/^    void Timeout() {$/;"	f	class:KFS::LoggerTimeoutImpl
Timeout	cc/chunk/MetaServerSM.cc	/^MetaServerSM::Timeout()$/;"	f	class:MetaServerSM
Timeout	cc/libkfsClient/KfsAsyncRW.cc	/^Asyncer::Timeout()$/;"	f	class:Asyncer
Timeout	cc/libkfsClient/KfsNetClient.cc	/^    virtual void Timeout()$/;"	f	class:KFS::KfsNetClient::Impl	file:
Timeout	cc/libkfsClient/KfsProtocolWorker.cc	/^    virtual void Timeout()$/;"	f	class:KFS::KfsProtocolWorker::Impl
Timeout	cc/libkfsClient/WriteAppender.cc	/^    virtual void Timeout()$/;"	f	class:KFS::WriteAppender::Impl	file:
Timeout	cc/libkfsIO/EventManager.cc	/^void EventManager::Timeout()$/;"	f	class:EventManager
Timeout	cc/libkfsIO/EventManager.h	/^    virtual void Timeout() {$/;"	f	class:KFS::EventManagerTimeoutImpl
Timeout	cc/meta/ChildProcessTracker.cc	/^void ChildProcessTrackingTimer::Timeout()$/;"	f	class:KFS::ChildProcessTrackingTimer
Timeout	cc/meta/ChunkReplicator.h	/^	void Timeout() {$/;"	f	class:KFS::ChunkReplicatorTimeoutImpl
Timeout	cc/meta/ChunkServerHeartbeater.h	/^		void Timeout() {$/;"	f	class:KFS::ChunkServerHeartbeater
Timeout	cc/meta/LayoutManager.cc	/^ARAChunkCache::Timeout(time_t minTime)$/;"	f	class:ARAChunkCache
Timeout	cc/meta/LeaseCleaner.h	/^	void Timeout() {$/;"	f	class:KFS::LeaseCleanerTimeoutImpl
Timeout	cc/meta/logger.cc	/^LogRotater::Timeout()$/;"	f	class:LogRotater
TimeoutOp	cc/chunk/KfsOps.h	/^    TimeoutOp(kfsSeq_t s) :$/;"	f	struct:KFS::TimeoutOp
TimeoutOp	cc/chunk/KfsOps.h	/^struct TimeoutOp : public KfsOp {$/;"	s	namespace:KFS
Timer	cc/chunk/AtomicRecordAppender.cc	/^    typedef NetManager::Timer Timer;$/;"	t	class:KFS::AtomicRecordAppender	file:
Timer	cc/libkfsIO/NetManager.h	/^        Timer(NetManager& netManager, KfsCallbackObj& obj, int tmSec = -1)$/;"	f	class:KFS::NetManager::Timer
Timer	cc/libkfsIO/NetManager.h	/^    class Timer$/;"	c	class:KFS::NetManager
TimerExpired	cc/libkfsIO/ITimeout.h	/^    void TimerExpired(int64_t nowMs) {$/;"	f	class:KFS::ITimeout
ToString	cc/common/kfsdecls.h	/^    std::string ToString() const {$/;"	f	struct:KFS::ServerLocation
ToString	cc/meta/LayoutManager.cc	/^KFS::ToString(const CSCounters& cntrs, string rowDelim)$/;"	f	class:KFS
ToString	cc/qcdio/qcdiskqueue.cpp	/^QCDiskQueue::ToString($/;"	f	class:QCDiskQueue
ToString	cc/qcdio/qcunittest.cpp	/^    static string ToString($/;"	f	class:QCDiskQueueTest
ToString	cc/rebalancer/rebalancer.h	/^        std::string ToString() {$/;"	f	class:KFS::ChunkServer
ToggleNetThreadKicking	cc/chunk/ChunkServer.h	/^    void ToggleNetThreadKicking (bool v) {$/;"	f	class:KFS::ChunkServer
ToggleRebalancing	cc/meta/LayoutManager.h	/^		void ToggleRebalancing(bool v) {$/;"	f	class:KFS::LayoutManager
ToggleWORM	cc/tools/kfstoggleworm_main.cc	/^ToggleWORM(const ServerLocation &location, int toggle)$/;"	f
Track	cc/meta/ChildProcessTracker.cc	/^void ChildProcessTrackingTimer::Track(pid_t pid, MetaRequest *r)$/;"	f	class:KFS::ChildProcessTrackingTimer
Tree	cc/meta/kfstree.h	/^	Tree()$/;"	f	class:KFS::Tree
Tree	cc/meta/kfstree.h	/^class Tree {$/;"	c	namespace:KFS
Trim	cc/libkfsIO/IOBuffer.cc	/^int IOBufferData::Trim(int numBytes)$/;"	f	class:IOBufferData
Trim	cc/libkfsIO/IOBuffer.cc	/^void IOBuffer::Trim(int numBytes)$/;"	f	class:IOBuffer
TrimAtBufferBoundaryLeaveOnly	cc/libkfsIO/IOBuffer.cc	/^void IOBuffer::TrimAtBufferBoundaryLeaveOnly(int& offset, int& numBytes)$/;"	f	class:IOBuffer
TrimRequestList	cc/qcdio/qcdiskqueue.cpp	/^    void TrimRequestList($/;"	f	class:QCDiskQueue::Queue	file:
TrimToLastCommit	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppender::TrimToLastCommit($/;"	f	class:KFS::AtomicRecordAppender
Truncate	cc/libkfsClient/KfsClient.cc	/^KfsClient::Truncate(int fd, off_t offset)$/;"	f	class:KfsClient
Truncate	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::Truncate(int fd, off_t offset)$/;"	f	class:KfsClientImpl
TruncateChunk	cc/chunk/ChunkManager.cc	/^ChunkManager::TruncateChunk(kfsChunkId_t chunkId, off_t chunkSize)$/;"	f	class:KFS::ChunkManager
TruncateChunk	cc/meta/ChunkServer.cc	/^ChunkServer::TruncateChunk(chunkId_t chunkId, off_t s)$/;"	f	class:ChunkServer
TruncateChunk	cc/meta/LayoutManager.cc	/^LayoutManager::TruncateChunk(chunkId_t chunkId, off_t sz)$/;"	f	class:LayoutManager
TruncateChunk	cc/meta/meta.cc	/^MetaChunkInfo::TruncateChunk(off_t s)$/;"	f	class:MetaChunkInfo
TruncateChunkOp	cc/chunk/KfsOps.h	/^    TruncateChunkOp(kfsSeq_t s) :$/;"	f	struct:KFS::TruncateChunkOp
TruncateChunkOp	cc/chunk/KfsOps.h	/^struct TruncateChunkOp : public KfsOp {$/;"	s	namespace:KFS
TruncateOp	cc/libkfsClient/KfsOps.h	/^    TruncateOp(kfsSeq_t s, const char *p, kfsFileId_t f, off_t o) :$/;"	f	struct:KFS::TruncateOp
TruncateOp	cc/libkfsClient/KfsOps.h	/^struct TruncateOp : public KfsOp {$/;"	s	namespace:KFS
Truncator	cc/meta/LayoutManager.cc	/^    Truncator(chunkId_t c, off_t s) : chunkId(c), sz(s) { }$/;"	f	class:Truncator
Truncator	cc/meta/LayoutManager.cc	/^class Truncator {$/;"	c	file:
TryLock	cc/qcdio/qcmutex.h	/^    bool TryLock()$/;"	f	class:QCMutex
TryToCloseChunk	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppender::TryToCloseChunk()$/;"	f	class:KFS::AtomicRecordAppender
TryToRefill	cc/qcdio/qciobufferpool.cpp	/^QCIoBufferPool::TryToRefill($/;"	f	class:QCIoBufferPool
TryToStart	cc/qcdio/qcthread.cpp	/^QCThread::TryToStart($/;"	f	class:QCThread
UNUSED_ATTR	cc/common/config.h	42;"	d
UNUSED_ATTR	cc/common/config.h	44;"	d
UnRegister	cc/qcdio/qciobufferpool.cpp	/^QCIoBufferPool::UnRegister($/;"	f	class:QCIoBufferPool
UnRegisterLease	cc/chunk/LeaseClerk.cc	/^LeaseClerk::UnRegisterLease(kfsChunkId_t chunkId)$/;"	f	class:LeaseClerk
UnRegisterLease	cc/libkfsClient/LeaseClerk.cc	/^LeaseClerk::UnRegisterLease(kfsChunkId_t chunkId)$/;"	f	class:LeaseClerk
UnRegisterTimeoutHandler	cc/libkfsIO/NetManager.cc	/^NetManager::UnRegisterTimeoutHandler(ITimeout *handler)$/;"	f	class:NetManager
UniqueID	cc/meta/meta.h	/^	UniqueID(): n(0), seed(0) { }$/;"	f	class:KFS::UniqueID
UniqueID	cc/meta/meta.h	/^	UniqueID(seqid_t id, seqid_t s): n(id), seed(s) { }$/;"	f	class:KFS::UniqueID
UniqueID	cc/meta/meta.h	/^class UniqueID {$/;"	c	namespace:KFS
UnloadChecksums	cc/chunk/Chunk.h	/^    void UnloadChecksums() {$/;"	f	struct:KFS::ChunkInfo_t
Unlock	cc/qcdio/qcmutex.h	/^    bool Unlock()$/;"	f	class:QCMutex
Unlock	cc/qcdio/qcstutils.h	/^    void Unlock()$/;"	f	class:QCStMutexLocker
Unlock	cc/qcdio/qcstutils.h	/^    void Unlock()$/;"	f	class:QCStMutexUnlocker
Unlocked	cc/qcdio/qcmutex.h	/^    bool Unlocked()$/;"	f	class:QCMutex
Unregister	cc/chunk/BufferManager.cc	/^BufferManager::Unregister($/;"	f	class:KFS::BufferManager
Unregister	cc/chunk/BufferManager.h	/^        void Unregister()$/;"	f	class:KFS::BufferManager::Client
Unregister	cc/libkfsClient/WriteAppender.cc	/^    bool Unregister($/;"	f	class:KFS::WriteAppender::Impl
Unregister	cc/libkfsClient/WriteAppender.cc	/^WriteAppender::Unregister($/;"	f	class:KFS::WriteAppender
Unregister	cc/qcdio/qciobufferpool.cpp	/^QCIoBufferPool::Client::Unregister()$/;"	f	class:QCIoBufferPool::Client
UnregisterAllLeases	cc/chunk/LeaseClerk.cc	/^LeaseClerk::UnregisterAllLeases()$/;"	f	class:LeaseClerk
Unregistered	cc/libkfsClient/WriteAppender.h	/^        virtual void Unregistered($/;"	f	class:KFS::WriteAppender::Completion
UpServers	cc/meta/LayoutManager.cc	/^LayoutManager::UpServers(ostringstream &os)$/;"	f	class:LayoutManager
UpServersList	cc/meta/LayoutManager.cc	/^	UpServersList(ostringstream &os): os(os) { }$/;"	f	class:UpServersList
UpServersList	cc/meta/LayoutManager.cc	/^class UpServersList {$/;"	c	file:
UpServersOp	cc/libkfsClient/KfsOps.h	/^    UpServersOp(kfsSeq_t s):$/;"	f	struct:KFS::UpServersOp
UpServersOp	cc/libkfsClient/KfsOps.h	/^struct UpServersOp : public KfsOp {$/;"	s	namespace:KFS
UpTime	cc/libkfsIO/NetManager.h	/^    time_t UpTime() const$/;"	f	class:KFS::NetManager
Update	cc/libkfsIO/Counter.h	/^    virtual void Update(float timeSpent) { mTimeSpent += timeSpent; }$/;"	f	class:KFS::Counter
Update	cc/libkfsIO/Counter.h	/^    virtual void Update(int amount) { mCount += amount; }$/;"	f	class:KFS::Counter
Update	cc/libkfsIO/NetConnection.cc	/^void NetConnection::Update(bool resetTimer)$/;"	f	class:NetConnection
Update	cc/libkfsIO/NetManager.cc	/^NetManager::Update(NetConnection::NetManagerEntry& entry, int fd, bool resetTimer)$/;"	f	class:NetManager
UpdateAppenderFlushLimit	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppendManager::UpdateAppenderFlushLimit(const AtomicRecordAppender* appender \/* = 0 *\/)$/;"	f	class:KFS::AtomicRecordAppendManager
UpdateChecksums	cc/chunk/ChunkManager.cc	/^ChunkManager::UpdateChecksums(ChunkInfoHandle *cih, WriteOp *op)$/;"	f	class:KFS::ChunkManager
UpdateChunkToServerMapping	cc/meta/LayoutManager.cc	/^LayoutManager::UpdateChunkToServerMapping(chunkId_t chunkId, ChunkServer *c)$/;"	f	class:LayoutManager
UpdateCounter	cc/chunk/KfsOps.cc	/^UpdateCounter(KfsOp_t opName)$/;"	f	file:
UpdateCounter	cc/meta/request.cc	/^UpdateCounter(MetaOp opName)$/;"	f	namespace:KFS
UpdateDirSpace	cc/chunk/ChunkManager.cc	/^ChunkManager::UpdateDirSpace(ChunkInfoHandle *cih, off_t nbytes)$/;"	f	class:KFS::ChunkManager
UpdateFilesize	cc/libkfsClient/KfsClient.cc	/^KfsClient::UpdateFilesize(int fd)$/;"	f	class:KfsClient
UpdateFilesize	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::UpdateFilesize(int fd)$/;"	f	class:KfsClientImpl
UpdateFlushLimit	cc/chunk/AtomicRecordAppender.cc	/^    void UpdateFlushLimit(int flushLimit)$/;"	f	class:KFS::AtomicRecordAppender
UpdateMasterCommittedOffset	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppender::UpdateMasterCommittedOffset(off_t masterCommittedOffset)$/;"	f	class:KFS::AtomicRecordAppender
UpdateMsgProcessingTime	cc/chunk/KfsOps.cc	/^UpdateMsgProcessingTime(const KfsOp *op) $/;"	f	file:
UpdateNumChunks	cc/meta/request.cc	/^UpdateNumChunks(int count)$/;"	f	namespace:KFS
UpdateNumDirs	cc/meta/request.cc	/^UpdateNumDirs(int count)$/;"	f	namespace:KFS
UpdateNumFiles	cc/meta/request.cc	/^UpdateNumFiles(int count)$/;"	f	namespace:KFS
UpdatePendingFlush	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppendManager::UpdatePendingFlush(AtomicRecordAppender& appender)$/;"	f	class:KFS::AtomicRecordAppendManager
UpdateRecvTimeout	cc/chunk/RemoteSyncSM.cc	/^RemoteSyncSM::UpdateRecvTimeout()$/;"	f	class:RemoteSyncSM
UpdateReplicationReadLoad	cc/meta/ChunkServer.h	/^		void UpdateReplicationReadLoad(int count) {$/;"	f	class:KFS::ChunkServer
UpdateSelf	cc/libkfsIO/NetManager.cc	/^NetManager::UpdateSelf(NetConnection::NetManagerEntry& entry, int fd, bool resetTimer)$/;"	f	class:NetManager
UpdateTimeTm	cc/common/BufferedLogWriter.cc	/^    void UpdateTimeTm($/;"	f	class:KFS::BufferedLogWriter::Impl	file:
UpdateTimer	cc/libkfsIO/NetManager.cc	/^NetManager::UpdateTimer(NetConnection::NetManagerEntry& entry, int timeOut)$/;"	f	class:NetManager
Uptime	cc/meta/ChunkServer.h	/^                int64_t Uptime() const { return mUptime; }$/;"	f	class:KFS::ChunkServer
UptimeLess	cc/meta/LayoutManager.cc	/^struct UptimeLess :$/;"	s	file:
UseReservedSpace	cc/chunk/ClientSM.h	/^    size_t UseReservedSpace(kfsChunkId_t chunkId, int64_t writeId, size_t nbytes) {$/;"	f	class:KFS::ClientSM
VERSION	cc/meta/checkpoint.h	/^	static const int VERSION = 1;$/;"	m	class:KFS::Checkpoint
VERSION	cc/meta/logger.h	/^	static const int VERSION = 1;$/;"	m	class:KFS::Logger
ValidLeaseIssued	cc/meta/LayoutManager.cc	/^	ValidLeaseIssued(const CSMap &m) : chunkToServerMap(m) { }$/;"	f	class:ValidLeaseIssued
ValidLeaseIssued	cc/meta/LayoutManager.cc	/^class ValidLeaseIssued {$/;"	c	file:
ValidServer	cc/meta/LayoutManager.cc	/^LayoutManager::ValidServer(ChunkServer *c)$/;"	f	class:LayoutManager
Validate	cc/chunk/Chunk.h	/^    int Validate() const {$/;"	f	struct:KFS::DiskChunkInfo_t
Validate	cc/chunk/Chunk.h	/^    int Validate(kfsChunkId_t cid) const {$/;"	f	struct:KFS::DiskChunkInfo_t
Verify	cc/libkfsIO/IOBuffer.cc	/^void IOBuffer::Verify() const$/;"	f	class:IOBuffer
VerifyChecksum	cc/libkfsClient/KfsAsyncRW.cc	/^VerifyChecksum(ReadOp &readOp)$/;"	f	file:
VerifyChecksum	cc/libkfsClient/KfsRead.cc	/^KfsClientImpl::VerifyChecksum(ReadOp* op, TcpSocket* sock)$/;"	f	class:KfsClientImpl
VerifyChecksumsLoaded	cc/chunk/Chunk.h	/^    void VerifyChecksumsLoaded() const {$/;"	f	struct:KFS::ChunkInfo_t
VerifyDataChecksums	cc/libkfsClient/KfsClient.cc	/^KfsClient::VerifyDataChecksums(const char *pathname, const vector<uint32_t> &checksums)$/;"	f	class:KfsClient
VerifyDataChecksums	cc/libkfsClient/KfsClient.cc	/^KfsClient::VerifyDataChecksums(int fd, off_t offset, const char *buf, off_t numBytes)$/;"	f	class:KfsClient
VerifyDataChecksums	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::VerifyDataChecksums(const char *pathname, const vector<uint32_t> &checksums)$/;"	f	class:KfsClientImpl
VerifyDataChecksums	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::VerifyDataChecksums(int fd, off_t offset, const char *buf, off_t numBytes)$/;"	f	class:KfsClientImpl
VerifyDataChecksums	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::VerifyDataChecksums(int fte, const vector<uint32_t> &checksums)$/;"	f	class:KfsClientImpl
VerifyRackAwareReplication	cc/emulator/LayoutEmulator.cc	/^LayoutEmulator::VerifyRackAwareReplication(bool checkSize, bool verbose)$/;"	f	class:LayoutEmulator
WAPPEND_LOG_STREAM	cc/chunk/AtomicRecordAppender.cc	146;"	d	file:
WAPPEND_LOG_STREAM_DEBUG	cc/chunk/AtomicRecordAppender.cc	147;"	d	file:
WAPPEND_LOG_STREAM_ERROR	cc/chunk/AtomicRecordAppender.cc	150;"	d	file:
WAPPEND_LOG_STREAM_FATAL	cc/chunk/AtomicRecordAppender.cc	151;"	d	file:
WAPPEND_LOG_STREAM_INFO	cc/chunk/AtomicRecordAppender.cc	149;"	d	file:
WAPPEND_LOG_STREAM_PREFIX	cc/chunk/AtomicRecordAppender.cc	145;"	d	file:
WAPPEND_LOG_STREAM_WARN	cc/chunk/AtomicRecordAppender.cc	148;"	d	file:
WIdState	cc/chunk/AtomicRecordAppender.cc	/^        WIdState()$/;"	f	struct:KFS::AtomicRecordAppender::WIdState
WIdState	cc/chunk/AtomicRecordAppender.cc	/^    struct WIdState$/;"	s	class:KFS::AtomicRecordAppender	file:
WORMTestCase	python/unittests/worm.py	/^class WORMTestCase(unittest.TestCase):$/;"	c
WRITE_APPENDER_H	cc/libkfsClient/WriteAppender.h	26;"	d
WRITE_LEASE	cc/meta/kfstypes.h	/^	WRITE_LEASE$/;"	e	enum:KFS::LeaseType
Wait	cc/qcdio/qcdiskqueue.cpp	/^    CompletionStatus Wait($/;"	f	class:QCDiskQueue::RequestWaiter
Wait	cc/qcdio/qcdiskqueue.cpp	/^    CompletionStatus Wait()$/;"	f	class:QCDiskQueue::RequestWaiter	file:
Wait	cc/qcdio/qcmutex.cpp	/^QCCondVar::Wait($/;"	f	class:QCCondVar
Wait	cc/qcdio/qcmutex.h	/^    bool Wait($/;"	f	class:QCCondVar
Wait	cc/qcdio/qcunittest.cpp	/^        void Wait()$/;"	f	class:QCDiskQueueTest::RequestWaiter
WaitQueue	cc/chunk/BufferManager.h	/^    typedef QCDLList<Client, 0> WaitQueue;$/;"	t	class:KFS::BufferManager
Wake	cc/libkfsIO/NetManager.cc	/^    int Wake()$/;"	f	class:NetManager::Waker
Waker	cc/libkfsIO/NetManager.cc	/^    Waker()$/;"	f	class:NetManager::Waker
Waker	cc/libkfsIO/NetManager.cc	/^class NetManager::Waker$/;"	c	class:NetManager	file:
Wakeup	cc/libkfsIO/NetManager.cc	/^    void Wakeup()$/;"	f	class:NetManager::Waker
Wakeup	cc/libkfsIO/NetManager.cc	/^NetManager::Wakeup()$/;"	f	class:NetManager
WantsToKeepLease	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppendManager::WantsToKeepLease(kfsChunkId_t chunkId) const$/;"	f	class:KFS::AtomicRecordAppendManager
WantsToKeepLease	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppender::WantsToKeepLease() const$/;"	f	class:KFS::AtomicRecordAppender
WasDisconnected	cc/libkfsClient/KfsNetClient.cc	/^    bool WasDisconnected() const$/;"	f	class:KFS::KfsNetClient::Impl
WasDisconnected	cc/libkfsClient/KfsNetClient.cc	/^KfsNetClient::WasDisconnected() const$/;"	f	class:KFS::KfsNetClient
WorkQueue	cc/libkfsClient/KfsProtocolWorker.cc	/^    typedef QCDLList<Request, 0>      WorkQueue;$/;"	t	class:KFS::KfsProtocolWorker::Impl	file:
Write	cc/chunk/DiskIo.cc	/^DiskIo::Write($/;"	f	class:KFS::DiskIo
Write	cc/libkfsClient/KfsClient.cc	/^KfsClient::Write(int fd, const char *buf, size_t numBytes)$/;"	f	class:KfsClient
Write	cc/libkfsClient/KfsWrite.cc	/^KfsClientImpl::Write(int fd, const char *buf, size_t numBytes)$/;"	f	class:KfsClientImpl
Write	cc/libkfsIO/IOBuffer.cc	/^int IOBuffer::Write(int fd)$/;"	f	class:IOBuffer
Write	cc/libkfsIO/IOBuffer.cc	/^int IOBufferData::Write(int fd)$/;"	f	class:IOBufferData
Write	cc/libkfsIO/NetConnection.h	/^    void Write(IOBuffer *ioBuf) {$/;"	f	class:KFS::NetConnection
Write	cc/libkfsIO/NetConnection.h	/^    void Write(IOBuffer *ioBuf, int numBytes) {$/;"	f	class:KFS::NetConnection
Write	cc/libkfsIO/NetConnection.h	/^    void Write(const IOBufferData &ioBufData) {$/;"	f	class:KFS::NetConnection
Write	cc/libkfsIO/NetConnection.h	/^    void Write(const char *data, int numBytes) {$/;"	f	class:KFS::NetConnection
Write	cc/qcdio/qcdiskqueue.h	/^    EnqueueStatus Write($/;"	f	class:QCDiskQueue
WriteAppender	cc/libkfsClient/WriteAppender.cc	/^WriteAppender::WriteAppender($/;"	f	class:KFS::WriteAppender
WriteAppender	cc/libkfsClient/WriteAppender.h	/^class WriteAppender$/;"	c	namespace:KFS
WriteAsync	cc/libkfsClient/KfsClient.cc	/^KfsClient::WriteAsync(int fd, const char *buf, size_t numBytes)$/;"	f	class:KfsClient
WriteAsync	cc/libkfsClient/KfsWrite.cc	/^KfsClientImpl::WriteAsync(int fd, const char *buf, size_t numBytes)$/;"	f	class:KfsClientImpl
WriteAsyncCompletionHandler	cc/libkfsClient/KfsClient.cc	/^KfsClient::WriteAsyncCompletionHandler(int fd)$/;"	f	class:KfsClient
WriteAsyncCompletionHandler	cc/libkfsClient/KfsWrite.cc	/^KfsClientImpl::WriteAsyncCompletionHandler(int fd)$/;"	f	class:KfsClientImpl
WriteCancelWaiter	cc/chunk/DiskIo.cc	/^        WriteCancelWaiter()$/;"	f	class:KFS::DiskIoQueues::WriteCancelWaiter
WriteCancelWaiter	cc/chunk/DiskIo.cc	/^    class WriteCancelWaiter : public QCDiskQueue::IoCompletion$/;"	c	class:KFS::DiskIoQueues	file:
WriteChunk	cc/chunk/ChunkManager.cc	/^ChunkManager::WriteChunk(WriteOp *op)$/;"	f	class:KFS::ChunkManager
WriteChunkMetaOp	cc/chunk/KfsOps.h	/^    WriteChunkMetaOp(kfsChunkId_t c, KfsCallbackObj *o) : $/;"	f	struct:KFS::WriteChunkMetaOp
WriteChunkMetaOp	cc/chunk/KfsOps.h	/^struct WriteChunkMetaOp : public KfsOp {$/;"	s	namespace:KFS
WriteChunkMetadata	cc/chunk/ChunkManager.cc	/^ChunkManager::WriteChunkMetadata(kfsChunkId_t chunkId, KfsCallbackObj *cb)$/;"	f	class:KFS::ChunkManager
WriteCopy	cc/libkfsIO/NetConnection.h	/^    void WriteCopy(const IOBuffer *ioBuf, int numBytes) {$/;"	f	class:KFS::NetConnection
WriteFlushTestCase	python/unittests/write-flush.py	/^class WriteFlushTestCase(unittest.TestCase):$/;"	c
WriteIdAllocOp	cc/chunk/KfsOps.h	/^    WriteIdAllocOp(kfsSeq_t s) :$/;"	f	struct:KFS::WriteIdAllocOp
WriteIdAllocOp	cc/chunk/KfsOps.h	/^    WriteIdAllocOp(kfsSeq_t s, const WriteIdAllocOp& other) :$/;"	f	struct:KFS::WriteIdAllocOp
WriteIdAllocOp	cc/chunk/KfsOps.h	/^struct WriteIdAllocOp : public KfsOp {$/;"	s	namespace:KFS
WriteIdAllocOp	cc/libkfsClient/KfsOps.h	/^    WriteIdAllocOp(kfsSeq_t s, kfsChunkId_t c, int64_t v, off_t o, size_t n) :$/;"	f	struct:KFS::WriteIdAllocOp
WriteIdAllocOp	cc/libkfsClient/KfsOps.h	/^struct WriteIdAllocOp : public KfsOp {$/;"	s	namespace:KFS
WriteIdCmp	cc/chunk/ChunkManager.h	/^        struct WriteIdCmp$/;"	s	class:KFS::ChunkManager::PendingWrites
WriteIdEntry	cc/chunk/ChunkManager.h	/^        struct WriteIdEntry : public OpListEntry$/;"	s	class:KFS::ChunkManager::PendingWrites
WriteIdEntry	cc/chunk/ChunkManager.h	/^inline ChunkManager::PendingWrites::WriteIdEntry::WriteIdEntry(WriteOp* op)$/;"	f	class:KFS::ChunkManager::PendingWrites::WriteIdEntry
WriteIdSet	cc/chunk/ChunkManager.h	/^        > WriteIdSet;$/;"	t	class:KFS::ChunkManager::PendingWrites
WriteIdState	cc/chunk/AtomicRecordAppender.cc	/^    > WriteIdState;$/;"	t	class:KFS::AtomicRecordAppender	file:
WriteIds	cc/libkfsClient/WriteAppender.cc	/^    typedef std::vector<WriteInfo> WriteIds;$/;"	t	class:KFS::WriteAppender::Impl	file:
WriteInfo	cc/libkfsClient/KfsOps.h	/^    WriteInfo() : writeId(-1) { }$/;"	f	struct:KFS::WriteInfo
WriteInfo	cc/libkfsClient/KfsOps.h	/^    WriteInfo(ServerLocation loc, int64_t w) :$/;"	f	struct:KFS::WriteInfo
WriteInfo	cc/libkfsClient/KfsOps.h	/^struct WriteInfo {$/;"	s	namespace:KFS
WriteOp	cc/chunk/KfsOps.h	/^    WriteOp(kfsChunkId_t c, int64_t v) :$/;"	f	struct:KFS::WriteOp
WriteOp	cc/chunk/KfsOps.h	/^    WriteOp(kfsSeq_t s, kfsChunkId_t c, int64_t v, off_t o, size_t n, $/;"	f	struct:KFS::WriteOp
WriteOp	cc/chunk/KfsOps.h	/^struct WriteOp : public KfsOp {$/;"	s	namespace:KFS
WritePending	cc/chunk/DiskIo.cc	/^    void WritePending($/;"	f	class:KFS::DiskIoQueues
WritePendingMakeStable	cc/meta/LayoutManager.cc	/^LayoutManager::WritePendingMakeStable(ostream& os) const$/;"	f	class:LayoutManager
WritePlacementTestCase	python/unittests/write.py	/^class WritePlacementTestCase(unittest.TestCase):$/;"	c
WritePrepareFwdOp	cc/chunk/KfsOps.h	/^    WritePrepareFwdOp(kfsSeq_t s, WritePrepareOp *o, IOBuffer *d) :$/;"	f	struct:KFS::WritePrepareFwdOp
WritePrepareFwdOp	cc/chunk/KfsOps.h	/^struct WritePrepareFwdOp : public KfsOp {$/;"	s	namespace:KFS
WritePrepareOp	cc/chunk/KfsOps.h	/^    WritePrepareOp(kfsSeq_t s) :$/;"	f	struct:KFS::WritePrepareOp
WritePrepareOp	cc/chunk/KfsOps.h	/^struct WritePrepareOp : public KfsOp {$/;"	s	namespace:KFS
WritePrepareOp	cc/libkfsClient/KfsOps.h	/^    WritePrepareOp(kfsSeq_t s, kfsChunkId_t c, int64_t v) :$/;"	f	struct:KFS::WritePrepareOp
WritePrepareOp	cc/libkfsClient/KfsOps.h	/^    WritePrepareOp(kfsSeq_t s, kfsChunkId_t c, int64_t v, std::vector<WriteInfo> &w) :$/;"	f	struct:KFS::WritePrepareOp
WritePrepareOp	cc/libkfsClient/KfsOps.h	/^struct WritePrepareOp : public KfsOp {$/;"	s	namespace:KFS
WriteQueue	cc/libkfsClient/WriteAppender.cc	/^    typedef std::deque<int>        WriteQueue;$/;"	t	class:KFS::WriteAppender::Impl	file:
WriteSyncOp	cc/chunk/KfsOps.h	/^    WriteSyncOp(kfsSeq_t s, kfsChunkId_t c, int64_t v, off_t o, size_t n) :$/;"	f	struct:KFS::WriteSyncOp
WriteSyncOp	cc/chunk/KfsOps.h	/^struct WriteSyncOp : public KfsOp {$/;"	s	namespace:KFS
WriteSyncOp	cc/libkfsClient/KfsOps.h	/^    WriteSyncOp() : KfsOp(CMD_WRITE_SYNC, 0) { }$/;"	f	struct:KFS::WriteSyncOp
WriteSyncOp	cc/libkfsClient/KfsOps.h	/^    WriteSyncOp(kfsSeq_t s, kfsChunkId_t c, int64_t v, off_t o, size_t n, std::vector<WriteInfo> &w) :$/;"	f	struct:KFS::WriteSyncOp
WriteSyncOp	cc/libkfsClient/KfsOps.h	/^struct WriteSyncOp : public KfsOp {$/;"	s	namespace:KFS
WriteToBuffer	cc/libkfsClient/KfsWrite.cc	/^KfsClientImpl::WriteToBuffer(int fd, const char *buf, size_t numBytes)$/;"	f	class:KfsClientImpl
WriteToServer	cc/libkfsClient/KfsWrite.cc	/^KfsClientImpl::WriteToServer(int fd, off_t offset, const char *buf, size_t numBytes)$/;"	f	class:KfsClientImpl
ZeroFill	cc/libkfsIO/IOBuffer.cc	/^int IOBufferData::ZeroFill(int numBytes)$/;"	f	class:IOBufferData
ZeroFill	cc/libkfsIO/IOBuffer.cc	/^void IOBuffer::ZeroFill(int numBytes)$/;"	f	class:IOBuffer
ZeroFillBuf	cc/libkfsClient/KfsRead.cc	/^KfsClientImpl::ZeroFillBuf(int fd, char *buf, size_t numBytes)$/;"	f	class:KfsClientImpl
ZeroFillLast	cc/libkfsIO/IOBuffer.cc	/^int IOBuffer::ZeroFillLast()$/;"	f	class:IOBuffer
ZeroPad	cc/chunk/ChunkManager.cc	/^ChunkManager::ZeroPad(IOBuffer *buffer)$/;"	f	class:KFS::ChunkManager
ZincHandler	cc/meta/handler.h	/^       ZincHandler()   {$/;"	f	class:ZincHandler
ZincHandler	cc/meta/handler.h	/^class   ZincHandler    {$/;"	c
_CHUNKMANAGER_H	cc/chunk/ChunkManager.h	29;"	d
_CHUNKSERVER_CHUNK_H	cc/chunk/Chunk.h	27;"	d
_CHUNKSERVER_H	cc/chunk/ChunkServer.h	27;"	d
_CHUNKSERVER_KFSOPS_H	cc/chunk/KfsOps.h	29;"	d
_CLIENTMANAGER_H	cc/chunk/ClientManager.h	27;"	d
_CLIENTSM_H	cc/chunk/ClientSM.h	27;"	d
_DISKIO_H	cc/chunk/DiskIo.h	26;"	d
_FILE_OFFSET_BITS	cc/fuse/kfs_fuse_main.cc	28;"	d	file:
_FILE_OFFSET_BITS	cc/qcdio/iovperf.c	35;"	d	file:
_GNU_SOURCE	cc/qcdio/iovperf.c	38;"	d	file:
_KFS_ZINC_HANDLER_H_	cc/meta/handler.h	2;"	d
_LARGEFILE64_SOURCE	cc/qcdio/iovperf.c	32;"	d	file:
_LARGEFILE_SOURCE	cc/qcdio/iovperf.c	29;"	d	file:
_LIBIO_ACCEPTOR_H	cc/libkfsIO/Acceptor.h	27;"	d
_LIBIO_DISKCONNECTION_H	cc/libkfsIO/DiskConnection.h	27;"	d
_LIBIO_DISKEVENT_H	cc/libkfsIO/DiskEvent.h	27;"	d
_LIBIO_DISK_MANAGER_H	cc/libkfsIO/DiskManager.h	27;"	d
_LIBIO_IOBUFFER_H	cc/libkfsIO/IOBuffer.h	27;"	d
_LIBIO_KFSCALLBACKOBJ_H	cc/libkfsIO/KfsCallbackObj.h	27;"	d
_LIBIO_NETCONNECTION_H	cc/libkfsIO/NetConnection.h	27;"	d
_LIBIO_NETMANAGER_H	cc/libkfsIO/NetManager.h	27;"	d
_LIBIO_TCP_SOCKET_H	cc/libkfsIO/TcpSocket.h	27;"	d
_LIBKFSCLIENT_KFSOPS_H	cc/libkfsClient/KfsOps.h	27;"	d
_LIBKFSIO_EVENTMANAGER_H	cc/libkfsIO/EventManager.h	27;"	d
_LIBKFSIO_EVENT_H	cc/libkfsIO/Event.h	27;"	d
_LIBKFSIO_FILEHANDLE_H	cc/libkfsIO/FileHandle.h	28;"	d
_LIBKFSIO_TELEMETRYCLIENT_H	cc/libkfsIO/TelemetryClient.h	30;"	d
__init__	python/flogger/flogger.py	/^	def __init__(self, client, logfp, wt):$/;"	m	class:test_op
__init__	python/kfscp/kfscp.py	/^	def __init__(self, cpfile):$/;"	m	class:cp
__init__	python/rw/rw.py	/^	def __init__(self, client, filename, logfp):$/;"	m	class:test_file
_append	cc/common/DailyRollingFileAppender.cc	/^void DailyRollingFileAppender::_append(const log4cpp::LoggingEvent &event)$/;"	f	class:log4cpp::DailyRollingFileAppender
_appender	cc/common/DailyRollingFileAppender.h	/^        LayoutAppender& _appender;$/;"	m	class:log4cpp::DailyRollingFileAppender
_fileName	cc/common/DailyRollingFileAppender.h	/^        std::string _fileName;$/;"	m	class:log4cpp::DailyRollingFileAppender
_force_vfp_to_top	cc/libkfsIO/KfsCallbackObj.h	/^struct _force_vfp_to_top {$/;"	s	namespace:KFS
_logsTime	cc/common/DailyRollingFileAppender.h	/^        struct tm _logsTime;$/;"	m	class:log4cpp::DailyRollingFileAppender	typeref:struct:log4cpp::DailyRollingFileAppender::tm
_maxDaysToKeep	cc/common/DailyRollingFileAppender.h	/^        unsigned int _maxDaysToKeep;$/;"	m	class:log4cpp::DailyRollingFileAppender
absolute	cc/meta/kfsops.cc	/^absolute(const string path)$/;"	f	file:
absorb	cc/meta/kfstree.cc	/^Node::absorb(Node *l)$/;"	f	class:Node
acquire_lockfile	cc/meta/restore.cc	/^KFS::acquire_lockfile(const string &lockfn, int ntries)$/;"	f	class:KFS
activeNode	cc/meta/checkpoint.h	/^	Node *activeNode;	\/\/!< level-1 node currently being written$/;"	m	class:KFS::Checkpoint
addChild	cc/meta/kfstree.cc	/^Node::addChild(Key *k, MetaNode *child, int pos)$/;"	f	class:Node
addChunk	cc/rebalancer/rebalancer.h	/^        void addChunk(kfsChunkId_t cid, size_t chunksize) {$/;"	f	class:KFS::ChunkServer
addNode	cc/telemetry/packet.h	/^        void addNode(const struct in_addr &t) {$/;"	f	struct:KFS::TelemetryServerPacket_t
addPending	cc/meta/request.h	/^	const bool           addPending:1;$/;"	m	struct:KFS::MetaChunkMakeStable
addServer	cc/meta/LayoutManager.h	/^		void addServer(ChunkServerPtr &s) {$/;"	f	class:KFS::RackInfo
add_parser	cc/meta/entry.h	/^	void add_parser(string k, parser f) { table[k] = f; }$/;"	f	class:KFS::DiskEntry
add_to_path	python/kfscp/kfscp.py	/^def add_to_path(current, new):$/;"	f
aioStatus	cc/libkfsIO/DiskEvent.h	/^    int			aioStatus; \/\/ status by calling aio_error()$/;"	m	struct:KFS::DiskEvent_t
aio_cb	cc/libkfsIO/DiskEvent.h	/^    struct aiocb	aio_cb;$/;"	m	struct:KFS::DiskEvent_t	typeref:struct:KFS::DiskEvent_t::aiocb
allocFileId	cc/meta/request.h	/^	fid_t     allocFileId; \/\/ file id when chunk was allocated$/;"	m	struct:KFS::ChunkInfo
allocate	cc/libkfsClient/KfsClientInt.h	/^    void allocate() {$/;"	f	struct:KFS::ChunkBuffer
allocateChunkId	cc/meta/kfsops.cc	/^Tree::allocateChunkId(fid_t file, chunkOff_t &offset, chunkId_t *chunkId,$/;"	f	class:Tree
allowFidToPathConversion	cc/meta/kfstree.h	/^	bool allowFidToPathConversion;	\/\/!< fid->path translation is enabled?$/;"	m	class:KFS::Tree
append	cc/libkfsClient/KfsOps.h	/^    bool append; $/;"	m	struct:KFS::AllocateOp
appendChild	cc/meta/kfstree.h	/^	void appendChild(Key k, MetaNode *n)$/;"	f	class:KFS::Node
appendChunk	cc/meta/request.h	/^	bool appendChunk;	$/;"	m	struct:KFS::MetaAllocate
appendFlag	cc/chunk/KfsOps.h	/^    bool appendFlag; \/\/ input$/;"	m	struct:KFS::AllocChunkOp
appendFlag	cc/meta/LayoutManager.h	/^                const bool appendFlag:1;$/;"	m	struct:KFS::LeaseInfo
appendPending	cc/libkfsClient/KfsClientInt.h	/^    int appendPending;$/;"	m	struct:KFS::FileTableEntry
appenderState	cc/chunk/KfsOps.h	/^    int          appenderState;$/;"	m	struct:KFS::GetRecordAppendOpStatus
appenderState	cc/libkfsClient/KfsOps.h	/^    int          appenderState;$/;"	m	struct:KFS::GetRecordAppendOpStatus
appenderStateStr	cc/chunk/KfsOps.h	/^    const char*  appenderStateStr;$/;"	m	struct:KFS::GetRecordAppendOpStatus
appenderStateStr	cc/libkfsClient/KfsOps.h	/^    std::string  appenderStateStr;$/;"	m	struct:KFS::GetRecordAppendOpStatus
apply	cc/meta/queue.h	/^MetaQueue <T>::apply(FunctorWrapper<T> &f)$/;"	f	class:KFS::MetaQueue
araChunkCache	cc/meta/LayoutManager.cc	/^        ARAChunkCache&           araChunkCache;$/;"	m	class:MapPurger	file:
ascend_op	python/flogger/flogger.py	/^class ascend_op(test_op):$/;"	c
assignChunkId	cc/meta/kfsops.cc	/^Tree::assignChunkId(fid_t file, chunkOff_t offset,$/;"	f	class:Tree
author	cc/access/kfs_setup.py	/^	author="Blake Lewis and Sriram Rao",$/;"	v
availSpace	cc/meta/LayoutManager.cc	/^	uint64_t availSpace;$/;"	m	struct:ServerSpace	file:
availableSpace	cc/chunk/ChunkManager.h	/^        int64_t availableSpace;$/;"	m	struct:KFS::ChunkManager::ChunkDirInfo_t
availableSpace	cc/chunk/ChunkManager.h	/^    int64_t availableSpace;$/;"	m	struct:KFS::ChunkDirInfo_t
availableSpace	cc/meta/LayoutManager.h	/^		uint64_t availableSpace() const {$/;"	f	class:KFS::RackInfo
back	cc/chunk/ChunkManager.h	/^        WriteOp* back() const$/;"	f	class:KFS::ChunkManager::PendingWrites
balanceNeighbor	cc/meta/kfstree.cc	/^Node::balanceNeighbor(int pos)$/;"	f	class:Node
begin	cc/common/properties.h	/^    iterator begin() const { return propmap.begin(); }$/;"	f	class:KFS::Properties
begin	cc/libkfsIO/IOBuffer.h	/^    iterator begin() const { return mBuf.begin(); }$/;"	f	class:KFS::IOBuffer
begin	cc/meta/LayoutManager.h	/^		const_iterator begin() const {$/;"	f	class:KFS::CSMap
begin	cc/meta/LayoutManager.h	/^		iterator begin() {$/;"	f	class:KFS::CSMap
beginMakeStableFlag	cc/meta/LayoutManager.h	/^		bool              beginMakeStableFlag:1;$/;"	m	struct:KFS::MakeChunkStableInfo
blocks	cc/meta/LayoutManager.h	/^		ReplicationCandidates blocks;$/;"	m	struct:KFS::HibernatingServerInfo_t
blocks	cc/meta/request.h	/^	std::string blocks;$/;"	m	struct:KFS::MetaDumpChunkReplicationCandidates
buf	cc/libkfsClient/KfsAsyncRW.h	/^        unsigned char *buf;  \/\/ buffer into which data has to be read\/written$/;"	m	struct:KFS::AsyncReq
buf	cc/libkfsClient/KfsClientInt.h	/^    char *buf;	\/\/ the data$/;"	m	struct:KFS::ChunkBuffer
buffer	cc/libkfsClient/KfsClientInt.h	/^    ChunkBuffer buffer;$/;"	m	struct:KFS::FileTableEntry
bufsz	cc/libkfsClient/KfsAsyncRW.h	/^        size_t bufsz;$/;"	m	class:KFS::NullAllocator
bufsz	cc/libkfsClient/KfsClientInt.h	/^    size_t bufsz;$/;"	m	struct:KFS::ChunkBuffer
build_path	cc/access/KfsModulePy.cc	/^build_path(PyObject *cwd, const char *input)$/;"	f	file:
build_path	cc/libkfsClient/Utils.cc	/^KFS::build_path(string &cwd, const char *input)$/;"	f	class:KFS
buildstr	cc/common/buildVers.py	/^buildstr = "perforce1:1666\/trunk@1000"$/;"	v
cPtr	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    private long cPtr;$/;"	f	class:KfsAccess	file:
cPtr	java/org/kosmix/kosmosfs/access/KfsInputChannel.java	/^    private long cPtr;$/;"	f	class:KfsInputChannel	file:
cPtr	java/org/kosmix/kosmosfs/access/KfsOutputChannel.java	/^    private long cPtr;$/;"	f	class:KfsOutputChannel	file:
cancelled	cc/chunk/KfsOps.h	/^    bool            cancelled:1;$/;"	m	struct:KFS::KfsOp
candidates	cc/meta/LayoutManager.cc	/^	ReplicationCandidates &candidates;$/;"	m	class:EvacuateChunkChecker	file:
cattr	cc/libkfsClient/KfsAttr.h	/^    ChunkAttr cattr;$/;"	m	struct:KFS::FileChunkInfo
cattr	cc/libkfsClient/KfsClientInt.h	/^    std::map <int, ChunkAttr> cattr;$/;"	m	struct:KFS::FileTableEntry
cd	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    int cd(long ptr, String  path);$/;"	m	class:KfsAccess	file:
cd	python/kfscp/kfscp.py	/^	def cd(self, path):$/;"	m	class:cp
changeDirReplication	cc/meta/kfsops.cc	/^Tree::changeDirReplication(MetaFattr *dirattr, int16_t numReplicas)$/;"	f	class:Tree
changeFileReplication	cc/meta/kfsops.cc	/^Tree::changeFileReplication(MetaFattr *fa, int16_t numReplicas)$/;"	f	class:Tree
changePathReplication	cc/meta/kfsops.cc	/^Tree::changePathReplication(fid_t fid, int16_t numReplicas)$/;"	f	class:Tree
change_state	python/flogger/flogger.py	/^def change_state(name, delta):$/;"	f
check	python/kfscp/kfscp.py	/^	def check(self):$/;"	m	class:cp
checkSize	cc/emulator/LayoutEmulator.cc	/^    bool checkSize;$/;"	m	class:RackAwareReplicationVerifier	file:
check_dot	python/kfscp/kfscp.py	/^	def check_dot(self):$/;"	m	class:cp
check_dotdot	python/kfscp/kfscp.py	/^	def check_dotdot(self):$/;"	m	class:cp
check_missing_dentries	python/kfscp/kfscp.py	/^	def check_missing_dentries(self):$/;"	m	class:cp
check_missing_fattr	python/kfscp/kfscp.py	/^	def check_missing_fattr(self):$/;"	m	class:cp
checkpoint	cc/meta/meta.h	/^	int checkpoint(ofstream &file) const$/;"	f	class:KFS::Meta
checkpoint_chunkId	cc/meta/restore.cc	/^checkpoint_chunkId(deque <string> &c)$/;"	f	file:
checkpoint_fid	cc/meta/restore.cc	/^checkpoint_fid(deque <string> &c)$/;"	f	file:
checkpoint_log	cc/meta/restore.cc	/^checkpoint_log(deque <string> &c)$/;"	f	file:
checkpoint_parse	python/kfscp/kfscp.py	/^	def checkpoint_parse(self, parts):$/;"	m	class:cp
checkpoint_seq	cc/meta/restore.cc	/^checkpoint_seq(deque <string> &c)$/;"	f	file:
checkpoint_time	cc/meta/restore.cc	/^checkpoint_time(deque <string> &c)$/;"	f	file:
checkpoint_version	cc/meta/restore.cc	/^checkpoint_version(deque <string> &c)$/;"	f	file:
checkpointed	cc/meta/logger.h	/^	seq_t checkpointed() { return incp; }	\/\/!< highest seqno in CP$/;"	f	class:KFS::Logger
checkpointer_init	cc/meta/checkpoint.cc	/^KFS::checkpointer_init()$/;"	f	class:KFS
checkpointer_setup_paths	cc/meta/checkpoint.cc	/^KFS::checkpointer_setup_paths(const string &cpdir)$/;"	f	class:KFS
checksum	cc/chunk/KfsOps.h	/^    std::vector<uint32_t> checksum; \/* checksum over the data that is sent back to client *\/$/;"	m	struct:KFS::ReadOp
checksum	cc/chunk/KfsOps.h	/^    uint32_t     checksum;              \/* input: as computed by the sender; 0 means sender didn't send *\/$/;"	m	struct:KFS::RecordAppendOp
checksum	cc/chunk/KfsOps.h	/^    uint32_t     checksum; \/* input: as computed by the sender; 0 means sender didn't send *\/$/;"	m	struct:KFS::WritePrepareOp
checksum	cc/libkfsClient/KfsOps.h	/^    uint32_t  checksum; \/\/ a checksum over the data$/;"	m	struct:KFS::KfsOp
checksums	cc/chunk/KfsOps.h	/^    std::vector<uint32_t> checksums; \/* store the checksum for logging purposes *\/$/;"	m	struct:KFS::WriteOp
checksums	cc/chunk/KfsOps.h	/^    std::vector<uint32_t> checksums;$/;"	m	struct:KFS::WriteSyncOp
checksums	cc/libkfsClient/KfsOps.h	/^    std::vector<uint32_t> checksums; \/* checksum for each 64KB block *\/    $/;"	m	struct:KFS::WritePrepareOp
checksums	cc/libkfsClient/KfsOps.h	/^    std::vector<uint32_t> checksums; \/* checksum for each 64KB block *\/$/;"	m	struct:KFS::ReadOp
checksums	cc/libkfsClient/KfsOps.h	/^    std::vector<uint32_t> checksums;$/;"	m	struct:KFS::WriteSyncOp
child	cc/meta/kfstree.h	/^	Node *child(int n) const		\/\/! \\brief accessor$/;"	f	class:KFS::Node
childKey	cc/meta/kfstree.h	/^	Key childKey[NKEY];		\/\/!< children's key values$/;"	m	class:KFS::Node
childNode	cc/meta/kfstree.h	/^	MetaNode *childNode[NKEY];	\/\/!< and pointers to them$/;"	m	class:KFS::Node
children	cc/meta/kfstree.h	/^	int children() const { return count; } \/\/!< how many children$/;"	f	class:KFS::Node
chunkBlockChecksum	cc/chunk/Chunk.h	/^    uint32_t *chunkBlockChecksum;$/;"	m	struct:KFS::ChunkInfo_t
chunkBlockChecksum	cc/chunk/Chunk.h	/^    uint32_t chunkBlockChecksum[MAX_CHUNK_CHECKSUM_BLOCKS];$/;"	m	struct:KFS::DiskChunkInfo_t
chunkBlockChecksum	cc/chunk/chunkupgrade_main.cc	/^    uint32_t chunkBlockChecksum[MAX_CHUNK_CHECKSUM_BLOCKS];$/;"	m	struct:DiskChunkInfoV1_t	file:
chunkBytesReserved	cc/chunk/KfsOps.h	/^    size_t       chunkBytesReserved;$/;"	m	struct:KFS::GetRecordAppendOpStatus
chunkBytesReserved	cc/libkfsClient/KfsOps.h	/^    size_t       chunkBytesReserved;$/;"	m	struct:KFS::GetRecordAppendOpStatus
chunkChecksum	cc/chunk/KfsOps.h	/^    uint32_t     chunkChecksum; \/\/ input$/;"	m	struct:KFS::MakeChunkStableOp
chunkChecksum	cc/chunk/KfsOps.h	/^    uint32_t     chunkChecksum; \/\/ output$/;"	m	struct:KFS::BeginMakeChunkStableOp
chunkChecksum	cc/chunk/KfsOps.h	/^    uint32_t    chunkChecksum;$/;"	m	struct:KFS::LeaseRelinquishOp
chunkChecksum	cc/meta/LayoutManager.cc	/^        const uint32_t  chunkChecksum;$/;"	m	class:MakeChunkStable	file:
chunkChecksum	cc/meta/LayoutManager.h	/^		uint32_t          chunkChecksum;$/;"	m	struct:KFS::MakeChunkStableInfo
chunkChecksum	cc/meta/request.h	/^	const uint32_t  chunkChecksum;    \/\/ input$/;"	m	struct:KFS::MetaLogMakeChunkStable
chunkChecksum	cc/meta/request.h	/^	uint32_t             chunkChecksum; \/\/ output$/;"	m	struct:KFS::MetaBeginMakeChunkStable
chunkChecksum	cc/meta/request.h	/^        const uint32_t       chunkChecksum;$/;"	m	struct:KFS::MetaChunkMakeStable
chunkChecksum	cc/meta/request.h	/^        const uint32_t chunkChecksum;$/;"	m	struct:KFS::MetaLeaseRelinquish
chunkCount	cc/libkfsClient/KfsAttr.h	/^    long long	chunkCount;$/;"	m	struct:KFS::FileAttr
chunkCount	cc/libkfsClient/KfsAttr.h	/^    long long	chunkCount;$/;"	m	struct:KFS::FileChunkInfo
chunkCount	cc/libkfsClient/KfsAttr.h	/^    long long	chunkCount;$/;"	m	struct:KFS::KfsServerAttr
chunkId	cc/chunk/Chunk.h	/^    kfsChunkId_t chunkId;$/;"	m	struct:KFS::ChunkInfo_t
chunkId	cc/chunk/Chunk.h	/^    kfsChunkId_t chunkId;$/;"	m	struct:KFS::DiskChunkInfo_t
chunkId	cc/chunk/ClientSM.h	/^        kfsChunkId_t chunkId;$/;"	m	struct:KFS::ChunkSpaceReservationKey_t
chunkId	cc/chunk/KfsOps.h	/^    kfsChunkId_t   chunkId;$/;"	m	struct:KFS::WriteIdAllocOp
chunkId	cc/chunk/KfsOps.h	/^    kfsChunkId_t chunkId;               \/* input *\/$/;"	m	struct:KFS::RecordAppendOp
chunkId	cc/chunk/KfsOps.h	/^    kfsChunkId_t chunkId;          \/\/ input$/;"	m	struct:KFS::GetRecordAppendOpStatus
chunkId	cc/chunk/KfsOps.h	/^    kfsChunkId_t chunkId;         \/\/ input$/;"	m	struct:KFS::CloseOp
chunkId	cc/chunk/KfsOps.h	/^    kfsChunkId_t chunkId;       \/\/ input$/;"	m	struct:KFS::BeginMakeChunkStableOp
chunkId	cc/chunk/KfsOps.h	/^    kfsChunkId_t chunkId;       \/\/ input$/;"	m	struct:KFS::MakeChunkStableOp
chunkId	cc/chunk/KfsOps.h	/^    kfsChunkId_t chunkId;    $/;"	m	struct:KFS::WriteSyncOp
chunkId	cc/chunk/KfsOps.h	/^    kfsChunkId_t chunkId;  \/\/ input$/;"	m	struct:KFS::GetChunkMetadataOp
chunkId	cc/chunk/KfsOps.h	/^    kfsChunkId_t chunkId;  \/\/ input$/;"	m	struct:KFS::OpenOp
chunkId	cc/chunk/KfsOps.h	/^    kfsChunkId_t chunkId;  \/\/ input$/;"	m	struct:KFS::ReplicateChunkOp
chunkId	cc/chunk/KfsOps.h	/^    kfsChunkId_t chunkId;  \/\/ input$/;"	m	struct:KFS::TruncateChunkOp
chunkId	cc/chunk/KfsOps.h	/^    kfsChunkId_t chunkId; \/\/ input$/;"	m	struct:KFS::AllocChunkOp
chunkId	cc/chunk/KfsOps.h	/^    kfsChunkId_t chunkId; \/\/ input$/;"	m	struct:KFS::ChangeChunkVersOp
chunkId	cc/chunk/KfsOps.h	/^    kfsChunkId_t chunkId; \/\/ input$/;"	m	struct:KFS::DeleteChunkOp
chunkId	cc/chunk/KfsOps.h	/^    kfsChunkId_t chunkId; \/\/ input: chunkid of the corrupted chunk$/;"	m	struct:KFS::CorruptChunkOp
chunkId	cc/chunk/KfsOps.h	/^    kfsChunkId_t chunkId;$/;"	m	struct:KFS::ChunkSpaceReleaseOp
chunkId	cc/chunk/KfsOps.h	/^    kfsChunkId_t chunkId;$/;"	m	struct:KFS::ChunkSpaceReserveOp
chunkId	cc/chunk/KfsOps.h	/^    kfsChunkId_t chunkId;$/;"	m	struct:KFS::LeaseRelinquishOp
chunkId	cc/chunk/KfsOps.h	/^    kfsChunkId_t chunkId;$/;"	m	struct:KFS::LeaseRenewOp
chunkId	cc/chunk/KfsOps.h	/^    kfsChunkId_t chunkId;$/;"	m	struct:KFS::ReadChunkMetaOp
chunkId	cc/chunk/KfsOps.h	/^    kfsChunkId_t chunkId;$/;"	m	struct:KFS::ReadOp
chunkId	cc/chunk/KfsOps.h	/^    kfsChunkId_t chunkId;$/;"	m	struct:KFS::SizeOp
chunkId	cc/chunk/KfsOps.h	/^    kfsChunkId_t chunkId;$/;"	m	struct:KFS::WriteChunkMetaOp
chunkId	cc/chunk/KfsOps.h	/^    kfsChunkId_t chunkId;$/;"	m	struct:KFS::WriteOp
chunkId	cc/chunk/KfsOps.h	/^    kfsChunkId_t chunkId;$/;"	m	struct:KFS::WritePrepareOp
chunkId	cc/chunk/chunkupgrade_main.cc	/^    kfsChunkId_t chunkId;$/;"	m	struct:DiskChunkInfoV1_t	file:
chunkId	cc/libkfsClient/KfsAsyncRW.h	/^        kfsChunkId_t chunkId;$/;"	m	struct:KFS::AsyncReq
chunkId	cc/libkfsClient/KfsAttr.h	/^    kfsChunkId_t chunkId;$/;"	m	struct:KFS::ChunkAttr
chunkId	cc/libkfsClient/KfsOps.h	/^    kfsChunkId_t chunkId;          \/\/ input$/;"	m	struct:KFS::GetRecordAppendOpStatus
chunkId	cc/libkfsClient/KfsOps.h	/^    kfsChunkId_t chunkId; \/\/ input$/;"	m	struct:KFS::LeaseAcquireOp
chunkId	cc/libkfsClient/KfsOps.h	/^    kfsChunkId_t chunkId; \/\/ input$/;"	m	struct:KFS::LeaseRenewOp
chunkId	cc/libkfsClient/KfsOps.h	/^    kfsChunkId_t chunkId; \/\/ result$/;"	m	struct:KFS::AllocateOp
chunkId	cc/libkfsClient/KfsOps.h	/^    kfsChunkId_t chunkId; \/\/ result$/;"	m	struct:KFS::ChunkLayoutInfo
chunkId	cc/libkfsClient/KfsOps.h	/^    kfsChunkId_t chunkId; \/\/ result$/;"	m	struct:KFS::GetAllocOp
chunkId	cc/libkfsClient/KfsOps.h	/^    kfsChunkId_t chunkId;$/;"	m	struct:KFS::ChunkSpaceReleaseOp
chunkId	cc/libkfsClient/KfsOps.h	/^    kfsChunkId_t chunkId;$/;"	m	struct:KFS::ChunkSpaceReserveOp
chunkId	cc/libkfsClient/KfsOps.h	/^    kfsChunkId_t chunkId;$/;"	m	struct:KFS::CloseOp
chunkId	cc/libkfsClient/KfsOps.h	/^    kfsChunkId_t chunkId;$/;"	m	struct:KFS::GetChunkMetadataOp
chunkId	cc/libkfsClient/KfsOps.h	/^    kfsChunkId_t chunkId;$/;"	m	struct:KFS::LeaseRelinquishOp
chunkId	cc/libkfsClient/KfsOps.h	/^    kfsChunkId_t chunkId;$/;"	m	struct:KFS::OpenOp
chunkId	cc/libkfsClient/KfsOps.h	/^    kfsChunkId_t chunkId;$/;"	m	struct:KFS::ReadOp
chunkId	cc/libkfsClient/KfsOps.h	/^    kfsChunkId_t chunkId;$/;"	m	struct:KFS::RecordAppendOp
chunkId	cc/libkfsClient/KfsOps.h	/^    kfsChunkId_t chunkId;$/;"	m	struct:KFS::SizeOp
chunkId	cc/libkfsClient/KfsOps.h	/^    kfsChunkId_t chunkId;$/;"	m	struct:KFS::WriteIdAllocOp
chunkId	cc/libkfsClient/KfsOps.h	/^    kfsChunkId_t chunkId;$/;"	m	struct:KFS::WritePrepareOp
chunkId	cc/libkfsClient/KfsOps.h	/^    kfsChunkId_t chunkId;$/;"	m	struct:KFS::WriteSyncOp
chunkId	cc/meta/LayoutManager.cc	/^	const chunkId_t chunkId;$/;"	m	class:BeginMakeChunkStable	file:
chunkId	cc/meta/LayoutManager.cc	/^	const chunkId_t chunkId;$/;"	m	class:ChunkDeletor	file:
chunkId	cc/meta/LayoutManager.cc	/^	const chunkId_t chunkId;$/;"	m	class:DecChunkWriteCount	file:
chunkId	cc/meta/LayoutManager.cc	/^	const chunkId_t chunkId;$/;"	m	class:MakeChunkStable	file:
chunkId	cc/meta/LayoutManager.cc	/^    chunkId_t chunkId;$/;"	m	class:Truncator	file:
chunkId	cc/meta/LayoutManager.h	/^			chunkId_t chunkId;$/;"	m	struct:KFS::ARAChunkCache::Entry
chunkId	cc/meta/LayoutManager.h	/^		chunkId_t chunkId;$/;"	m	struct:KFS::RebalancePlanInfo_t
chunkId	cc/meta/meta.h	/^	chunkId_t chunkId;		\/\/!< unique chunk identifier$/;"	m	class:KFS::MetaChunkInfo
chunkId	cc/meta/request.cc	/^	chunkId_t chunkId;$/;"	m	class:KFS::ChunkVersionChanger	file:
chunkId	cc/meta/request.h	/^	chunkId_t chunkId;	\/\/!< Id of the chunk that was allocated$/;"	m	struct:KFS::MetaAllocate
chunkId	cc/meta/request.h	/^	chunkId_t chunkId; \/\/!< Id of the chunk corresponding to offset$/;"	m	struct:KFS::ChunkLayoutInfo
chunkId	cc/meta/request.h	/^	chunkId_t chunkId; \/\/!< Id of the chunk corresponding to offset$/;"	m	struct:KFS::MetaGetalloc
chunkId	cc/meta/request.h	/^	chunkId_t chunkId; \/\/!< The chunk id to free$/;"	m	struct:KFS::MetaChunkDelete
chunkId	cc/meta/request.h	/^	chunkId_t chunkId; \/\/!< The chunk id to free$/;"	m	struct:KFS::MetaChunkVersChange
chunkId	cc/meta/request.h	/^	chunkId_t chunkId; \/\/!< The chunk id to replicate$/;"	m	struct:KFS::MetaChunkReplicate
chunkId	cc/meta/request.h	/^	chunkId_t chunkId; \/\/!< The id of chunk to be truncated$/;"	m	struct:KFS::MetaChunkTruncate
chunkId	cc/meta/request.h	/^	chunkId_t chunkId; \/\/!< input$/;"	m	struct:KFS::MetaChunkCorrupt
chunkId	cc/meta/request.h	/^	chunkId_t chunkId; \/\/!< input$/;"	m	struct:KFS::MetaLeaseAcquire
chunkId	cc/meta/request.h	/^	chunkId_t chunkId; \/\/!< input$/;"	m	struct:KFS::MetaLeaseRenew
chunkId	cc/meta/request.h	/^	chunkId_t chunkId; \/\/!< input: the chunk whose size we need$/;"	m	struct:KFS::MetaChunkSize
chunkId	cc/meta/request.h	/^	chunkId_t chunkId;$/;"	m	struct:KFS::ChunkInfo
chunkId	cc/meta/request.h	/^	const chunkId_t      chunkId;       \/\/ input$/;"	m	struct:KFS::MetaBeginMakeChunkStable
chunkId	cc/meta/request.h	/^	const chunkId_t      chunkId;      \/\/!< The chunk id to make stable$/;"	m	struct:KFS::MetaChunkMakeStable
chunkId	cc/meta/request.h	/^	const chunkId_t chunkId;          \/\/ input$/;"	m	struct:KFS::MetaLogMakeChunkStable
chunkId	cc/meta/request.h	/^	const chunkId_t chunkId; \/\/!< input$/;"	m	struct:KFS::MetaLeaseRelinquish
chunkId	cc/rebalancer/rebalancer.h	/^        chunkId_t chunkId;$/;"	m	struct:KFS::RebalancePlanInfo_t
chunkId_parse	python/kfscp/kfscp.py	/^	def chunkId_parse(self, parts):$/;"	m	class:cp
chunkId_t	cc/common/kfstypes.h	/^typedef seqid_t chunkId_t;      \/\/!< chunk ID$/;"	t	namespace:KFS
chunkInfo	cc/chunk/ChunkManager.cc	/^    ChunkInfo_t chunkInfo;$/;"	m	class:KFS::ChunkInfoHandle	file:
chunkLeases	cc/meta/LayoutManager.h	/^		std::vector<LeaseInfo> chunkLeases;$/;"	m	struct:KFS::ChunkPlacementInfo
chunkLoc	cc/tools/MonUtils.h	/^        KFS::ServerLocation chunkLoc;$/;"	m	struct:KFS_MON::RetireChunkserverOp
chunkMap	cc/meta/LayoutManager.cc	/^	const CSMap&    chunkMap;$/;"	m	class:DecChunkWriteCount	file:
chunkNum	cc/libkfsClient/KfsClientInt.h	/^    int32_t	chunkNum;$/;"	m	struct:KFS::FilePosition
chunkOff_t	cc/common/kfstypes.h	/^typedef long long chunkOff_t;   \/\/!< chunk offset$/;"	t	namespace:KFS
chunkOffset	cc/libkfsClient/KfsClientInt.h	/^    off_t	chunkOffset;$/;"	m	struct:KFS::FilePosition
chunkOffsetIndex	cc/meta/LayoutManager.h	/^		uint32_t chunkOffsetIndex;$/;"	m	struct:KFS::ChunkPlacementInfo
chunkServer	cc/meta/LayoutManager.h	/^		const ChunkServerPtr chunkServer;$/;"	m	struct:KFS::LeaseInfo
chunkServerLoc	cc/libkfsClient/KfsAttr.h	/^    vector<ServerLocation> chunkServerLoc;$/;"	m	struct:KFS::ChunkAttr
chunkServerLoc	cc/libkfsClient/KfsOps.h	/^    std::vector<ServerLocation> chunkServerLoc;$/;"	m	struct:KFS::CloseOp
chunkServerLoc	cc/libkfsClient/KfsOps.h	/^    std::vector<ServerLocation> chunkServerLoc;$/;"	m	struct:KFS::WriteIdAllocOp
chunkServers	cc/libkfsClient/KfsClientInt.h	/^    std::vector<ChunkServerConn> chunkServers;$/;"	m	struct:KFS::FilePosition
chunkServers	cc/libkfsClient/KfsOps.h	/^    std::vector<ServerLocation> chunkServers; \/\/ where the chunk lives$/;"	m	struct:KFS::ChunkLayoutInfo
chunkServers	cc/libkfsClient/KfsOps.h	/^    std::vector<ServerLocation> chunkServers;$/;"	m	struct:KFS::AllocateOp
chunkServers	cc/libkfsClient/KfsOps.h	/^    std::vector<ServerLocation> chunkServers;$/;"	m	struct:KFS::GetAllocOp
chunkServers	cc/meta/LayoutManager.h	/^		std::vector<ChunkServerPtr> chunkServers;$/;"	m	struct:KFS::ChunkPlacementInfo
chunkSize	cc/chunk/Chunk.h	/^    off_t  chunkSize; $/;"	m	struct:KFS::ChunkInfo_t
chunkSize	cc/chunk/Chunk.h	/^    off_t  chunkSize; $/;"	m	struct:KFS::DiskChunkInfo_t
chunkSize	cc/chunk/KfsOps.h	/^    int64_t      chunkSize;     \/\/ input $/;"	m	struct:KFS::MakeChunkStableOp
chunkSize	cc/chunk/KfsOps.h	/^    int64_t      chunkSize;     \/\/ output$/;"	m	struct:KFS::BeginMakeChunkStableOp
chunkSize	cc/chunk/KfsOps.h	/^    off_t	 chunkSize; \/* store the chunk size for logging purposes *\/$/;"	m	struct:KFS::WriteOp
chunkSize	cc/chunk/KfsOps.h	/^    off_t       chunkSize;$/;"	m	struct:KFS::LeaseRelinquishOp
chunkSize	cc/chunk/KfsOps.h	/^    off_t chunkSize; \/\/ output$/;"	m	struct:KFS::GetChunkMetadataOp
chunkSize	cc/chunk/KfsOps.h	/^    size_t	 chunkSize; \/\/ size to which file should be truncated to$/;"	m	struct:KFS::TruncateChunkOp
chunkSize	cc/chunk/chunkupgrade_main.cc	/^    off_t  chunkSize; $/;"	m	struct:DiskChunkInfoV1_t	file:
chunkSize	cc/libkfsClient/KfsAttr.h	/^    off_t	chunkSize;$/;"	m	struct:KFS::ChunkAttr
chunkSize	cc/meta/LayoutManager.cc	/^        const off_t     chunkSize;$/;"	m	class:MakeChunkStable	file:
chunkSize	cc/meta/LayoutManager.h	/^		off_t             chunkSize;$/;"	m	struct:KFS::MakeChunkStableInfo
chunkSize	cc/meta/request.h	/^	const int64_t   chunkSize;        \/\/ input$/;"	m	struct:KFS::MetaLogMakeChunkStable
chunkSize	cc/meta/request.h	/^	int64_t              chunkSize;     \/\/ output$/;"	m	struct:KFS::MetaBeginMakeChunkStable
chunkSize	cc/meta/request.h	/^	off_t chunkSize; \/\/!< output: the chunk size$/;"	m	struct:KFS::MetaChunkSize
chunkSize	cc/meta/request.h	/^	size_t chunkSize; \/\/!< The size to which chunk should be truncated$/;"	m	struct:KFS::MetaChunkTruncate
chunkSize	cc/meta/request.h	/^        const off_t          chunkSize;$/;"	m	struct:KFS::MetaChunkMakeStable
chunkSize	cc/meta/request.h	/^        const off_t chunkSize;$/;"	m	struct:KFS::MetaLeaseRelinquish
chunkStartOffset	cc/meta/util.cc	/^KFS::chunkStartOffset(chunkOff_t offset)$/;"	f	class:KFS
chunkToServerMap	cc/meta/LayoutManager.cc	/^	CSMap &chunkToServerMap;$/;"	m	class:EvacuateChunkChecker	file:
chunkToServerMap	cc/meta/LayoutManager.cc	/^	const CSMap &chunkToServerMap;$/;"	m	class:ValidLeaseIssued	file:
chunkVers	cc/meta/request.cc	/^	seq_t chunkVers;$/;"	m	class:KFS::ChunkVersionChanger	file:
chunkVersion	cc/chunk/Chunk.h	/^    kfsSeq_t chunkVersion;$/;"	m	struct:KFS::ChunkInfo_t
chunkVersion	cc/chunk/Chunk.h	/^    kfsSeq_t chunkVersion;$/;"	m	struct:KFS::DiskChunkInfo_t
chunkVersion	cc/chunk/KfsOps.h	/^    int64_t	   chunkVersion;$/;"	m	struct:KFS::WriteIdAllocOp
chunkVersion	cc/chunk/KfsOps.h	/^    int64_t	 chunkVersion;          \/* input *\/$/;"	m	struct:KFS::RecordAppendOp
chunkVersion	cc/chunk/KfsOps.h	/^    int64_t	 chunkVersion;$/;"	m	struct:KFS::ReadOp
chunkVersion	cc/chunk/KfsOps.h	/^    int64_t	 chunkVersion;$/;"	m	struct:KFS::SizeOp
chunkVersion	cc/chunk/KfsOps.h	/^    int64_t	 chunkVersion;$/;"	m	struct:KFS::WriteOp
chunkVersion	cc/chunk/KfsOps.h	/^    int64_t	 chunkVersion;$/;"	m	struct:KFS::WritePrepareOp
chunkVersion	cc/chunk/KfsOps.h	/^    int64_t      chunkVersion;  \/\/ input$/;"	m	struct:KFS::BeginMakeChunkStableOp
chunkVersion	cc/chunk/KfsOps.h	/^    int64_t      chunkVersion;  \/\/ input$/;"	m	struct:KFS::MakeChunkStableOp
chunkVersion	cc/chunk/KfsOps.h	/^    int64_t      chunkVersion;$/;"	m	struct:KFS::GetRecordAppendOpStatus
chunkVersion	cc/chunk/KfsOps.h	/^    int64_t chunkVersion; \/\/ input$/;"	m	struct:KFS::AllocChunkOp
chunkVersion	cc/chunk/KfsOps.h	/^    int64_t chunkVersion; \/\/ input$/;"	m	struct:KFS::ChangeChunkVersOp
chunkVersion	cc/chunk/KfsOps.h	/^    int64_t chunkVersion; \/\/ output$/;"	m	struct:KFS::GetChunkMetadataOp
chunkVersion	cc/chunk/KfsOps.h	/^    int64_t chunkVersion; \/\/ output: we tell the metaserver what we replicated$/;"	m	struct:KFS::ReplicateChunkOp
chunkVersion	cc/chunk/KfsOps.h	/^    int64_t chunkVersion;$/;"	m	struct:KFS::WriteSyncOp
chunkVersion	cc/chunk/chunkupgrade_main.cc	/^    uint32_t chunkVersion;$/;"	m	struct:DiskChunkInfoV1_t	file:
chunkVersion	cc/libkfsClient/KfsAsyncRW.h	/^        int64_t  chunkVersion;$/;"	m	struct:KFS::AsyncReq
chunkVersion	cc/libkfsClient/KfsAttr.h	/^    int64_t  chunkVersion;$/;"	m	struct:KFS::ChunkAttr
chunkVersion	cc/libkfsClient/KfsOps.h	/^    int64_t      chunkVersion; \/* input *\/$/;"	m	struct:KFS::ChunkSpaceReleaseOp
chunkVersion	cc/libkfsClient/KfsOps.h	/^    int64_t      chunkVersion; \/* input *\/$/;"	m	struct:KFS::ChunkSpaceReserveOp
chunkVersion	cc/libkfsClient/KfsOps.h	/^    int64_t      chunkVersion; \/* input *\/$/;"	m	struct:KFS::ReadOp
chunkVersion	cc/libkfsClient/KfsOps.h	/^    int64_t      chunkVersion; \/* input *\/$/;"	m	struct:KFS::RecordAppendOp
chunkVersion	cc/libkfsClient/KfsOps.h	/^    int64_t      chunkVersion; \/* input *\/$/;"	m	struct:KFS::WriteIdAllocOp
chunkVersion	cc/libkfsClient/KfsOps.h	/^    int64_t      chunkVersion; \/* input *\/$/;"	m	struct:KFS::WritePrepareOp
chunkVersion	cc/libkfsClient/KfsOps.h	/^    int64_t      chunkVersion;$/;"	m	struct:KFS::GetRecordAppendOpStatus
chunkVersion	cc/libkfsClient/KfsOps.h	/^    int64_t chunkVersion; \/\/ result$/;"	m	struct:KFS::ChunkLayoutInfo
chunkVersion	cc/libkfsClient/KfsOps.h	/^    int64_t chunkVersion; \/\/ result$/;"	m	struct:KFS::GetAllocOp
chunkVersion	cc/libkfsClient/KfsOps.h	/^    int64_t chunkVersion; \/\/ result---version # for the chunk$/;"	m	struct:KFS::AllocateOp
chunkVersion	cc/libkfsClient/KfsOps.h	/^    int64_t chunkVersion;$/;"	m	struct:KFS::SizeOp
chunkVersion	cc/libkfsClient/KfsOps.h	/^    int64_t chunkVersion;$/;"	m	struct:KFS::WriteSyncOp
chunkVersion	cc/meta/LayoutManager.cc	/^	const seq_t     chunkVersion;$/;"	m	class:BeginMakeChunkStable	file:
chunkVersion	cc/meta/LayoutManager.cc	/^	const seq_t     chunkVersion;$/;"	m	class:MakeChunkStable	file:
chunkVersion	cc/meta/LayoutManager.h	/^			seq_t     chunkVersion;$/;"	m	struct:KFS::ARAChunkCache::Entry
chunkVersion	cc/meta/LayoutManager.h	/^		seq_t             chunkVersion;$/;"	m	struct:KFS::MakeChunkStableInfo
chunkVersion	cc/meta/meta.h	/^	seq_t chunkVersion;		\/\/!< version # for this chunk$/;"	m	class:KFS::MetaChunkInfo
chunkVersion	cc/meta/request.h	/^	const seq_t          chunkVersion;  \/\/ input$/;"	m	struct:KFS::MetaBeginMakeChunkStable
chunkVersion	cc/meta/request.h	/^	const seq_t          chunkVersion; \/\/!< The version tha the chunk should be in$/;"	m	struct:KFS::MetaChunkMakeStable
chunkVersion	cc/meta/request.h	/^	const seq_t     chunkVersion;     \/\/ input$/;"	m	struct:KFS::MetaLogMakeChunkStable
chunkVersion	cc/meta/request.h	/^	seq_t     chunkVersion;$/;"	m	struct:KFS::ChunkInfo
chunkVersion	cc/meta/request.h	/^	seq_t chunkVersion;	\/\/!< version # assigned to this chunk$/;"	m	struct:KFS::MetaAllocate
chunkVersion	cc/meta/request.h	/^	seq_t chunkVersion;	\/\/!< version # assigned to this chunk$/;"	m	struct:KFS::MetaChunkVersChange
chunkVersion	cc/meta/request.h	/^	seq_t chunkVersion; \/\/!< output: the chunkservers tells us what it did$/;"	m	struct:KFS::MetaChunkReplicate
chunkVersion	cc/meta/request.h	/^	seq_t chunkVersion; \/\/!< version # assigned to this chunk$/;"	m	struct:KFS::ChunkLayoutInfo
chunkVersion	cc/meta/request.h	/^	seq_t chunkVersion; \/\/!< version # assigned to this chunk$/;"	m	struct:KFS::MetaGetalloc
chunkVersionInc	cc/meta/meta.cc	/^seq_t KFS::chunkVersionInc = 0;$/;"	m	class:KFS	file:
chunkcount	cc/meta/meta.h	/^	long long chunkcount;	\/\/!< number of constituent chunks$/;"	m	class:KFS::MetaFattr
chunkinfo_parse	python/kfscp/kfscp.py	/^	def chunkinfo_parse(self, parts):$/;"	m	class:cp
chunkmapFile	cc/meta/request.h	/^	string chunkmapFile; \/\/!< file to which the chunk map was written to$/;"	m	struct:KFS::MetaDumpChunkToServerMap
chunkno	cc/libkfsClient/KfsClientInt.h	/^    int chunkno;		\/\/ which chunk$/;"	m	struct:KFS::ChunkBuffer
chunks	cc/chunk/KfsOps.h	/^    std::vector<ChunkInfo_t> chunks;$/;"	m	struct:KFS::HelloMetaOp
chunks	cc/libkfsClient/KfsOps.h	/^    std::vector<ChunkLayoutInfo> chunks;$/;"	m	struct:KFS::GetLayoutOp
chunks	cc/meta/request.h	/^	vector<ChunkInfo> chunks; \/\/!< Chunks  hosted on this server$/;"	m	struct:KFS::MetaHello
chunks	cc/rebalancer/rebalancer.h	/^        std::vector<ChunkIdSz> chunks;$/;"	m	struct:KFS::DriveInfo
chunksz	cc/rebalancer/rebalancer.h	/^        int  chunksz;$/;"	m	struct:KFS::ChunkIdSz
cid	cc/meta/LayoutManager.cc	/^	chunkId_t cid;$/;"	m	class:ReplicationDoneNotifier	file:
cid	cc/rebalancer/rebalancer.h	/^        kfsChunkId_t cid;$/;"	m	struct:KFS::ChunkIdSz
ckptLogVersionStr	cc/chunk/Logger.cc	/^char ckptLogVersionStr[128];$/;"	v
cleanupDumpster	cc/meta/kfsops.cc	/^Tree::cleanupDumpster()$/;"	f	class:Tree
cleanupPathToFidCache	cc/meta/kfsops.cc	/^Tree::cleanupPathToFidCache()$/;"	f	class:Tree
clear	cc/common/properties.h	/^    void clear() { propmap.clear(); }$/;"	f	class:KFS::Properties
clear	cc/meta/LayoutManager.h	/^		void clear() {$/;"	f	class:KFS::CSMap
clear	cc/meta/LayoutManager.h	/^		void clear() {$/;"	f	class:KFS::RackInfo
clearflag	cc/meta/base.h	/^	void clearflag(int bit) { flagbits &= ~bit; }$/;"	f	class:KFS::MetaNode
clearskip	cc/meta/meta.h	/^	void clearskip() { clearflag(META_SKIP); }$/;"	f	class:KFS::Meta
client	cc/access/KfsModulePy.cc	/^	KfsClientPtr client;		\/\/ The client itself$/;"	m	struct:kfs_Client	file:
client	cc/fuse/kfs_fuse_main.cc	/^static KFS::KfsClientPtr client;$/;"	v	file:
client	cc/libkfsClient/KfsClient.cc	/^    KfsClientImpl *client;$/;"	m	struct:RespondingServer	file:
client	cc/libkfsClient/KfsClient.cc	/^    KfsClientImpl *client;$/;"	m	struct:RespondingServer2	file:
client	python/unittests/dirops.py	/^    client = start_client(get_param_string('kfs_properties'))$/;"	v	class:DirOpsTestCase
client	python/unittests/worm.py	/^    client = start_client(get_param_string('kfs_properties'))$/;"	v
client	python/unittests/write-flush.py	/^    client = start_client(get_param_string('kfs_properties'))$/;"	v	class:WriteFlushTestCase
client	python/unittests/write.py	/^    client = start_client(get_param_string('kfs_properties'))$/;"	v	class:WritePlacementTestCase
clientHost	cc/libkfsClient/KfsOps.h	/^    std::string clientHost; \/\/ our hostname$/;"	m	struct:KFS::AllocateOp
clientHost	cc/meta/request.h	/^	std::string clientHost; \/\/!< the host from which request was received$/;"	m	struct:KFS::MetaAllocate
clientProtoVers	cc/meta/request.h	/^	int clientProtoVers; \/\/!< protocol version # sent by client$/;"	m	struct:KFS::MetaRequest
clientSeq	cc/chunk/KfsOps.h	/^    kfsSeq_t       clientSeq;         \/* input *\/$/;"	m	struct:KFS::WriteIdAllocOp
clientSeq	cc/chunk/KfsOps.h	/^    kfsSeq_t     clientSeq;             \/* input *\/$/;"	m	struct:KFS::RecordAppendOp
clnt	cc/chunk/KfsOps.h	/^    KfsCallbackObj* clnt;$/;"	m	struct:KFS::KfsOp
clnt	cc/meta/request.h	/^	KfsCallbackObj *clnt; \/\/!< a handle to the client that generated this request.$/;"	m	struct:KFS::MetaRequest
close	cc/common/DailyRollingFileAppender.cc	/^void DailyRollingFileAppender::close()$/;"	f	class:log4cpp::DailyRollingFileAppender
close	java/org/kosmix/kosmosfs/access/KfsInputChannel.java	/^    int close(long cPtr, int fd);$/;"	m	class:KfsInputChannel	file:
close	java/org/kosmix/kosmosfs/access/KfsInputChannel.java	/^    public void close() throws IOException$/;"	m	class:KfsInputChannel
close	java/org/kosmix/kosmosfs/access/KfsOutputChannel.java	/^    int close(long ptr, int fd);$/;"	m	class:KfsOutputChannel	file:
close	java/org/kosmix/kosmosfs/access/KfsOutputChannel.java	/^    public void close() throws IOException$/;"	m	class:KfsOutputChannel
closeHole	cc/meta/kfstree.cc	/^Node::closeHole(int pos, int skip)$/;"	f	class:Node
clusterKey	cc/chunk/KfsOps.h	/^    std::string clusterKey;$/;"	m	struct:KFS::HelloMetaOp
cmdHandler	cc/tools/KfsShell.h	/^        typedef int (*cmdHandler)(const std::vector<std::string> &args);$/;"	t	namespace:KFS::tools
cmdShow	cc/chunk/KfsOps.h	/^    std:: ostringstream cmdShow;$/;"	m	struct:KFS::HeartbeatOp
coalesceBlocks	cc/meta/kfsops.cc	/^Tree::coalesceBlocks(MetaFattr* srcFa, MetaFattr* dstFa, $/;"	f	class:Tree
coalesceBlocks	cc/meta/kfsops.cc	/^Tree::coalesceBlocks(const std::string &srcPath, const std::string &dstPath, $/;"	f	class:Tree
collides	python/rw/rw.py	/^def collides(region1, region2):$/;"	f
committed	cc/meta/logger.h	/^	seq_t committed;	\/\/!< highest request known to be on disk$/;"	m	class:KFS::Logger
compare	cc/meta/meta.cc	/^Key::compare(const Key &test) const$/;"	f	class:Key
compareChunkReplicas	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    boolean compareChunkReplicas(long ptr, String path, StringBuffer md5sum);$/;"	m	class:KfsAccess	file:
compareData	cc/tests/KfsReader_main.cc	/^compareData(char *dst, char *src, int numBytes)$/;"	f
compareData	cc/tests/KfsSeekWrite_main.cc	/^compareData(const char *dst, const char *src, int numBytes)$/;"	f
compareData	cc/tests/KfsTrunc_main.cc	/^compareData(char *dst, char *src, int numBytes)$/;"	f
compareData	cc/tests/KfsWriter_main.cc	/^compareData(char *dst, char *src, int numBytes)$/;"	f
compareName	cc/meta/meta.h	/^	const int compareName(const string test) const {$/;"	f	class:KFS::MetaDentry
computeMD5	cc/chunk/ChunkServer_main.cc	/^computeMD5(const char *pathname)$/;"	f	file:
computeSpace	cc/meta/LayoutManager.h	/^		void computeSpace() {$/;"	f	class:KFS::RackInfo
config	python/flogger/flogger.py	/^config = ConfigParser.ConfigParser(default_test_params)$/;"	v
config	python/rw/rw.py	/^config = ConfigParser.ConfigParser(default_test_params)$/;"	v
config	python/unittests/dirops.py	/^config = ConfigParser.ConfigParser(default_test_params)$/;"	v
config	python/unittests/worm.py	/^config = ConfigParser.ConfigParser(default_test_params)$/;"	v
config	python/unittests/write-flush.py	/^config = ConfigParser.ConfigParser(default_test_params)$/;"	v
config	python/unittests/write.py	/^config = ConfigParser.ConfigParser(default_test_params)$/;"	v
configFn	cc/meta/request.h	/^	std::string configFn; \/\/<! full path to the file with the config$/;"	m	struct:KFS::MetaReadConfig
config_file	python/flogger/flogger.py	/^		config_file = None$/;"	v
config_file	python/flogger/flogger.py	/^		config_file = default_config_file$/;"	v
config_file	python/flogger/flogger.py	/^		config_file = sys.argv[1]$/;"	v
config_file	python/rw/rw.py	/^		config_file = None$/;"	v
config_file	python/rw/rw.py	/^		config_file = default_config_file$/;"	v
config_file	python/rw/rw.py	/^		config_file = sys.argv[1]$/;"	v
conn	cc/chunk/MetaServerSM.cc	/^    NetConnectionPtr conn;$/;"	m	class:OpDispatcher	file:
conn	cc/libkfsIO/DiskEvent.h	/^    DiskConnectionPtr	conn;$/;"	m	struct:KFS::DiskEvent_t
const_iterator	cc/meta/LayoutManager.h	/^		typedef Map::const_iterator const_iterator;$/;"	t	class:KFS::ARAChunkCache
const_iterator	cc/meta/LayoutManager.h	/^		typedef Map::const_iterator const_iterator;$/;"	t	class:KFS::CSMap
contentBuf	cc/libkfsClient/KfsOps.h	/^    char      *contentBuf;$/;"	m	struct:KFS::KfsOp
contentBufLen	cc/libkfsClient/KfsOps.h	/^    size_t    contentBufLen;$/;"	m	struct:KFS::KfsOp
contentLength	cc/chunk/KfsOps.h	/^    int        contentLength;$/;"	m	struct:KFS::SetProperties
contentLength	cc/chunk/KfsOps.h	/^    int contentLength; \/* length of data that identifies the stale chunks *\/$/;"	m	struct:KFS::StaleChunksOp
contentLength	cc/libkfsClient/KfsOps.h	/^    size_t    contentLength;$/;"	m	struct:KFS::KfsOp
contentLength	cc/meta/request.h	/^	int contentLength; \/\/!< Length of the message body$/;"	m	struct:KFS::MetaHello
convertToMB	cc/tools/kfsping_main.cc	/^float convertToMB(long bytes)$/;"	f
copyInto	cc/meta/LayoutManager.h	/^		void copyInto(CSMap& map) const {$/;"	f	class:KFS::CSMap
copyWithPrefix	cc/common/properties.cc	/^void Properties::copyWithPrefix(std::string prefix, Properties& props) const$/;"	f	class:Properties
count	cc/meta/LayoutManager.h	/^		size_type count(const key_type& key) const {$/;"	f	class:KFS::CSMap
count	cc/meta/kfstree.h	/^	int count;			\/\/!< how many children$/;"	m	class:KFS::Node
count	cc/telemetry/packet.h	/^        uint32_t count;$/;"	m	struct:KFS::TelemetryClntPacket_t
counterManager	cc/libkfsIO/Globals.h	/^            CounterManager counterManager;$/;"	m	struct:KFS::libkfsio::Globals_t
cp	python/kfscp/kfscp.py	/^class cp:$/;"	c
cpbit	cc/meta/kfstree.h	/^	int cpbit() const { return testflag(META_CPBIT) ? 1 : 0; }$/;"	f	class:KFS::Node
cpcount	cc/meta/checkpoint.h	/^	int cpcount;		\/\/!< number of CP's since startup$/;"	m	class:KFS::Checkpoint
cpdir	cc/meta/checkpoint.h	/^	string cpdir;		\/\/!< dir for CP files$/;"	m	class:KFS::Checkpoint
cpfile	cc/meta/checkpoint.h	/^	string cpfile(seq_t highest)	\/\/!< generate the next file name$/;"	f	class:KFS::Checkpoint
cpname	cc/meta/checkpoint.h	/^	string cpname;		\/\/!< name of CP file$/;"	m	class:KFS::Checkpoint
create	cc/meta/kfsops.cc	/^Tree::create(fid_t dir, const string &fname, fid_t *newFid,$/;"	f	class:Tree
create	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    int create(long ptr, String path, int numReplicas, boolean exclusive);$/;"	m	class:KfsAccess	file:
create_op	python/flogger/flogger.py	/^class create_op(test_op):$/;"	c
crset	cc/meta/LayoutManager.cc	/^	CRCandidateSet &crset;$/;"	m	class:ReReplicationCheckIniter	file:
crset	cc/meta/LayoutManager.cc	/^	ReplicationCandidates &crset;$/;"	m	class:MapRetirer	file:
crset	cc/meta/LayoutManager.cc	/^	ReplicationCandidates&   crset;$/;"	m	class:MapPurger	file:
crtime	cc/libkfsClient/KfsAttr.h	/^    struct timeval crtime; \/\/\/ creation time$/;"	m	struct:KFS::FileAttr	typeref:struct:KFS::FileAttr::timeval
crtime	cc/libkfsClient/KfsAttr.h	/^    struct timeval crtime; \/\/\/ creation time$/;"	m	struct:KFS::KfsFileAttr	typeref:struct:KFS::KfsFileAttr::timeval
crtime	cc/libkfsClient/KfsAttr.h	/^    struct timeval crtime; \/\/\/ creation time$/;"	m	struct:KFS::KfsServerAttr	typeref:struct:KFS::KfsServerAttr::timeval
crtime	cc/meta/meta.h	/^	struct timeval crtime;	\/\/!< creation time$/;"	m	class:KFS::MetaFattr	typeref:struct:KFS::MetaFattr::timeval
ctime	cc/libkfsClient/KfsAttr.h	/^    struct timeval ctime; \/\/\/ attribute change time$/;"	m	struct:KFS::FileAttr	typeref:struct:KFS::FileAttr::timeval
ctime	cc/libkfsClient/KfsAttr.h	/^    struct timeval ctime; \/\/\/ attribute change time$/;"	m	struct:KFS::KfsFileAttr	typeref:struct:KFS::KfsFileAttr::timeval
ctime	cc/libkfsClient/KfsAttr.h	/^    struct timeval ctime; \/\/\/ attribute change time$/;"	m	struct:KFS::KfsServerAttr	typeref:struct:KFS::KfsServerAttr::timeval
ctime	cc/meta/meta.h	/^	struct timeval ctime;	\/\/!< attribute change time$/;"	m	class:KFS::MetaFattr	typeref:struct:KFS::MetaFattr::timeval
ctrDiskBytesRead	cc/libkfsIO/Globals.h	/^            Counter ctrDiskBytesRead;$/;"	m	struct:KFS::libkfsio::Globals_t
ctrDiskBytesWritten	cc/libkfsIO/Globals.h	/^            Counter ctrDiskBytesWritten;$/;"	m	struct:KFS::libkfsio::Globals_t
ctrDiskIOErrors	cc/libkfsIO/Globals.h	/^            Counter ctrDiskIOErrors;$/;"	m	struct:KFS::libkfsio::Globals_t
ctrNetBytesRead	cc/libkfsIO/Globals.h	/^            Counter ctrNetBytesRead;$/;"	m	struct:KFS::libkfsio::Globals_t
ctrNetBytesWritten	cc/libkfsIO/Globals.h	/^            Counter ctrNetBytesWritten;$/;"	m	struct:KFS::libkfsio::Globals_t
ctrOpenDiskFds	cc/libkfsIO/Globals.h	/^            Counter ctrOpenDiskFds;$/;"	m	struct:KFS::libkfsio::Globals_t
ctrOpenNetFds	cc/libkfsIO/Globals.h	/^            Counter ctrOpenNetFds;$/;"	m	struct:KFS::libkfsio::Globals_t
currPos	cc/libkfsClient/KfsClientInt.h	/^    FilePosition currPos;$/;"	m	struct:KFS::FileTableEntry
current	cc/meta/kfstree.h	/^	Meta *current() const { return dad->leaf(pos); }$/;"	f	class:KFS::LeafIter
cv	cc/meta/thread.h	/^	pthread_cond_t cv;$/;"	m	class:KFS::MetaThread
cvi	cc/meta/request.h	/^	seq_t cvi;$/;"	m	struct:KFS::MetaChangeChunkVersionInc
cwd	cc/access/KfsModulePy.cc	/^	PyObject *cwd;			\/\/ Current directory$/;"	m	struct:kfs_Client	file:
dad	cc/meta/kfstree.h	/^	Node *dad;	\/\/!< node containing child pointers$/;"	m	class:KFS::LeafIter
daisyChain	cc/libkfsClient/KfsAsyncRW.h	/^        std::vector<ServerLocation> daisyChain;$/;"	m	struct:KFS::AsyncWriteReq
data	cc/chunk/KfsOps.h	/^    std::ostringstream data; \/\/ the data that needs to be checkpointed$/;"	m	struct:KFS::CheckpointOp
data	cc/libkfsIO/DiskEvent.h	/^    IOBufferData	data;$/;"	m	struct:KFS::DiskEvent_t
dataBuf	cc/chunk/KfsOps.h	/^    IOBuffer     *dataBuf; \/* buffer with the data to be written *\/$/;"	m	struct:KFS::WriteOp
dataBuf	cc/chunk/KfsOps.h	/^    IOBuffer     dataBuf;               \/* buffer with the data to be written *\/$/;"	m	struct:KFS::RecordAppendOp
dataBuf	cc/chunk/KfsOps.h	/^    IOBuffer *dataBuf; \/* buffer with the data read *\/$/;"	m	struct:KFS::ReadOp
dataBuf	cc/chunk/KfsOps.h	/^    IOBuffer *dataBuf; \/* buffer with the data to be written *\/$/;"	m	struct:KFS::WriteChunkMetaOp
dataBuf	cc/chunk/KfsOps.h	/^    IOBuffer *dataBuf; \/* buffer with the data to be written *\/$/;"	m	struct:KFS::WritePrepareFwdOp
dataBuf	cc/chunk/KfsOps.h	/^    IOBuffer *dataBuf; \/* buffer with the data to be written *\/$/;"	m	struct:KFS::WritePrepareOp
dataBuf	cc/chunk/KfsOps.h	/^    IOBuffer *dataBuf; \/\/ buffer with the checksum info$/;"	m	struct:KFS::GetChunkMetadataOp
dataFH	cc/chunk/ChunkManager.cc	/^    DiskIo::FilePtr dataFH;$/;"	m	class:KFS::ChunkInfoHandle	file:
default_config_file	python/flogger/flogger.py	/^default_config_file = TESTNAME + ".cfg"	# test configuration file$/;"	v
default_config_file	python/rw/rw.py	/^default_config_file = TESTNAME + ".cfg"	# test configuration file$/;"	v
default_config_file	python/unittests/dirops.py	/^default_config_file = TESTNAME + ".cfg"	# test configuration file$/;"	v
default_config_file	python/unittests/worm.py	/^default_config_file = TESTNAME + ".cfg"	# test configuration file$/;"	v
default_config_file	python/unittests/write-flush.py	/^default_config_file = TESTNAME + ".cfg"	# test configuration file$/;"	v
default_config_file	python/unittests/write.py	/^default_config_file = TESTNAME + ".cfg"	# test configuration file$/;"	v
default_test_params	python/flogger/flogger.py	/^default_test_params = { $/;"	v
default_test_params	python/rw/rw.py	/^default_test_params = {$/;"	v
default_test_params	python/unittests/dirops.py	/^default_test_params = {$/;"	v
default_test_params	python/unittests/worm.py	/^default_test_params = {$/;"	v
default_test_params	python/unittests/write-flush.py	/^default_test_params = {$/;"	v
default_test_params	python/unittests/write.py	/^default_test_params = {$/;"	v
del	cc/meta/kfstree.cc	/^Tree::del(Meta *m)$/;"	f	class:Tree
dentry_parse	python/kfscp/kfscp.py	/^	def dentry_parse(self, parts):$/;"	m	class:cp
dependentOp	cc/chunk/ClientSM.h	/^        KfsOp *dependentOp;$/;"	m	struct:KFS::OpPair
dequeue	cc/meta/queue.h	/^MetaQueue <T>::dequeue()$/;"	f	class:KFS::MetaQueue
dequeue_internal	cc/meta/queue.h	/^MetaQueue <T>::dequeue_internal()$/;"	f	class:KFS::MetaQueue
dequeue_nowait	cc/meta/queue.h	/^MetaQueue <T>::dequeue_nowait()$/;"	f	class:KFS::MetaQueue
descend_op	python/flogger/flogger.py	/^class descend_op(test_op):$/;"	c
description	cc/access/kfs_setup.py	/^	description="KFS client module",$/;"	v
desiredMinReplicasPerFile	cc/emulator/EmulatorSetup.cc	/^static int16_t desiredMinReplicasPerFile = 1;$/;"	v	file:
dest	python/rw/rw.py	/^def dest(region):$/;"	f
didAllocation	cc/libkfsClient/KfsAttr.h	/^    bool didAllocation;$/;"	m	struct:KFS::ChunkAttr
didAppend	cc/libkfsClient/KfsClientInt.h	/^    bool didAppend;$/;"	m	struct:KFS::FileTableEntry
die	cc/chunk/Utils.cc	/^void KFS::die(const string &msg)$/;"	f	class:KFS
dir	cc/meta/kfsops.cc	/^	fid_t dir;$/;"	m	class:RemoveDumpsterEntry	file:
dir	cc/meta/meta.h	/^	fid_t dir;	\/\/!< id of parent directory$/;"	m	class:KFS::MetaDentry
dir	cc/meta/request.h	/^	fid_t dir;	\/\/!< directory to read$/;"	m	struct:KFS::MetaReaddir
dir	cc/meta/request.h	/^	fid_t dir;	\/\/!< directory to read$/;"	m	struct:KFS::MetaReaddirPlus
dir	cc/meta/request.h	/^	fid_t dir;	\/\/!< parent directory fid$/;"	m	struct:KFS::MetaCreate
dir	cc/meta/request.h	/^	fid_t dir;	\/\/!< parent directory fid$/;"	m	struct:KFS::MetaLookup
dir	cc/meta/request.h	/^	fid_t dir;	\/\/!< parent directory fid$/;"	m	struct:KFS::MetaMkdir
dir	cc/meta/request.h	/^	fid_t dir;	\/\/!< parent directory fid$/;"	m	struct:KFS::MetaRemove
dir	cc/meta/request.h	/^	fid_t dir;	\/\/!< parent directory fid$/;"	m	struct:KFS::MetaRmdir
dir	cc/meta/request.h	/^	fid_t dir;	\/\/!< parent directory$/;"	m	struct:KFS::MetaRename
dirList	cc/tools/KfsLs.cc	/^dirList(string kfsdirname, bool longMode, bool humanReadable, bool timeInSecs)$/;"	f
dirListPlusAttr	cc/tests/KfsDirScanTest_main.cc	/^void dirListPlusAttr(const string &kfspathname)$/;"	f
dirname	cc/chunk/Chunk.h	/^    std::string dirname;$/;"	m	struct:KFS::ChunkInfo_t
dirname	cc/chunk/ChunkManager.h	/^        std::string dirname;$/;"	m	struct:KFS::ChunkManager::ChunkDirInfo_t
dirname	cc/chunk/ChunkManager.h	/^    std::string dirname;$/;"	m	struct:KFS::ChunkDirInfo_t
dirname	cc/libkfsClient/KfsOps.h	/^    const char *dirname;$/;"	m	struct:KFS::MkdirOp
dirname	cc/libkfsClient/KfsOps.h	/^    const char *dirname;$/;"	m	struct:KFS::RmdirOp
dirty	cc/libkfsClient/KfsClientInt.h	/^    bool dirty;		\/\/ must flush to server if true$/;"	m	struct:KFS::ChunkBuffer
disableFidToPathname	cc/meta/kfstree.h	/^	void disableFidToPathname() { allowFidToPathConversion = false; }$/;"	f	class:KFS::Tree
diskEvents	cc/libkfsIO/DiskConnection.h	/^    std::list<DiskEventPtr> diskEvents; \/\/\/ disk events associated with$/;"	m	struct:KFS::DiskIORequest
diskIOTime	cc/chunk/KfsOps.h	/^    float diskIOTime; \/* how long did the AIOs take *\/$/;"	m	struct:KFS::ReadOp
diskIOTime	cc/libkfsClient/KfsOps.h	/^    float   diskIOTime; \/* as reported by the server *\/$/;"	m	struct:KFS::ReadOp
diskIOTime	cc/telemetry/packet.h	/^        double diskIOTime[MAX_IO_INFO_PER_PKT];$/;"	m	struct:KFS::TelemetryClntPacket_t
diskIo	cc/chunk/KfsOps.h	/^    DiskIoPtr    diskIo; \/* disk connection used for writing data *\/$/;"	m	struct:KFS::WriteOp
diskIo	cc/chunk/KfsOps.h	/^    DiskIoPtr diskIo; \/* disk connection used for reading data *\/$/;"	m	struct:KFS::ReadChunkMetaOp
diskIo	cc/chunk/KfsOps.h	/^    DiskIoPtr diskIo; \/* disk connection used for reading data *\/$/;"	m	struct:KFS::ReadOp
diskIo	cc/chunk/KfsOps.h	/^    DiskIoPtr diskIo; \/* disk connection used for writing data *\/$/;"	m	struct:KFS::WriteChunkMetaOp
dispatch	cc/meta/logger.cc	/^Logger::dispatch(MetaRequest *r)$/;"	f	class:Logger
distributeState	cc/telemetry/telemetry_server_main.cc	/^KFS::distributeState(int sock)$/;"	f	class:KFS
doDirList	cc/tools/KfsLs.cc	/^doDirList(string kfsdirname)$/;"	f
doDirList	cc/tools/KfsToolsCommon.cc	/^doDirList(KfsClientPtr kfsClient, string kfsdirname)$/;"	f	file:
doDirListPlusAttr	cc/tools/KfsLs.cc	/^doDirListPlusAttr(string kfsdirname, bool humanReadable, bool timeInSecs)$/;"	f
doDirListPlusAttr	cc/tools/KfsToolsCommon.cc	/^doDirListPlusAttr(KfsClientPtr kfsClient, string kfsdirname, bool humanReadable, bool timeInSecs)$/;"	f	file:
doFileCreate	cc/tests/KfsDirFileTester_main.cc	/^int doFileCreate(char *parentDir, char *name)$/;"	f
doFileOps	cc/tests/KfsReader_main.cc	/^bool doFileOps(char *testDataFile, char *parentDir, int seqNum, int numIter)$/;"	f
doFileOps	cc/tests/KfsSeekWrite_main.cc	/^bool doFileOps(char *testDataFile,$/;"	f
doFileOps	cc/tests/KfsTrunc_main.cc	/^bool doFileOps(char *testDataFile,$/;"	f
doFileOps	cc/tests/KfsWriter_main.cc	/^bool doFileOps(char *testDataFile,$/;"	f
doFileRemove	cc/tests/KfsDirFileTester_main.cc	/^int doFileRemove(char *parentDir, char *name)$/;"	f
doLs	cc/tools/kfsls_main.cc	/^doLs(const string & progName, const string & arg, bool longMode, bool humanReadable, bool timeInSecs)$/;"	f
doMkdir	cc/tests/KfsDirFileTester_main.cc	/^doMkdir(char *dirname)$/;"	f
doMkdir	cc/tests/KfsSeekWrite_main.cc	/^doMkdir(char *dirname)$/;"	f
doMkdir	cc/tests/KfsTrunc_main.cc	/^doMkdir(char *dirname)$/;"	f
doMkdir	cc/tests/KfsWriter_main.cc	/^doMkdir(char *dirname)$/;"	f
doMkdirs	cc/tests/KfsPerfWriter_main.cc	/^doMkdirs(const char *dirname)$/;"	f
doMkdirs	cc/tests/KfsRecordAppend_main.cc	/^doMkdirs(const char *dirname)$/;"	f
doMkdirs	cc/tools/KfsToolsCommon.cc	/^doMkdirs(KfsClientPtr kfsClient, const string & path)$/;"	f	file:
doMkdirs	cc/tools/cptokfs_main.cc	/^doMkdirs(const char *path)$/;"	f
doMkdirs	cc/tools/utils.cc	/^KFS::tools::doMkdirs(const char *path)$/;"	f	class:KFS::tools
doPut	cc/tools/kfsput_main.cc	/^doPut(const string &filename)$/;"	f
doRead	cc/tests/KfsPerfReader_main.cc	/^doRead(const string &filename, int numMBytes,$/;"	f
doRead	cc/tests/KfsSeekWrite_main.cc	/^doRead(int fd, off_t offset, int numBytes, const char *src)$/;"	f
doReaddir	cc/tests/KfsDirFileTester_main.cc	/^doReaddir(char *dirname, uint32_t expectEntries)$/;"	f
doRecrRemove	cc/tools/KfsRm.cc	/^doRecrRemove(const char *pathname)$/;"	f
doRemoveFile	cc/tools/KfsRm.cc	/^doRemoveFile(const char *pathname)$/;"	f
doRmdir	cc/tests/KfsDirFileTester_main.cc	/^doRmdir(char *dirname)$/;"	f
doRmdir	cc/tools/utils.cc	/^KFS::tools::doRmdir(const char *dirname)$/;"	f	class:KFS::tools
doWrite	cc/tests/KfsPerfWriter_main.cc	/^doWrite(const string &filename, int numMBytes, size_t writeSizeBytes, double sleepSec, int cliBufSize)$/;"	f
doWrite	cc/tests/KfsRW_main.cc	/^doWrite(const string &filename, int numMBytes, size_t writeSizeBytes)$/;"	f
doWrite	cc/tests/KfsRecordAppend_main.cc	/^doWrite(const string &filename, int numMBytes, size_t writeSizeBytes, double sleepSec, char record)$/;"	f
doWrite	cc/tests/KfsSeekWrite_main.cc	/^doWrite(int fd, off_t offset, int numBytes, const char *data)$/;"	f
do_CP	cc/meta/checkpoint.cc	/^Checkpoint::do_CP()$/;"	f	class:Checkpoint
do_read	python/rw/rw.py	/^	def do_read(self, srcmap):$/;"	m	class:test_file
do_rmr	python/rmr/rmr.py	/^def do_rmr(client, path):$/;"	f
do_write	python/rw/rw.py	/^	def do_write(self, srcmap):$/;"	m	class:test_file
doit	python/flogger/flogger.py	/^	def doit(self, dirlist):$/;"	m	class:ascend_op
doit	python/flogger/flogger.py	/^	def doit(self, dirlist):$/;"	m	class:create_op
doit	python/flogger/flogger.py	/^	def doit(self, dirlist):$/;"	m	class:descend_op
doit	python/flogger/flogger.py	/^	def doit(self, dirlist):$/;"	m	class:mkdir_op
doit	python/flogger/flogger.py	/^	def doit(self, dirlist):$/;"	m	class:read_op
doit	python/flogger/flogger.py	/^	def doit(self, dirlist):$/;"	m	class:remove_op
doit	python/flogger/flogger.py	/^	def doit(self, dirlist):$/;"	m	class:rmdir_op
doit	python/flogger/flogger.py	/^	def doit(self, dirlist):$/;"	m	class:test_op
doit	python/flogger/flogger.py	/^	def doit(self, dirlist):$/;"	m	class:truncate_op
doit	python/flogger/flogger.py	/^	def doit(self, dirlist):$/;"	m	class:write_op
done	cc/chunk/KfsOps.h	/^    bool            done:1;$/;"	m	struct:KFS::KfsOp
done	cc/libkfsClient/KfsAsyncRW.h	/^        bool        done;$/;"	m	struct:KFS::AsyncReq
downServers	cc/meta/request.h	/^	string downServers; \/\/!< info about servers that have gone down$/;"	m	struct:KFS::MetaPing
downServers	cc/tools/MonUtils.h	/^        std::vector<std::string> downServers; \/\/\/ result$/;"	m	struct:KFS_MON::MetaPingOp
downtime	cc/tools/MonUtils.h	/^        int downtime; \/\/ # of seconds of downtime$/;"	m	struct:KFS_MON::RetireChunkserverOp
driveName	cc/chunk/KfsOps.h	/^    std::string driveName; \/* for telemetry, provide the drive info to the client *\/$/;"	m	struct:KFS::ReadOp
drivename	cc/libkfsClient/KfsOps.h	/^    std::string drivename; \/* drive from which data was read *\/$/;"	m	struct:KFS::ReadOp
dst	cc/meta/LayoutManager.h	/^		char dst[hostnamelen];$/;"	m	struct:KFS::RebalancePlanInfo_t
dst	cc/rebalancer/rebalancer.h	/^        char dst[hostnamelen];$/;"	m	struct:KFS::RebalancePlanInfo_t
dstChunkId	cc/chunk/KfsOps.h	/^    kfsChunkId_t dstChunkId; \/\/ input$/;"	m	struct:KFS::CoalesceBlockOp
dstFid	cc/meta/request.h	/^	fid_t  dstFid;$/;"	m	struct:KFS::MetaCoalesceBlocks
dstFileId	cc/chunk/KfsOps.h	/^    kfsFileId_t dstFileId; \/\/ input$/;"	m	struct:KFS::CoalesceBlockOp
dstPath	cc/libkfsClient/KfsOps.h	/^    std::string dstPath; \/\/ input$/;"	m	struct:KFS::CoalesceBlocksOp
dstPath	cc/meta/request.h	/^	string dstPath; \/\/!< fully-qualified pathname$/;"	m	struct:KFS::MetaCoalesceBlocks
dstStartOffset	cc/libkfsClient/KfsOps.h	/^    off_t	dstStartOffset; \/\/ output$/;"	m	struct:KFS::CoalesceBlocksOp
dstStartOffset	cc/meta/request.h	/^	off_t  dstStartOffset;$/;"	m	struct:KFS::MetaCoalesceBlocks
elapsedTime	cc/libkfsClient/KfsOps.h	/^    float   elapsedTime; \/* as measured by the client *\/$/;"	m	struct:KFS::ReadOp
elapsedTime	cc/telemetry/packet.h	/^        double elapsedTime[MAX_IO_INFO_PER_PKT];$/;"	m	struct:KFS::TelemetryClntPacket_t
empty	cc/chunk/ChunkManager.h	/^        bool empty() const$/;"	f	class:KFS::ChunkManager::PendingWrites
empty	cc/common/properties.h	/^    bool empty() const { return propmap.empty(); }$/;"	f	class:KFS::Properties
empty	cc/meta/LayoutManager.h	/^		bool empty() const {$/;"	f	class:KFS::CSMap
empty	cc/meta/queue.h	/^	bool empty() { return queue.empty(); }$/;"	f	class:KFS::MetaQueue
emptyDumpsterDir	cc/meta/kfsops.cc	/^KFS::emptyDumpsterDir()$/;"	f	class:KFS
emptydir	cc/meta/kfsops.cc	/^Tree::emptydir(fid_t dir)$/;"	f	class:Tree
emptydirs	python/flogger/flogger.py	/^def emptydirs(client, dirlist):$/;"	f
enableFidToPathname	cc/meta/kfstree.h	/^	void enableFidToPathname() { allowFidToPathConversion = true; }$/;"	f	class:KFS::Tree
enablePathToFidCache	cc/meta/kfstree.h	/^	void enablePathToFidCache()$/;"	f	class:KFS::Tree
end	cc/common/properties.h	/^    iterator end() const { return propmap.end(); }$/;"	f	class:KFS::Properties
end	cc/libkfsIO/IOBuffer.h	/^    iterator end()   const { return mBuf.end();   }$/;"	f	class:KFS::IOBuffer
end	cc/meta/LayoutManager.h	/^		const_iterator end() const {$/;"	f	class:KFS::CSMap
end	cc/meta/LayoutManager.h	/^		iterator end() {$/;"	f	class:KFS::CSMap
endPeriod	cc/telemetry/telemetry_server.h	/^        void endPeriod() {$/;"	f	struct:KFS::NodeState_t
enqueue	cc/meta/queue.h	/^MetaQueue <T>::enqueue(T *req)$/;"	f	class:KFS::MetaQueue
enqueueTime	cc/chunk/KfsOps.h	/^    time_t	 enqueueTime;$/;"	m	struct:KFS::WriteOp
eofMark	cc/libkfsClient/KfsClientInt.h	/^    off_t eofMark;$/;"	m	struct:KFS::FileTableEntry
erase	cc/chunk/ChunkManager.h	/^        bool erase(WriteOp* op)$/;"	f	class:KFS::ChunkManager::PendingWrites
erase	cc/chunk/ChunkManager.h	/^        bool erase(int64_t writeId)$/;"	f	class:KFS::ChunkManager::PendingWrites
erase	cc/meta/LayoutManager.h	/^		size_type erase(const key_type& key) {$/;"	f	class:KFS::CSMap
erase	cc/meta/LayoutManager.h	/^		void erase(iterator it) {$/;"	f	class:KFS::CSMap
errCode	cc/chunk/RemoteSyncSM.cc	/^    int errCode;$/;"	m	class:OpFailer	file:
errCode	cc/meta/ChunkServer.cc	/^	const int errCode;$/;"	m	class:OpFailer	file:
excess	cc/meta/kfstree.h	/^	int excess() { return (count - NFEWEST) \/ 2; }$/;"	f	class:KFS::Node
excludeRetiringServers	cc/meta/LayoutManager.cc	/^	bool excludeRetiringServers;$/;"	m	class:RackSetter	file:
exclusive	cc/libkfsClient/KfsOps.h	/^    bool exclusive; \/\/ O_EXCL flag$/;"	m	struct:KFS::CreateOp
exclusive	cc/meta/request.h	/^	bool exclusive;  \/\/!< model the O_EXCL flag$/;"	m	struct:KFS::MetaCreate
execute	cc/libkfsIO/KfsCallbackObj.h	/^    int execute(int code, void *data) {$/;"	f	class:KFS::ObjectMethod
exists	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    int exists(long ptr, String path);$/;"	m	class:KfsAccess	file:
exit	cc/meta/thread.h	/^	void exit(int status)$/;"	f	class:KFS::MetaThread
expire	cc/meta/LayoutManager.cc	/^	const time_t              expire;$/;"	m	struct:ExpireLeaseIfOwner	file:
expires	cc/chunk/LeaseClerk.h	/^    time_t expires;$/;"	m	struct:KFS::LeaseInfo_t
expires	cc/libkfsClient/LeaseClerk.h	/^    time_t expires;$/;"	m	struct:KFS::LeaseInfo_t
expires	cc/meta/LayoutManager.h	/^		time_t expires;$/;"	m	struct:KFS::LeaseInfo
ext_modules	cc/access/kfs_setup.py	/^	ext_modules = [kfsext])$/;"	v
extractAll	cc/meta/kfstree.h	/^extractAll(Node *n, const Key &k, vector <T *> &result)$/;"	f	namespace:KFS
extractMeta	cc/meta/kfstree.h	/^	template <typename T> T *extractMeta(const Key &k)$/;"	f	class:KFS::Node
fa	cc/meta/kfstree.h	/^	MetaFattr *fa;$/;"	m	struct:KFS::PathToFidCacheEntry
fattr	cc/libkfsClient/KfsClientInt.h	/^    FileAttr	fattr;$/;"	m	struct:KFS::FileTableEntry
fattr	cc/libkfsClient/KfsOps.h	/^    KfsServerAttr fattr; \/\/ result$/;"	m	struct:KFS::LookupOp
fattr	cc/libkfsClient/KfsOps.h	/^    KfsServerAttr fattr; \/\/ result$/;"	m	struct:KFS::LookupPathOp
fattr_parse	python/kfscp/kfscp.py	/^	def fattr_parse(self, parts):$/;"	m	class:cp
fd	cc/access/KfsModulePy.cc	/^	int fd;				\/\/ File descriptor$/;"	m	struct:kfs_File	file:
fd	cc/libkfsClient/KfsAsyncRW.h	/^        int         fd; \/\/ entry from the client filetable$/;"	m	struct:KFS::AsyncReq
fh	cc/common/buildVers.py	/^fh = open(sys.argv[2], "w")$/;"	v
fid	cc/chunk/KfsOps.h	/^    kfsFileId_t fid; \/\/ input: fid whose chunk is bad$/;"	m	struct:KFS::CorruptChunkOp
fid	cc/chunk/KfsOps.h	/^    kfsFileId_t fid; \/\/ output: we tell the metaserver what we replicated$/;"	m	struct:KFS::ReplicateChunkOp
fid	cc/libkfsClient/KfsOps.h	/^    kfsFileId_t fid; \/\/ fid of the directory$/;"	m	struct:KFS::GetDirSummaryOp
fid	cc/libkfsClient/KfsOps.h	/^    kfsFileId_t fid; \/\/ fid of the directory$/;"	m	struct:KFS::ReaddirOp
fid	cc/libkfsClient/KfsOps.h	/^    kfsFileId_t fid; \/\/ fid of the directory$/;"	m	struct:KFS::ReaddirPlusOp
fid	cc/libkfsClient/KfsOps.h	/^    kfsFileId_t fid; \/\/ input$/;"	m	struct:KFS::ChangeFileReplicationOp
fid	cc/libkfsClient/KfsOps.h	/^    kfsFileId_t fid;$/;"	m	struct:KFS::AllocateOp
fid	cc/libkfsClient/KfsOps.h	/^    kfsFileId_t fid;$/;"	m	struct:KFS::GetAllocOp
fid	cc/libkfsClient/KfsOps.h	/^    kfsFileId_t fid;$/;"	m	struct:KFS::GetLayoutOp
fid	cc/libkfsClient/KfsOps.h	/^    kfsFileId_t fid;$/;"	m	struct:KFS::TruncateOp
fid	cc/meta/LayoutManager.cc	/^	const fid_t     fid;$/;"	m	class:BeginMakeChunkStable	file:
fid	cc/meta/LayoutManager.cc	/^	const fid_t     fid;$/;"	m	class:DecChunkWriteCount	file:
fid	cc/meta/LayoutManager.cc	/^	const fid_t     fid;$/;"	m	class:MakeChunkStable	file:
fid	cc/meta/LayoutManager.h	/^		fid_t fid;$/;"	m	struct:KFS::ChunkPlacementInfo
fid	cc/meta/kfstree.h	/^	fid_t fid;$/;"	m	struct:KFS::PathToFidCacheEntry
fid	cc/meta/meta.h	/^	fid_t fid;		\/\/!< id of this item's owner$/;"	m	class:KFS::Meta
fid	cc/meta/request.cc	/^	fid_t fid;$/;"	m	class:KFS::ChunkVersionChanger	file:
fid	cc/meta/request.h	/^	const fid_t          fid;           \/\/ input$/;"	m	struct:KFS::MetaBeginMakeChunkStable
fid	cc/meta/request.h	/^	const fid_t          fid;          \/\/!< input: we tell the chunkserver what it is$/;"	m	struct:KFS::MetaChunkMakeStable
fid	cc/meta/request.h	/^	const fid_t     fid;              \/\/ input$/;"	m	struct:KFS::MetaLogMakeChunkStable
fid	cc/meta/request.h	/^	fid_t fid;		\/\/!< file for which space has to be allocated$/;"	m	struct:KFS::MetaAllocate
fid	cc/meta/request.h	/^	fid_t fid;		\/\/!< stash the fid for logging$/;"	m	struct:KFS::MetaSetMtime
fid	cc/meta/request.h	/^	fid_t fid;	\/\/!< fid whose replication has to be changed$/;"	m	struct:KFS::MetaChangeFileReplication
fid	cc/meta/request.h	/^	fid_t fid;	\/\/!< file ID of new directory$/;"	m	struct:KFS::MetaMkdir
fid	cc/meta/request.h	/^	fid_t fid;	\/\/!< file ID of new file$/;"	m	struct:KFS::MetaCreate
fid	cc/meta/request.h	/^	fid_t fid;	\/\/!< file for alloc info is needed$/;"	m	struct:KFS::MetaGetalloc
fid	cc/meta/request.h	/^	fid_t fid;	\/\/!< file for layout info is needed$/;"	m	struct:KFS::MetaGetlayout
fid	cc/meta/request.h	/^	fid_t fid;	\/\/!< file for which space has to be allocated$/;"	m	struct:KFS::MetaTruncate
fid	cc/meta/request.h	/^	fid_t fid;  \/\/!< input: we tell the chunkserver what it is$/;"	m	struct:KFS::MetaChunkReplicate
fid	cc/meta/request.h	/^	fid_t fid;  \/\/!< input: we use the tuple <fileid, chunkid> to$/;"	m	struct:KFS::MetaChunkSize
fid	cc/meta/request.h	/^	fid_t fid; \/\/!< input$/;"	m	struct:KFS::MetaChunkCorrupt
fid	cc/meta/request.h	/^	fid_t fid;$/;"	m	struct:KFS::MetaChunkVersChange
fid_parse	python/kfscp/kfscp.py	/^	def fid_parse(self, parts):$/;"	m	class:cp
fid_t	cc/common/kfstypes.h	/^typedef seqid_t fid_t;          \/\/!< file ID$/;"	t	namespace:KFS
file	cc/meta/checkpoint.h	/^	ofstream file;		\/\/!< current CP file$/;"	m	class:KFS::Checkpoint
file	cc/meta/logger.h	/^	ofstream file;		\/\/!< the current log file$/;"	m	class:KFS::Logger
file	cc/meta/replay.h	/^	ifstream file;		\/\/!< the log file being replayed$/;"	m	class:KFS::Replay
file	cc/meta/restore.h	/^	ifstream file;			\/\/!< the CP file$/;"	m	class:KFS::Restorer
fileId	cc/chunk/Chunk.h	/^    kfsFileId_t fileId;$/;"	m	struct:KFS::ChunkInfo_t
fileId	cc/chunk/Chunk.h	/^    kfsFileId_t fileId;$/;"	m	struct:KFS::DiskChunkInfo_t
fileId	cc/chunk/KfsOps.h	/^    kfsFileId_t  fileId;        \/\/ input$/;"	m	struct:KFS::BeginMakeChunkStableOp
fileId	cc/chunk/KfsOps.h	/^    kfsFileId_t  fileId;        \/\/ input$/;"	m	struct:KFS::MakeChunkStableOp
fileId	cc/chunk/KfsOps.h	/^    kfsFileId_t  fileId; \/\/ optional$/;"	m	struct:KFS::SizeOp
fileId	cc/chunk/KfsOps.h	/^    kfsFileId_t fileId; \/\/ input$/;"	m	struct:KFS::AllocChunkOp
fileId	cc/chunk/KfsOps.h	/^    kfsFileId_t fileId; \/\/ input$/;"	m	struct:KFS::ChangeChunkVersOp
fileId	cc/chunk/chunkupgrade_main.cc	/^    kfsFileId_t fileId;$/;"	m	struct:DiskChunkInfoV1_t	file:
fileId	cc/libkfsClient/KfsAttr.h	/^    kfsFileId_t fileId;$/;"	m	struct:KFS::FileAttr
fileId	cc/libkfsClient/KfsAttr.h	/^    kfsFileId_t fileId;$/;"	m	struct:KFS::FileChunkInfo
fileId	cc/libkfsClient/KfsAttr.h	/^    kfsFileId_t fileId;$/;"	m	struct:KFS::KfsFileAttr
fileId	cc/libkfsClient/KfsAttr.h	/^    kfsFileId_t fileId;$/;"	m	struct:KFS::KfsServerAttr
fileId	cc/libkfsClient/KfsOps.h	/^    kfsFileId_t fileId; \/\/ result$/;"	m	struct:KFS::CreateOp
fileId	cc/libkfsClient/KfsOps.h	/^    kfsFileId_t fileId; \/\/ result$/;"	m	struct:KFS::MkdirOp
fileOffset	cc/chunk/KfsOps.h	/^    off_t	 fileOffset;            \/* value set by the head of the daisy chain *\/$/;"	m	struct:KFS::RecordAppendOp
fileOffset	cc/libkfsClient/KfsClientInt.h	/^    off_t	fileOffset; \/\/ offset within the file$/;"	m	struct:KFS::FilePosition
fileOffset	cc/libkfsClient/KfsOps.h	/^    off_t fileOffset;$/;"	m	struct:KFS::AllocateOp
fileOffset	cc/libkfsClient/KfsOps.h	/^    off_t fileOffset;$/;"	m	struct:KFS::ChunkLayoutInfo
fileOffset	cc/libkfsClient/KfsOps.h	/^    off_t fileOffset;$/;"	m	struct:KFS::GetAllocOp
fileOffset	cc/libkfsClient/KfsOps.h	/^    off_t fileOffset;$/;"	m	struct:KFS::TruncateOp
filePosition	cc/libkfsClient/KfsAsyncRW.h	/^        off_t filePosition;$/;"	m	struct:KFS::AsyncWriteReq
fileSize	cc/libkfsClient/KfsAttr.h	/^    off_t	fileSize; $/;"	m	struct:KFS::KfsServerAttr
fileSize	cc/libkfsClient/KfsAttr.h	/^    off_t	fileSize;$/;"	m	struct:KFS::FileAttr
fileSize	cc/libkfsClient/KfsAttr.h	/^    off_t	fileSize;$/;"	m	struct:KFS::KfsFileAttr
file_exists	cc/chunk/Logger.cc	/^file_exists(string name)$/;"	f	file:
file_exists	cc/meta/request.cc	/^file_exists(fid_t fid)$/;"	f	namespace:KFS
file_exists	cc/meta/util.cc	/^KFS::file_exists(string name)$/;"	f	class:KFS
filename	cc/chunk/Chunk.h	/^    char filename[MAX_FILENAME_LEN];$/;"	m	struct:KFS::DiskChunkInfo_t
filename	cc/chunk/chunkupgrade_main.cc	/^    char filename[MAX_FILENAME_LEN];$/;"	m	struct:DiskChunkInfoV1_t	file:
filename	cc/libkfsClient/KfsAttr.h	/^    string filename;$/;"	m	struct:KFS::FileChunkInfo
filename	cc/libkfsClient/KfsAttr.h	/^    string filename;$/;"	m	struct:KFS::KfsFileAttr
filename	cc/libkfsClient/KfsOps.h	/^    const char *filename; \/\/ file in the dir$/;"	m	struct:KFS::LookupOp
filename	cc/libkfsClient/KfsOps.h	/^    const char *filename; \/\/ path relative to root$/;"	m	struct:KFS::LookupPathOp
filename	cc/libkfsClient/KfsOps.h	/^    const char *filename;$/;"	m	struct:KFS::CreateOp
filename	cc/libkfsClient/KfsOps.h	/^    const char *filename;$/;"	m	struct:KFS::RemoveOp
filename	cc/libkfsClient/KfsOps.h	/^    std::string filename; \/\/ input$/;"	m	struct:KFS::GetAllocOp
filename	java/org/kosmix/kosmosfs/access/KfsFileAttr.java	/^    public String filename;$/;"	f	class:KfsFileAttr
files	python/flogger/flogger.py	/^def files(dirlist):$/;"	f
filesize	cc/meta/meta.h	/^	off_t filesize;		$/;"	m	class:KFS::MetaFattr
filesize	cc/meta/request.h	/^	off_t filesize;	\/\/!< size of file that was freed (debugging info)$/;"	m	struct:KFS::MetaRemove
filesize	cc/meta/request.h	/^	off_t filesize; \/\/!< for logging purposes: the size of the file$/;"	m	struct:KFS::MetaChunkSize
filesize	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    long filesize(long ptr, String path);$/;"	m	class:KfsAccess	file:
filesize	java/org/kosmix/kosmosfs/access/KfsFileAttr.java	/^    public long filesize;$/;"	f	class:KfsFileAttr
finalize	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    protected void finalize() throws Throwable$/;"	m	class:KfsAccess
finalize	java/org/kosmix/kosmosfs/access/KfsInputChannel.java	/^    protected void finalize() throws Throwable$/;"	m	class:KfsInputChannel
finalize	java/org/kosmix/kosmosfs/access/KfsOutputChannel.java	/^    protected void finalize() throws Throwable$/;"	m	class:KfsOutputChannel
find	cc/chunk/ChunkManager.h	/^        WriteOp* find(int64_t writeId) const$/;"	f	class:KFS::ChunkManager::PendingWrites
find	cc/meta/LayoutManager.h	/^		const_iterator find(const key_type& key) const {$/;"	f	class:KFS::CSMap
find	cc/meta/LayoutManager.h	/^		iterator find(const key_type& key) {$/;"	f	class:KFS::CSMap
findLeaf	cc/meta/kfstree.cc	/^Tree::findLeaf(const Key &k) const$/;"	f	class:Tree
findplace	cc/meta/kfstree.h	/^	int findplace(const Key &test)$/;"	f	class:KFS::Node
finishLog	cc/meta/logger.cc	/^Logger::finishLog()$/;"	f	class:Logger
first	cc/meta/LayoutManager.h	/^		iterator first() {$/;"	f	class:KFS::CSMap
first	cc/meta/kfstree.h	/^	Node *first;			\/\/!< leftmost level-1 node$/;"	m	class:KFS::Tree
firstLeaf	cc/meta/kfstree.h	/^	Node *firstLeaf() { return first; }	\/\/!< leftmost leaf$/;"	f	class:KFS::Tree
first_diff	python/rw/rw.py	/^def first_diff(s, t):$/;"	f
flagbits	cc/meta/base.h	/^	int flagbits;$/;"	m	class:KFS::MetaNode
flags	cc/meta/base.h	/^	int flags() const { return flagbits; }$/;"	f	class:KFS::MetaNode
flushLog	cc/meta/logger.cc	/^Logger::flushLog()$/;"	f	class:Logger
flushResult	cc/meta/logger.cc	/^Logger::flushResult(MetaRequest *r)$/;"	f	class:Logger
fourK	cc/chunk/chunktrimmer_main.cc	/^static const int fourK = 4096;$/;"	v	file:
front	cc/chunk/ChunkManager.h	/^        WriteOp* front() const$/;"	f	class:KFS::ChunkManager::PendingWrites
fs_state	python/flogger/flogger.py	/^fs_state = {$/;"	v
fsckStatus	cc/meta/request.h	/^	std::string fsckStatus;$/;"	m	struct:KFS::MetaFsck
fte_compare	cc/libkfsClient/KfsClient.cc	/^fte_compare(const FileTableEntry *first, const FileTableEntry *second)$/;"	f	file:
func	cc/meta/queue.h	/^	FunctorBase<T> *func;$/;"	m	class:KFS::FunctorWrapper
func	cc/meta/queue.h	/^	PredBase<T> *func;$/;"	m	class:KFS::PredWrapper
fuse_create	cc/fuse/kfs_fuse_main.cc	/^fuse_create(const char *path, mode_t mode, struct fuse_file_info *finfo)$/;"	f	file:
fuse_destroy	cc/fuse/kfs_fuse_main.cc	/^fuse_destroy(void *cookie)$/;"	f
fuse_flush	cc/fuse/kfs_fuse_main.cc	/^fuse_flush(const char *path, struct fuse_file_info *finfo)$/;"	f	file:
fuse_fsync	cc/fuse/kfs_fuse_main.cc	/^fuse_fsync(const char *path, int flags, struct fuse_file_info *finfo)$/;"	f	file:
fuse_getattr	cc/fuse/kfs_fuse_main.cc	/^fuse_getattr(const char *path, struct stat *s)$/;"	f	file:
fuse_init	cc/fuse/kfs_fuse_main.cc	/^fuse_init()$/;"	f
fuse_mkdir	cc/fuse/kfs_fuse_main.cc	/^fuse_mkdir(const char *path, mode_t mode)$/;"	f	file:
fuse_open	cc/fuse/kfs_fuse_main.cc	/^fuse_open(const char *path, struct fuse_file_info *finfo)$/;"	f	file:
fuse_read	cc/fuse/kfs_fuse_main.cc	/^fuse_read(const char *path, char *buf, size_t nread, off_t off,$/;"	f	file:
fuse_readdir	cc/fuse/kfs_fuse_main.cc	/^fuse_readdir(const char *path, void *buf,$/;"	f	file:
fuse_rename	cc/fuse/kfs_fuse_main.cc	/^fuse_rename(const char *src, const char *dst)$/;"	f	file:
fuse_rmdir	cc/fuse/kfs_fuse_main.cc	/^fuse_rmdir(const char *path)$/;"	f	file:
fuse_truncate	cc/fuse/kfs_fuse_main.cc	/^fuse_truncate(const char *path, off_t size)$/;"	f	file:
fuse_unlink	cc/fuse/kfs_fuse_main.cc	/^fuse_unlink(const char *path)$/;"	f	file:
fuse_write	cc/fuse/kfs_fuse_main.cc	/^fuse_write(const char *path, const char *buf, size_t nwrite, off_t off,$/;"	f	file:
fwdedOp	cc/chunk/KfsOps.h	/^    WriteIdAllocOp *fwdedOp;          \/* if we did any fwd'ing, this is the op that tracks it *\/$/;"	m	struct:KFS::WriteIdAllocOp
fwdedOp	cc/chunk/KfsOps.h	/^    WriteSyncOp *fwdedOp;$/;"	m	struct:KFS::WriteSyncOp
gAppendMode	cc/tools/cptokfs_main.cc	/^static bool gAppendMode = false;$/;"	v	file:
gAtomicRecordAppendManager	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppendManager gAtomicRecordAppendManager;$/;"	m	namespace:KFS	file:
gBufSize	cc/tools/cptokfs_main.cc	/^static int  gBufSize = 64 << 20;$/;"	v	file:
gCPDir	cc/meta/metaserver_main.cc	/^string gLogDir, gCPDir;$/;"	v
gChildProcessTracker	cc/meta/ChildProcessTracker.cc	/^ChildProcessTrackingTimer gChildProcessTracker;$/;"	m	namespace:KFS	file:
gChunkDirs	cc/chunk/ChunkServer_main.cc	/^static vector<string> gChunkDirs;$/;"	v	file:
gChunkManager	cc/chunk/ChunkManager.cc	/^ChunkManager gChunkManager;$/;"	m	namespace:KFS	file:
gChunkServer	cc/chunk/ChunkServer.cc	/^ChunkServer KFS::gChunkServer;$/;"	m	class:KFS	file:
gChunkServerCleanupOnStart	cc/chunk/ChunkServer_main.cc	/^static int gChunkServerCleanupOnStart;$/;"	v	file:
gChunkServerClientPort	cc/chunk/ChunkServer_main.cc	/^static int gChunkServerClientPort;	\/\/ Port at which kfs clients connect to us$/;"	v	file:
gChunkServerHostname	cc/chunk/ChunkServer_main.cc	/^static string gChunkServerHostname;	\/\/ Our hostname to use (instead of using gethostname() )$/;"	v	file:
gChunkServerPort	cc/meta/metaserver_main.cc	/^int gChunkServerPort;$/;"	v
gChunkServerRackId	cc/chunk/ChunkServer_main.cc	/^static int gChunkServerRackId;$/;"	v	file:
gChunkmapDumpDir	cc/meta/request.cc	/^static string gChunkmapDumpDir = ".";$/;"	m	namespace:KFS	file:
gClientPort	cc/meta/metaserver_main.cc	/^int gClientPort;$/;"	v
gClusterKey	cc/chunk/ChunkServer_main.cc	/^static const char *gClusterKey;$/;"	v	file:
gClusterKey	cc/meta/request.cc	/^string gClusterKey;$/;"	m	namespace:KFS	file:
gCounterManager	cc/libkfsIO/Counter.cc	/^CounterManager gCounterManager;$/;"	v
gCounters	cc/chunk/KfsOps.cc	/^} gCounters;$/;"	v	typeref:struct:OpCounterMap	file:
gCounters	cc/meta/request.cc	/^OpCounterMap gCounters;$/;"	m	namespace:KFS	file:
gCurrFa	cc/meta/restore.cc	/^MetaFattr *gCurrFa = NULL;$/;"	v
gDefaultTimeout	cc/libkfsClient/KfsClient.cc	/^struct timeval gDefaultTimeout = {$/;"	v	typeref:struct:timeval
gDeleteFlag	cc/tools/cptokfs_main.cc	/^static bool gDeleteFlag = false;$/;"	v	file:
gDryRunFlag	cc/tools/cptokfs_main.cc	/^static bool gDryRunFlag = false;$/;"	v	file:
gIgnoreSrcErrorsFlag	cc/tools/cptokfs_main.cc	/^static bool gIgnoreSrcErrorsFlag = false;$/;"	v	file:
gIsPathToFidCacheEnabled	cc/meta/metaserver_main.cc	/^bool gIsPathToFidCacheEnabled = false;$/;"	v
gKfsClient	cc/tests/KfsPerfWriter_main.cc	/^KfsClientPtr gKfsClient;$/;"	v
gKfsClient	cc/tests/KfsRecordAppend_main.cc	/^KfsClientPtr gKfsClient;$/;"	v
gLogDir	cc/chunk/ChunkServer_main.cc	/^static string gLogDir;$/;"	v	file:
gLogDir	cc/meta/metaserver_main.cc	/^string gLogDir, gCPDir;$/;"	v
gMD5Sum	cc/chunk/ChunkServer_main.cc	/^static string gMD5Sum;$/;"	v	file:
gMD5SumFn	cc/meta/request.cc	/^string gMD5SumFn;$/;"	m	namespace:KFS	file:
gMaxReplicasPerFile	cc/meta/request.cc	/^static int16_t gMaxReplicasPerFile = MAX_REPLICAS_PER_FILE;$/;"	m	namespace:KFS	file:
gMetaServerLoc	cc/chunk/ChunkServer_main.cc	/^static ServerLocation gMetaServerLoc;$/;"	v	file:
gMinChunkservers	cc/meta/metaserver_main.cc	/^uint32_t gMinChunkservers;$/;"	v
gMinReplicasPerFile	cc/meta/metaserver_main.cc	/^int16_t gMinReplicasPerFile;$/;"	v
gNumChunks	cc/meta/request.cc	/^Counter *gNumFiles, *gNumDirs, *gNumChunks;$/;"	m	namespace:KFS	file:
gNumDirs	cc/meta/request.cc	/^Counter *gNumFiles, *gNumDirs, *gNumChunks;$/;"	m	namespace:KFS	file:
gNumFiles	cc/meta/request.cc	/^Counter *gNumFiles, *gNumDirs, *gNumChunks;$/;"	m	namespace:KFS	file:
gNumReplicas	cc/tools/cptokfs_main.cc	/^static int  gNumReplicas = 3;$/;"	v	file:
gParseHandlers	cc/chunk/KfsOps.cc	/^ParseHandlerMap	gParseHandlers;$/;"	v
gParseHandlers	cc/meta/request.cc	/^ParseHandlerMap gParseHandlers;$/;"	m	namespace:KFS	file:
gPathToFidCacheHit	cc/meta/request.cc	/^Counter *gPathToFidCacheHit, *gPathToFidCacheMiss;$/;"	m	namespace:KFS	file:
gPathToFidCacheMiss	cc/meta/request.cc	/^Counter *gPathToFidCacheHit, *gPathToFidCacheMiss;$/;"	m	namespace:KFS	file:
gProp	cc/chunk/ChunkServer_main.cc	/^static Properties gProp;$/;"	v	file:
gProp	cc/meta/metaserver_main.cc	/^Properties gProp;$/;"	v
gTestNumReWrites	cc/tools/cptokfs_main.cc	/^static int  gTestNumReWrites = -1;$/;"	v	file:
gTotalSpace	cc/chunk/ChunkServer_main.cc	/^static int64_t gTotalSpace;			\/\/ max. storage space to use$/;"	v	file:
gTruncateFlag	cc/tools/cptokfs_main.cc	/^static bool gTruncateFlag = false;$/;"	v	file:
gWormMode	cc/meta/request.cc	/^bool gWormMode = false;$/;"	m	namespace:KFS	file:
gatherState	cc/telemetry/telemetry_server_main.cc	/^KFS::gatherState(int sock)$/;"	f	class:KFS
generateData	cc/tests/KfsDataGen_main.cc	/^generateData(char *fname, int numBytes)$/;"	f
generateData	cc/tests/KfsReader_main.cc	/^generateData(char *testDataFile, char *buf, int numBytes)$/;"	f
generateData	cc/tests/KfsSeekWrite_main.cc	/^generateData(char *testDataFile, char *buf, int numBytes)$/;"	f
generateData	cc/tests/KfsTrunc_main.cc	/^generateData(char *testDataFile, char *buf, int numBytes)$/;"	f
generateData	cc/tests/KfsWriter_main.cc	/^generateData(char *testDataFile, char *buf, int numBytes)$/;"	f
generateData	java/org/kosmix/kosmosfs/access/KfsTest.java	/^    private static void generateData(char buf[], int numBytes)$/;"	m	class:KfsTest	file:
genfile	cc/meta/logger.h	/^	string genfile(int n)	\/\/!< generate a log file name$/;"	f	class:KFS::Logger
genid	cc/meta/meta.h	/^	fid_t genid() { return ++seed; }$/;"	f	class:KFS::UniqueID
get16bits	cc/common/hsieh_hash.cc	31;"	d	file:
get16bits	cc/common/hsieh_hash.cc	34;"	d	file:
get16bits	cc/common/hsieh_hash.cc	38;"	d	file:
getChunkVersion	cc/meta/kfsops.cc	/^Tree::getChunkVersion(fid_t file, chunkId_t chunkId, seq_t *chunkVersion)$/;"	f	class:Tree
getDataLocation	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    String[][] getDataLocation(long ptr, String path, long start, long len);$/;"	m	class:KfsAccess	file:
getDefaultIoBufferSize	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    long getDefaultIoBufferSize();$/;"	m	class:KfsAccess
getDefaultReadAheadSize	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    long getDefaultReadAheadSize();$/;"	m	class:KfsAccess
getDentry	cc/meta/kfsops.cc	/^Tree::getDentry(fid_t dir, const string &fname)$/;"	f	class:Tree
getDentry	cc/meta/kfsops.cc	/^Tree::getDentry(fid_t fid)$/;"	f	class:Tree
getDir	cc/meta/meta.h	/^	fid_t getDir() const { return dir; }$/;"	f	class:KFS::MetaDentry
getDrives	cc/rebalancer/rebalancer.h	/^        std::vector<DriveInfo> &getDrives() {$/;"	f	class:KFS::ChunkServer
getEnvServer	cc/tools/KfsToolsCommon.cc	/^KFS::tools::getEnvServer(string & serverHost, int & serverPort)$/;"	f	class:KFS::tools
getFattr	cc/meta/kfsops.cc	/^Tree::getFattr(fid_t fid)$/;"	f	class:Tree
getFileIds	cc/meta/kfsfsck_main.cc	/^getFileIds(set<fid_t> &fileids, Properties &prop, string key, string value)$/;"	f
getFsckInfo	cc/meta/kfsfsck_main.cc	/^void getFsckInfo(string metahost, int metaport, $/;"	f
getHostPort	cc/tests/KfsRW_main.cc	/^void getHostPort(const string &hp, string &host, int &port)$/;"	f
getInstance	cc/meta/handler.cc	/^ZincHandler::getInstance()	{$/;"	f	class:ZincHandler
getInt	cc/tools/KfsToolsCommon.cc	/^KFS::tools::getInt(const string & fromString, int &toInt)$/;"	f	class:KFS::tools
getIoBufferSize	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    long getIoBufferSize(int fd);$/;"	m	class:KfsAccess	file:
getKfsClientFactory	cc/libkfsClient/KfsClient.cc	/^KFS::getKfsClientFactory()$/;"	f	class:KFS
getList	cc/common/properties.cc	/^void Properties::getList(std::string &outBuf, std::string linePrefix, std::string lineSuffix) const$/;"	f	class:Properties
getLocation	cc/rebalancer/rebalancer.h	/^        ServerLocation &getLocation() {$/;"	f	class:KFS::ChunkServer
getMaxDaysToKeep	cc/common/DailyRollingFileAppender.cc	/^unsigned int DailyRollingFileAppender::getMaxDaysToKeep() const$/;"	f	class:log4cpp::DailyRollingFileAppender
getModificationTime	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    long getModificationTime(long ptr, String path);$/;"	m	class:KfsAccess	file:
getName	cc/meta/meta.h	/^	const string getName() const { return name; }$/;"	f	class:KFS::MetaDentry
getNetManager	cc/libkfsIO/Globals.cc	/^Globals_t::getNetManager()$/;"	f	class:KFS::libkfsio::Globals_t
getNotification	cc/libkfsIO/TelemetryClient.cc	/^TelemetryClient::getNotification(vector<struct in_addr> &slowNodes)$/;"	f	class:TelemetryClient
getPathname	cc/meta/kfsops.cc	/^Tree::getPathname(fid_t fid)$/;"	f	class:Tree
getReadAheadSize	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    long getReadAheadSize(int fd);$/;"	m	class:KfsAccess	file:
getRemotePath	cc/tools/KfsToolsCommon.cc	/^KFS::tools::getRemotePath(const std::string & host, const int & port, const std::string & path)$/;"	f	class:KFS::tools
getReplication	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    short getReplication(long ptr, String path);$/;"	m	class:KfsAccess	file:
getResponse	cc/meta/kfsfsck_main.cc	/^getResponse(char *buf, int bufSize,$/;"	f	file:
getServers	cc/meta/LayoutManager.h	/^		const std::vector<ChunkServerPtr> &getServers() {$/;"	f	class:KFS::RackInfo
getTimeString	cc/tools/KfsLs.cc	/^getTimeString(time_t time, char *buf, int bufLen)$/;"	f
getTimeString	cc/tools/KfsToolsCommon.cc	/^getTimeString(time_t time, char *buf, int bufLen)$/;"	f	file:
getTotalSpace	cc/rebalancer/rebalancer.h	/^        off_t getTotalSpace() const {$/;"	f	class:KFS::ChunkServer
getUsedSpace	cc/rebalancer/rebalancer.h	/^        off_t getUsedSpace() const {$/;"	f	class:KFS::ChunkServer
getUtilization	cc/rebalancer/rebalancer.h	/^        double getUtilization() const {$/;"	f	class:KFS::ChunkServer
getValue	cc/common/properties.cc	/^const char* Properties::getValue(std::string key, const char* def) const$/;"	f	class:Properties
getValue	cc/common/properties.cc	/^double Properties::getValue(std::string key, double def) const$/;"	f	class:Properties
getValue	cc/common/properties.cc	/^int Properties::getValue(std::string key, int def) const$/;"	f	class:Properties
getValue	cc/common/properties.cc	/^long Properties::getValue(std::string key, long def) const$/;"	f	class:Properties
getValue	cc/common/properties.cc	/^long long Properties::getValue(std::string key, long long def) const$/;"	f	class:Properties
getValue	cc/common/properties.cc	/^std::string Properties::getValue(std::string key, std::string def) const$/;"	f	class:Properties
getValue	cc/common/properties.cc	/^unsigned int Properties::getValue(std::string key, unsigned int def) const$/;"	f	class:Properties
getValue	cc/common/properties.cc	/^unsigned long Properties::getValue(std::string key, unsigned long def) const$/;"	f	class:Properties
getValue	cc/common/properties.cc	/^unsigned long long Properties::getValue(std::string key, unsigned long long def) const$/;"	f	class:Properties
get_lib_handle	cc/meta/handler.h	/^       char* get_lib_handle(const std::string app)  {$/;"	f	class:ZincHandler
get_optional_param_int	python/flogger/flogger.py	/^def get_optional_param_int(name):$/;"	f
get_optional_param_int	python/rw/rw.py	/^def get_optional_param_int(name):$/;"	f
get_param_int	python/flogger/flogger.py	/^def get_param_int(name):$/;"	f
get_param_int	python/rw/rw.py	/^def get_param_int(name):$/;"	f
get_param_string	python/flogger/flogger.py	/^def get_param_string(name):$/;"	f
get_param_string	python/rw/rw.py	/^def get_param_string(name):$/;"	f
get_param_string	python/unittests/dirops.py	/^def get_param_string(name):$/;"	f
get_param_string	python/unittests/worm.py	/^def get_param_string(name):$/;"	f
get_param_string	python/unittests/write-flush.py	/^def get_param_string(name):$/;"	f
get_param_string	python/unittests/write.py	/^def get_param_string(name):$/;"	f
get_state	python/flogger/flogger.py	/^def get_state(name):$/;"	f
getalloc	cc/meta/kfsops.cc	/^Tree::getalloc(fid_t file, chunkOff_t offset, MetaChunkInfo **c)$/;"	f	class:Tree
getalloc	cc/meta/kfsops.cc	/^Tree::getalloc(fid_t file, vector <MetaChunkInfo *> &v)$/;"	f	class:Tree
getkey	cc/meta/kfstree.h	/^	const Key &getkey(int n) const { return childKey[n]; } \/\/!< accessor$/;"	f	class:KFS::Node
getroot	cc/meta/kfstree.h	/^	Node *getroot() { return root; }	\/\/!< return root node$/;"	f	class:KFS::Tree
getseed	cc/meta/meta.h	/^	fid_t getseed() { return seed; }$/;"	f	class:KFS::UniqueID
globalNetManager	cc/libkfsIO/Globals.h	/^        inline static NetManager& globalNetManager()$/;"	f	namespace:KFS::libkfsio
globals	cc/libkfsIO/Globals.h	/^        inline static Globals_t & globals()$/;"	f	namespace:KFS::libkfsio
handle	cc/meta/request.cc	/^MetaAllocate::handle()$/;"	f	class:KFS::MetaAllocate
handle	cc/meta/request.cc	/^MetaBeginMakeChunkStable::handle()$/;"	f	class:KFS::MetaBeginMakeChunkStable
handle	cc/meta/request.cc	/^MetaBye::handle()$/;"	f	class:KFS::MetaBye
handle	cc/meta/request.cc	/^MetaChangeChunkVersionInc::handle()$/;"	f	class:KFS::MetaChangeChunkVersionInc
handle	cc/meta/request.cc	/^MetaChangeFileReplication::handle()$/;"	f	class:KFS::MetaChangeFileReplication
handle	cc/meta/request.cc	/^MetaCheckLeases::handle()$/;"	f	class:KFS::MetaCheckLeases
handle	cc/meta/request.cc	/^MetaChunkCorrupt::handle()$/;"	f	class:KFS::MetaChunkCorrupt
handle	cc/meta/request.cc	/^MetaChunkMakeStable::handle()$/;"	f	class:KFS::MetaChunkMakeStable
handle	cc/meta/request.cc	/^MetaChunkReplicate::handle()$/;"	f	class:KFS::MetaChunkReplicate
handle	cc/meta/request.cc	/^MetaChunkReplicationCheck::handle()$/;"	f	class:KFS::MetaChunkReplicationCheck
handle	cc/meta/request.cc	/^MetaChunkSize::handle()$/;"	f	class:KFS::MetaChunkSize
handle	cc/meta/request.cc	/^MetaCoalesceBlocks::handle()$/;"	f	class:KFS::MetaCoalesceBlocks
handle	cc/meta/request.cc	/^MetaCreate::handle()$/;"	f	class:KFS::MetaCreate
handle	cc/meta/request.cc	/^MetaDumpChunkReplicationCandidates::handle()$/;"	f	class:KFS::MetaDumpChunkReplicationCandidates
handle	cc/meta/request.cc	/^MetaDumpChunkToServerMap::handle()$/;"	f	class:KFS::MetaDumpChunkToServerMap
handle	cc/meta/request.cc	/^MetaExecuteRebalancePlan::handle()$/;"	f	class:KFS::MetaExecuteRebalancePlan
handle	cc/meta/request.cc	/^MetaFsck::handle()$/;"	f	class:KFS::MetaFsck
handle	cc/meta/request.cc	/^MetaGetChunkServersCounters::handle()$/;"	f	class:KFS::MetaGetChunkServersCounters
handle	cc/meta/request.cc	/^MetaGetalloc::handle()$/;"	f	class:KFS::MetaGetalloc
handle	cc/meta/request.cc	/^MetaGetlayout::handle()$/;"	f	class:KFS::MetaGetlayout
handle	cc/meta/request.cc	/^MetaHello::handle()$/;"	f	class:KFS::MetaHello
handle	cc/meta/request.cc	/^MetaLeaseAcquire::handle()$/;"	f	class:KFS::MetaLeaseAcquire
handle	cc/meta/request.cc	/^MetaLeaseCleanup::handle()$/;"	f	class:KFS::MetaLeaseCleanup
handle	cc/meta/request.cc	/^MetaLeaseRelinquish::handle()$/;"	f	class:KFS::MetaLeaseRelinquish
handle	cc/meta/request.cc	/^MetaLeaseRenew::handle()$/;"	f	class:KFS::MetaLeaseRenew
handle	cc/meta/request.cc	/^MetaLookup::handle()$/;"	f	class:KFS::MetaLookup
handle	cc/meta/request.cc	/^MetaLookupPath::handle()$/;"	f	class:KFS::MetaLookupPath
handle	cc/meta/request.cc	/^MetaMkdir::handle()$/;"	f	class:KFS::MetaMkdir
handle	cc/meta/request.cc	/^MetaOpenFiles::handle()$/;"	f	class:KFS::MetaOpenFiles
handle	cc/meta/request.cc	/^MetaPing::handle()$/;"	f	class:KFS::MetaPing
handle	cc/meta/request.cc	/^MetaReadConfig::handle()$/;"	f	class:KFS::MetaReadConfig
handle	cc/meta/request.cc	/^MetaReaddir::handle()$/;"	f	class:KFS::MetaReaddir
handle	cc/meta/request.cc	/^MetaReaddirPlus::handle()$/;"	f	class:KFS::MetaReaddirPlus
handle	cc/meta/request.cc	/^MetaRecomputeDirsize::handle()$/;"	f	class:KFS::MetaRecomputeDirsize
handle	cc/meta/request.cc	/^MetaRemove::handle()$/;"	f	class:KFS::MetaRemove
handle	cc/meta/request.cc	/^MetaRename::handle()$/;"	f	class:KFS::MetaRename
handle	cc/meta/request.cc	/^MetaRequest::handle()$/;"	f	class:KFS::MetaRequest
handle	cc/meta/request.cc	/^MetaRetireChunkserver::handle()$/;"	f	class:KFS::MetaRetireChunkserver
handle	cc/meta/request.cc	/^MetaRmdir::handle()$/;"	f	class:KFS::MetaRmdir
handle	cc/meta/request.cc	/^MetaSetChunkServersProperties::handle()$/;"	f	class:KFS::MetaSetChunkServersProperties
handle	cc/meta/request.cc	/^MetaSetMtime::handle()$/;"	f	class:KFS::MetaSetMtime
handle	cc/meta/request.cc	/^MetaStats::handle()$/;"	f	class:KFS::MetaStats
handle	cc/meta/request.cc	/^MetaToggleRebalancing::handle()$/;"	f	class:KFS::MetaToggleRebalancing
handle	cc/meta/request.cc	/^MetaToggleWORM::handle()$/;"	f	class:KFS::MetaToggleWORM
handle	cc/meta/request.cc	/^MetaTruncate::handle()$/;"	f	class:KFS::MetaTruncate
handle	cc/meta/request.cc	/^MetaUpServers::handle()$/;"	f	class:KFS::MetaUpServers
handle	cc/meta/request.h	/^	virtual void handle() { status = 0; }$/;"	f	struct:KFS::MetaLogMakeChunkStable
handleAppend	cc/tools/KfsAppend.cc	/^KFS::tools::handleAppend(const vector<string> &args)$/;"	f	class:KFS::tools
handleCd	cc/tools/KfsCd.cc	/^KFS::tools::handleCd(const vector<string> &args)$/;"	f	class:KFS::tools
handleChangeReplication	cc/tools/KfsChangeReplication.cc	/^KFS::tools::handleChangeReplication(const vector<string> &args)$/;"	f	class:KFS::tools
handleCopy	cc/tools/KfsCp.cc	/^KFS::tools::handleCopy(const vector<string> &args)$/;"	f	class:KFS::tools
handleFstat	cc/tools/KfsFstat.cc	/^KFS::tools::handleFstat(const vector<string> &args)$/;"	f	class:KFS::tools
handleHelp	cc/tools/kfsshell_main.cc	/^int handleHelp(const vector<string> &args)$/;"	f
handleLs	cc/tools/KfsLs.cc	/^KFS::tools::handleLs(const vector<string> &args)$/;"	f	class:KFS::tools
handleMkdirs	cc/tools/KfsMkdirs.cc	/^KFS::tools::handleMkdirs(const vector<string> &args)$/;"	f	class:KFS::tools
handleMv	cc/tools/KfsMv.cc	/^KFS::tools::handleMv(const vector<string> &args)$/;"	f	class:KFS::tools
handlePwd	cc/tools/KfsPwd.cc	/^KFS::tools::handlePwd(const vector<string> &args)$/;"	f	class:KFS::tools
handleReply	cc/meta/request.h	/^	virtual void handleReply(const Properties& prop)$/;"	f	struct:KFS::MetaBeginMakeChunkStable
handleReply	cc/meta/request.h	/^	virtual void handleReply(const Properties& prop)$/;"	f	struct:KFS::MetaChunkReplicate
handleReply	cc/meta/request.h	/^	virtual void handleReply(const Properties& prop)$/;"	f	struct:KFS::MetaChunkSize
handleReply	cc/meta/request.h	/^        virtual void handleReply(const Properties& prop) {}$/;"	f	struct:KFS::MetaChunkRequest
handleRm	cc/tools/KfsRm.cc	/^KFS::tools::handleRm(const vector<string> &args)$/;"	f	class:KFS::tools
handleRmdir	cc/tools/KfsRmdir.cc	/^KFS::tools::handleRmdir(const vector<string> &args)$/;"	f	class:KFS::tools
handler	cc/meta/handler.cc	/^ZincHandler* ZincHandler::handler = NULL;$/;"	m	class:ZincHandler	file:
handler	cc/meta/handler.h	/^       static ZincHandler            *handler;$/;"	m	class:ZincHandler
handlerMap	cc/meta/handler.h	/^       std::map<std::string, char*>   handlerMap;$/;"	m	class:ZincHandler
handlers	cc/tools/kfsshell_main.cc	/^CmdHandlers handlers;$/;"	v
hasChecksum	cc/chunk/KfsOps.h	/^    bool         hasChecksum;$/;"	m	struct:KFS::MakeChunkStableOp
hasChecksum	cc/chunk/KfsOps.h	/^    bool        hasChecksum;$/;"	m	struct:KFS::LeaseRelinquishOp
hasChunkChecksum	cc/meta/LayoutManager.cc	/^        const bool      hasChunkChecksum;$/;"	m	class:MakeChunkStable	file:
hasChunkChecksum	cc/meta/request.h	/^	const bool      hasChunkChecksum; \/\/ input$/;"	m	struct:KFS::MetaLogMakeChunkStable
hasChunkChecksum	cc/meta/request.h	/^        const bool           hasChunkChecksum:1;$/;"	m	struct:KFS::MetaChunkMakeStable
hasChunkChecksum	cc/meta/request.h	/^        const bool hasChunkChecksum;$/;"	m	struct:KFS::MetaLeaseRelinquish
hasWriteId	cc/chunk/KfsOps.h	/^    bool         hasWriteId;      \/\/ input$/;"	m	struct:KFS::CloseOp
hash	cc/common/cxxutil.h	/^    template <> struct hash<long long> {$/;"	s	namespace:std::tr1
hash_value	cc/chunk/ClientSM.h	/^    static inline std::size_t hash_value(ChunkSpaceReservationKey_t const &csr) {$/;"	f	namespace:KFS
hasleaves	cc/meta/kfstree.h	/^	bool hasleaves() const { return testflag(META_LEVEL1); }$/;"	f	class:KFS::Node
height	cc/meta/kfstree.h	/^	int height() { return hgt; }		\/\/!< return tree height$/;"	f	class:KFS::Tree
hgt	cc/meta/kfstree.h	/^	int hgt;			\/\/!< height of tree$/;"	m	class:KFS::Tree
host	cc/meta/LayoutManager.cc	/^	string host;$/;"	m	class:MatchServerByHost	file:
hostaddr	cc/libkfsClient/KfsClient.cc	/^    in_addr_t hostaddr;$/;"	m	class:ChunkserverMatcherByIp	file:
hostname	cc/common/kfsdecls.h	/^    std::string hostname; \/\/!< Location of the server: machine name\/IP addr$/;"	m	struct:KFS::ServerLocation
hostnamelen	cc/meta/LayoutManager.h	/^		static const int hostnamelen = 256;$/;"	m	struct:KFS::RebalancePlanInfo_t
hostnamelen	cc/rebalancer/rebalancer.h	/^        static const int hostnamelen = 256;$/;"	m	struct:KFS::RebalancePlanInfo_t
id	cc/meta/LayoutManager.h	/^		inline uint32_t id() const {$/;"	f	class:KFS::RackInfo
id	cc/meta/LayoutManager.h	/^		uint32_t id;$/;"	m	class:KFS::RackMatcher
id	cc/meta/meta.h	/^	fid_t id() const { return fid; }	\/\/!< return the owner id$/;"	f	class:KFS::Meta
id	cc/meta/meta.h	/^	seqid_t id() const { return n; }	\/\/!< return id$/;"	f	class:KFS::UniqueID
inQ	cc/libkfsClient/KfsAsyncRW.h	/^        bool        inQ;$/;"	m	struct:KFS::AsyncReq
include_dirs	cc/access/kfs_setup.py	/^		include_dirs = ['\/home\/srao\/p4trees\/kfssort\/kosmosfs\/src\/cc\/', '\/usr\/local\/include\/boost-1_37\/'],$/;"	v
incp	cc/meta/logger.h	/^	seq_t incp;		\/\/!< highest request in a checkpoint$/;"	m	class:KFS::Logger
index	cc/meta/kfstree.h	/^	int index() const { return pos; }$/;"	f	class:KFS::LeafIter
initF	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    long initF(String configFn);$/;"	m	class:KfsAccess	file:
initS	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    long initS(String metaServerHost, int metaServerPort);$/;"	m	class:KfsAccess	file:
init_map	cc/meta/replay.cc	/^init_map(DiskEntry &e)$/;"	f	file:
init_map	cc/meta/restore.cc	/^init_map(DiskEntry &e)$/;"	f	file:
initial_CP	cc/meta/checkpoint.cc	/^Checkpoint::initial_CP()$/;"	f	class:Checkpoint
initialize_request_handlers	cc/meta/request.cc	/^initialize_request_handlers()$/;"	f	namespace:KFS
initkfs	cc/access/KfsModulePy.cc	/^initkfs()$/;"	f
insert	cc/meta/LayoutManager.h	/^		std::pair<iterator, bool> insert(const value_type& val) {$/;"	f	class:KFS::CSMap
insert	cc/meta/kfstree.cc	/^Tree::insert(Meta *item)$/;"	f	class:Tree
insertChildren	cc/meta/kfstree.cc	/^Node::insertChildren(Node *dest, int start, int n)$/;"	f	class:Node
insertData	cc/meta/kfstree.cc	/^Node::insertData(Key *k, Meta *item, int pos)$/;"	f	class:Node
instance	cc/libkfsClient/KfsClientInt.h	/^    unsigned int instance;$/;"	m	struct:KFS::FileTableEntry
invalidate	cc/libkfsClient/KfsClientInt.h	/^    void invalidate() { $/;"	f	struct:KFS::ChunkBuffer
invent_name	python/flogger/flogger.py	/^def invent_name(dirlist):$/;"	f
isCPNeeded	cc/meta/checkpoint.h	/^	bool isCPNeeded() { return mutations != 0; }$/;"	f	class:KFS::Checkpoint
isChunkLost	cc/chunk/KfsOps.h	/^    uint8_t isChunkLost; $/;"	m	struct:KFS::CorruptChunkOp
isChunkLost	cc/meta/request.h	/^	int isChunkLost; \/\/! < input$/;"	m	struct:KFS::MetaChunkCorrupt
isDirectory	cc/libkfsClient/KfsAttr.h	/^    bool	isDirectory;$/;"	m	struct:KFS::FileAttr
isDirectory	cc/libkfsClient/KfsAttr.h	/^    bool	isDirectory;$/;"	m	struct:KFS::KfsFileAttr
isDirectory	cc/libkfsClient/KfsAttr.h	/^    bool	isDirectory;$/;"	m	struct:KFS::KfsServerAttr
isDirectory	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    int isDirectory(long ptr, String path);$/;"	m	class:KfsAccess	file:
isDirectory	java/org/kosmix/kosmosfs/access/KfsFileAttr.java	/^    public boolean isDirectory;$/;"	f	class:KfsFileAttr
isEqual	cc/meta/thread.h	/^	bool isEqual(pthread_t other)$/;"	f	class:KFS::MetaThread
isFile	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    int isFile(long ptr, String path);$/;"	m	class:KfsAccess	file:
isForRecordAppend	cc/chunk/KfsOps.h	/^    bool	   isForRecordAppend; \/* set if the write-id-alloc is for a record append that will follow *\/$/;"	m	struct:KFS::WriteIdAllocOp
isForRecordAppend	cc/libkfsClient/KfsOps.h	/^    bool	 isForRecordAppend; \/* set if this is for a record append that is coming *\/$/;"	m	struct:KFS::WriteIdAllocOp
isFromReReplication	cc/chunk/KfsOps.h	/^    bool isFromReReplication;$/;"	m	struct:KFS::WriteOp
isFromRecordAppend	cc/chunk/KfsOps.h	/^    bool isFromRecordAppend;$/;"	m	struct:KFS::WriteOp
isHostingChunk	cc/rebalancer/rebalancer.h	/^        bool isHostingChunk(kfsChunkId_t cid) {$/;"	f	class:KFS::ChunkServer
isLocalHost	python/unittests/write.py	/^def isLocalHost(hostname):$/;"	f
isOpen	java/org/kosmix/kosmosfs/access/KfsInputChannel.java	/^    public boolean isOpen()$/;"	m	class:KfsInputChannel
isOpen	java/org/kosmix/kosmosfs/access/KfsOutputChannel.java	/^    public boolean isOpen()$/;"	m	class:KfsOutputChannel
isValidMD5Sum	cc/meta/request.cc	/^isValidMD5Sum(const string &md5sum)$/;"	f	namespace:KFS
isWormMutationAllowed	cc/meta/request.cc	/^isWormMutationAllowed(const string &pathname)$/;"	f	namespace:KFS
isWriteIdHolder	cc/chunk/KfsOps.h	/^    bool isWriteIdHolder;$/;"	m	struct:KFS::WriteOp
is_descendant	cc/meta/kfsops.cc	/^Tree::is_descendant(fid_t src, fid_t dst)$/;"	f	class:Tree
is_dir	cc/meta/request.cc	/^is_dir(fid_t fid)$/;"	f	namespace:KFS
iscommitted	cc/meta/logger.h	/^	bool iscommitted(MetaRequest *r)$/;"	f	class:KFS::Logger
isdepleted	cc/meta/kfstree.h	/^	bool isdepleted() const { return (count < NFEWEST); } \/\/!< underfull$/;"	f	class:KFS::Node
isempty	python/flogger/flogger.py	/^def isempty(client, path):$/;"	f
isfull	cc/meta/kfstree.h	/^	bool isfull() const { return (count == NKEY); } \/\/!< full$/;"	f	class:KFS::Node
isroot	cc/meta/kfstree.h	/^	bool isroot() const { return testflag(META_ROOT); }$/;"	f	class:KFS::Node
iterator	cc/common/properties.h	/^    typedef PropMap::const_iterator iterator;$/;"	t	class:KFS::Properties
iterator	cc/libkfsIO/IOBuffer.h	/^    typedef BList::const_iterator iterator;$/;"	t	class:KFS::IOBuffer
iterator	cc/meta/LayoutManager.h	/^		typedef Map::iterator       iterator;$/;"	t	class:KFS::ARAChunkCache
iterator	cc/meta/LayoutManager.h	/^		typedef Map::iterator       iterator;$/;"	t	class:KFS::CSMap
join	cc/meta/thread.h	/^	void join()$/;"	f	class:KFS::MetaThread
kActionAbort	cc/libkfsIO/NetErrorSimulator.cc	/^            kActionAbort           = 1 << 10,$/;"	e	enum:KFS::NetErrorSimulator::SimSpec::__anon21	file:
kActionClose	cc/libkfsIO/NetErrorSimulator.cc	/^            kActionClose           = 1 << 4,$/;"	e	enum:KFS::NetErrorSimulator::SimSpec::__anon21	file:
kActionDisableRead	cc/libkfsIO/NetErrorSimulator.cc	/^            kActionDisableRead     = 1,$/;"	e	enum:KFS::NetErrorSimulator::SimSpec::__anon21	file:
kActionDiscardRead	cc/libkfsIO/NetErrorSimulator.cc	/^            kActionDiscardRead     = 1 << 1,$/;"	e	enum:KFS::NetErrorSimulator::SimSpec::__anon21	file:
kActionDiscardWrite	cc/libkfsIO/NetErrorSimulator.cc	/^            kActionDiscardWrite    = 1 << 2,$/;"	e	enum:KFS::NetErrorSimulator::SimSpec::__anon21	file:
kActionExit	cc/libkfsIO/NetErrorSimulator.cc	/^            kActionExit            = 1 << 9,$/;"	e	enum:KFS::NetErrorSimulator::SimSpec::__anon21	file:
kActionLog	cc/libkfsIO/NetErrorSimulator.cc	/^            kActionLog             = 1 << 6,$/;"	e	enum:KFS::NetErrorSimulator::SimSpec::__anon21	file:
kActionNone	cc/libkfsIO/NetErrorSimulator.cc	/^            kActionNone            = 0,$/;"	e	enum:KFS::NetErrorSimulator::SimSpec::__anon21	file:
kActionRandomInterval	cc/libkfsIO/NetErrorSimulator.cc	/^            kActionRandomInterval  = 1 << 5,$/;"	e	enum:KFS::NetErrorSimulator::SimSpec::__anon21	file:
kActionRandomSleep	cc/libkfsIO/NetErrorSimulator.cc	/^            kActionRandomSleep     = 1 << 8,$/;"	e	enum:KFS::NetErrorSimulator::SimSpec::__anon21	file:
kActionSetError	cc/libkfsIO/NetErrorSimulator.cc	/^            kActionSetError        = 1 << 3,$/;"	e	enum:KFS::NetErrorSimulator::SimSpec::__anon21	file:
kActionSetErrorOnRead	cc/libkfsIO/NetErrorSimulator.cc	/^            kActionSetErrorOnRead  = 1 << 11,$/;"	e	enum:KFS::NetErrorSimulator::SimSpec::__anon21	file:
kActionSetErrorOnWrite	cc/libkfsIO/NetErrorSimulator.cc	/^            kActionSetErrorOnWrite = 1 << 12$/;"	e	enum:KFS::NetErrorSimulator::SimSpec::__anon21	file:
kActionSleep	cc/libkfsIO/NetErrorSimulator.cc	/^            kActionSleep           = 1 << 7,$/;"	e	enum:KFS::NetErrorSimulator::SimSpec::__anon21	file:
kAgainRetryMinTime	cc/libkfsClient/WriteAppender.cc	/^    enum { kAgainRetryMinTime  = 4  };$/;"	e	enum:KFS::WriteAppender::Impl::__anon10	file:
kBlockBitCount	cc/qcdio/qcdiskqueue.cpp	/^           kBlockBitCount     = 48,$/;"	e	enum:QCDiskQueue::Queue::__anon14	file:
kBufferedLogWriter_LogLevels	cc/common/BufferedLogWriter.cc	/^const char* const kBufferedLogWriter_LogLevels[] = {$/;"	m	namespace:KFS	file:
kChunkInfoHandleListCount	cc/chunk/ChunkManager.h	/^    enum { kChunkInfoHandleListCount = 2 };$/;"	e	enum:KFS::ChunkManager::__anon3
kDiskQueueIdNone	cc/chunk/DiskIo.cc	/^    enum { kDiskQueueIdNone = -1 };$/;"	e	enum:KFS::DiskIoQueues::__anon2	file:
kErrFailedState	cc/chunk/AtomicRecordAppender.cc	/^        kErrFailedState       = -EFAULT,$/;"	e	enum:KFS::AtomicRecordAppender::__anon1	file:
kErrNone	cc/chunk/AtomicRecordAppender.cc	/^        kErrNone              = 0,$/;"	e	enum:KFS::AtomicRecordAppender::__anon1	file:
kErrNone	cc/libkfsClient/KfsProtocolWorker.h	/^        kErrNone       = 0,$/;"	e	enum:KFS::KfsProtocolWorker::__anon5
kErrNotFound	cc/chunk/AtomicRecordAppender.cc	/^        kErrNotFound          = -ENOENT,$/;"	e	enum:KFS::AtomicRecordAppender::__anon1	file:
kErrOutOfSpace	cc/chunk/AtomicRecordAppender.cc	/^        kErrOutOfSpace        = -ENOSPC,$/;"	e	enum:KFS::AtomicRecordAppender::__anon1	file:
kErrParameters	cc/chunk/AtomicRecordAppender.cc	/^        kErrParameters        = -EINVAL,$/;"	e	enum:KFS::AtomicRecordAppender::__anon1	file:
kErrParameters	cc/libkfsClient/KfsProtocolWorker.h	/^        kErrParameters = -EINVAL,$/;"	e	enum:KFS::KfsProtocolWorker::__anon5
kErrProtocol	cc/libkfsClient/KfsProtocolWorker.h	/^        kErrProtocol   = -EBADF,$/;"	e	enum:KFS::KfsProtocolWorker::__anon5
kErrProtocolState	cc/chunk/AtomicRecordAppender.cc	/^        kErrProtocolState     = -EPERM,$/;"	e	enum:KFS::AtomicRecordAppender::__anon1	file:
kErrReplicationFailed	cc/chunk/AtomicRecordAppender.cc	/^        kErrReplicationFailed = -EHOSTUNREACH$/;"	e	enum:KFS::AtomicRecordAppender::__anon1	file:
kErrShutdown	cc/libkfsClient/KfsProtocolWorker.h	/^        kErrShutdown   = -91010$/;"	e	enum:KFS::KfsProtocolWorker::__anon5
kErrStatusInProgress	cc/chunk/AtomicRecordAppender.cc	/^        kErrStatusInProgress  = -EAGAIN,$/;"	e	enum:KFS::AtomicRecordAppender::__anon1	file:
kErrWidReadOnly	cc/chunk/AtomicRecordAppender.cc	/^        kErrWidReadOnly       = -EROFS,$/;"	e	enum:KFS::AtomicRecordAppender::__anon1	file:
kErrorAppenderBase	cc/libkfsClient/WriteAppender.cc	/^        kErrorAppenderBase = 100000,$/;"	e	enum:KFS::WriteAppender::Impl::__anon9	file:
kErrorBlockCountOutOfRange	cc/qcdio/qcdiskqueue.h	/^        kErrorBlockCountOutOfRange = 11,$/;"	e	enum:QCDiskQueue::Error
kErrorBlockIdxOutOfRange	cc/qcdio/qcdiskqueue.h	/^        kErrorBlockIdxOutOfRange   = 10,$/;"	e	enum:QCDiskQueue::Error
kErrorCancel	cc/qcdio/qcdiskqueue.h	/^        kErrorCancel               = 3,$/;"	e	enum:QCDiskQueue::Error
kErrorChunkEnqueue	cc/libkfsClient/WriteAppender.cc	/^        kErrorChunkEnqueue = -(kErrorAppenderBase + 3)$/;"	e	enum:KFS::WriteAppender::Impl::__anon9	file:
kErrorClose	cc/qcdio/qcdiskqueue.h	/^        kErrorClose                = 14,$/;"	e	enum:QCDiskQueue::Error
kErrorEnqueue	cc/qcdio/qcdiskqueue.h	/^        kErrorEnqueue              = 5,$/;"	e	enum:QCDiskQueue::Error
kErrorFileIdxOutOfRange	cc/qcdio/qcdiskqueue.h	/^        kErrorFileIdxOutOfRange    = 9,$/;"	e	enum:QCDiskQueue::Error
kErrorHasPendingRequests	cc/qcdio/qcdiskqueue.h	/^        kErrorHasPendingRequests   = 15,$/;"	e	enum:QCDiskQueue::Error
kErrorMaxRetryReached	cc/libkfsClient/KfsNetClient.h	/^    enum { kErrorMaxRetryReached = -(10000 + ETIMEDOUT) };$/;"	e	enum:KFS::KfsNetClient::__anon6
kErrorMetaEnqueue	cc/libkfsClient/WriteAppender.cc	/^        kErrorMetaEnqueue  = -(kErrorAppenderBase + 2),$/;"	e	enum:KFS::WriteAppender::Impl::__anon9	file:
kErrorNone	cc/qcdio/qcdiskqueue.h	/^        kErrorNone                 = 0,$/;"	e	enum:QCDiskQueue::Error
kErrorOpCanceled	cc/libkfsClient/WriteAppender.cc	/^        kErrorOpCanceled   = -(kErrorAppenderBase + 1),$/;"	e	enum:KFS::WriteAppender::Impl::__anon9	file:
kErrorOpen	cc/qcdio/qcdiskqueue.h	/^        kErrorOpen                 = 13,$/;"	e	enum:QCDiskQueue::Error
kErrorOutOfBuffers	cc/qcdio/qcdiskqueue.h	/^        kErrorOutOfBuffers         = 6,$/;"	e	enum:QCDiskQueue::Error
kErrorOutOfRequests	cc/qcdio/qcdiskqueue.h	/^        kErrorOutOfRequests        = 12,$/;"	e	enum:QCDiskQueue::Error
kErrorParameter	cc/qcdio/qcdiskqueue.h	/^        kErrorParameter            = 7,$/;"	e	enum:QCDiskQueue::Error
kErrorQueueStopped	cc/qcdio/qcdiskqueue.h	/^        kErrorQueueStopped         = 8,$/;"	e	enum:QCDiskQueue::Error
kErrorRead	cc/qcdio/qcdiskqueue.h	/^        kErrorRead                 = 1,$/;"	e	enum:QCDiskQueue::Error
kErrorSeek	cc/qcdio/qcdiskqueue.h	/^        kErrorSeek                 = 4,$/;"	e	enum:QCDiskQueue::Error
kErrorSpaceAlloc	cc/qcdio/qcdiskqueue.h	/^        kErrorSpaceAlloc           = 16$/;"	e	enum:QCDiskQueue::Error
kErrorWrite	cc/qcdio/qcdiskqueue.h	/^        kErrorWrite                = 2,$/;"	e	enum:QCDiskQueue::Error
kFdCountHint	cc/qcdio/qcfdpoll.cpp	/^    enum { kFdCountHint = 1 << 10 };$/;"	e	enum:QCFdPoll::Impl::__anon20	file:
kFileIndexBitCount	cc/qcdio/qcdiskqueue.cpp	/^           kFileIndexBitCount = 16$/;"	e	enum:QCDiskQueue::Queue::__anon14	file:
kFreeFdEnd	cc/qcdio/qcdiskqueue.cpp	/^        kFreeFdEnd    = -1$/;"	e	enum:QCDiskQueue::Queue::__anon17	file:
kFreeFdOffset	cc/qcdio/qcdiskqueue.cpp	/^        kFreeFdOffset = 2,$/;"	e	enum:QCDiskQueue::Queue::__anon17	file:
kFreeQueueIdx	cc/qcdio/qcdiskqueue.cpp	/^        kFreeQueueIdx = 0,$/;"	e	enum:QCDiskQueue::Queue::__anon16	file:
kGetStatusOpMinTime	cc/libkfsClient/WriteAppender.cc	/^    enum { kGetStatusOpMinTime = 16 };$/;"	e	enum:KFS::WriteAppender::Impl::__anon11	file:
kIoQueueIdx	cc/qcdio/qcdiskqueue.cpp	/^        kIoQueueIdx   = 1,$/;"	e	enum:QCDiskQueue::Queue::__anon16	file:
kKfsNullChecksum	cc/libkfsIO/Checksum.cc	/^static const uint32_t  kKfsNullChecksum = 1;$/;"	m	namespace:KFS	file:
kLogLevelALERT	cc/common/BufferedLogWriter.h	/^        kLogLevelALERT  = 100,$/;"	e	enum:KFS::BufferedLogWriter::LogLevel
kLogLevelCRIT	cc/common/BufferedLogWriter.h	/^        kLogLevelCRIT   = 200,$/;"	e	enum:KFS::BufferedLogWriter::LogLevel
kLogLevelDEBUG	cc/common/BufferedLogWriter.h	/^        kLogLevelDEBUG  = 700,$/;"	e	enum:KFS::BufferedLogWriter::LogLevel
kLogLevelEMERG	cc/common/BufferedLogWriter.h	/^        kLogLevelEMERG  = 0, $/;"	e	enum:KFS::BufferedLogWriter::LogLevel
kLogLevelERROR	cc/common/BufferedLogWriter.h	/^        kLogLevelERROR  = 300, $/;"	e	enum:KFS::BufferedLogWriter::LogLevel
kLogLevelFATAL	cc/common/BufferedLogWriter.h	/^        kLogLevelFATAL  = 0,$/;"	e	enum:KFS::BufferedLogWriter::LogLevel
kLogLevelINFO	cc/common/BufferedLogWriter.h	/^        kLogLevelINFO   = 600,$/;"	e	enum:KFS::BufferedLogWriter::LogLevel
kLogLevelNOTICE	cc/common/BufferedLogWriter.h	/^        kLogLevelNOTICE = 500,$/;"	e	enum:KFS::BufferedLogWriter::LogLevel
kLogLevelNOTSET	cc/common/BufferedLogWriter.h	/^        kLogLevelNOTSET = 800$/;"	e	enum:KFS::BufferedLogWriter::LogLevel
kLogLevelWARN	cc/common/BufferedLogWriter.h	/^        kLogLevelWARN   = 400,$/;"	e	enum:KFS::BufferedLogWriter::LogLevel
kLogWirterDefaultTimeToKeepSecs	cc/common/BufferedLogWriter.cc	/^const int64_t kLogWirterDefaultTimeToKeepSecs        = 60 * 60 * 24 * 30;$/;"	m	namespace:KFS	file:
kLogWriterDefaulOpenFlags	cc/common/BufferedLogWriter.cc	/^const int     kLogWriterDefaulOpenFlags              =$/;"	m	namespace:KFS	file:
kLogWriterMinLogBufferSize	cc/common/BufferedLogWriter.cc	/^const int     kLogWriterMinLogBufferSize             = 16 << 10;$/;"	m	namespace:KFS	file:
kLogWriterMinLogFileSize	cc/common/BufferedLogWriter.cc	/^const int64_t kLogWriterMinLogFileSize               = 16 << 10;$/;"	m	namespace:KFS	file:
kLogWriterMinOpenRetryIntervalMicroSec	cc/common/BufferedLogWriter.cc	/^const int64_t kLogWriterMinOpenRetryIntervalMicroSec = 10000;$/;"	m	namespace:KFS	file:
kMaxCmdHeaderLength	cc/chunk/ClientSM.cc	/^const int kMaxCmdHeaderLength = 1 << 10;$/;"	v
kMaxCmdHeaderLength	cc/chunk/RemoteSyncSM.cc	/^const int kMaxCmdHeaderLength = 2 << 10;$/;"	v
kMaxReadAhead	cc/libkfsClient/KfsNetClient.cc	/^    enum { kMaxReadAhead = 4 << 10 };$/;"	e	enum:KFS::KfsNetClient::Impl::__anon8	file:
kMaxReadAhead	cc/meta/ChunkServer.cc	/^const int kMaxReadAhead             = 4 << 10;$/;"	v
kMaxReadRequest	cc/libkfsClient/KfsClientInt.h	/^    enum { kMaxReadRequest = 1 << 20 };$/;"	e	enum:KFS::PendingChunkRead::__anon12
kMaxRequestResponseHeader	cc/meta/ChunkServer.cc	/^const int kMaxRequestResponseHeader = 64 << 10;$/;"	v
kNoBufferCompaction	cc/libkfsClient/KfsProtocolWorker.cc	/^        enum { kNoBufferCompaction = -1 };$/;"	e	enum:KFS::KfsProtocolWorker::Impl::Appender::__anon7	file:
kNumStates	cc/chunk/AtomicRecordAppender.cc	/^        kNumStates$/;"	e	enum:KFS::AtomicRecordAppender::State	file:
kOpTypeError	cc/qcdio/qcfdpoll.h	/^        kOpTypeError = 0x08,$/;"	e	enum:QCFdPoll::OpType
kOpTypeHup	cc/qcdio/qcfdpoll.h	/^        kOpTypeHup   = 0x10$/;"	e	enum:QCFdPoll::OpType
kOpTypeIn	cc/qcdio/qcfdpoll.h	/^        kOpTypeIn    = 0x01,$/;"	e	enum:QCFdPoll::OpType
kOpTypeNone	cc/qcdio/qcfdpoll.h	/^        kOpTypeNone  = 0x00,$/;"	e	enum:QCFdPoll::OpType
kOpTypeOut	cc/qcdio/qcfdpoll.h	/^        kOpTypeOut   = 0x02,$/;"	e	enum:QCFdPoll::OpType
kOpTypePri	cc/qcdio/qcfdpoll.h	/^        kOpTypePri   = 0x04,$/;"	e	enum:QCFdPoll::OpType
kOpenCommonFlags	cc/qcdio/qcdiskqueue.cpp	/^        kOpenCommonFlags = 0$/;"	e	enum:QCDiskQueue::Queue::__anon15	file:
kOtherReqId	cc/meta/ClientSM.cc	/^		kOtherReqId        = META_NUM_OPS_COUNT + 1,$/;"	e	enum:RequestStatsGatherer::__anon26	file:
kRefillReqIdRead	cc/qcdio/qciobufferpool.h	/^        kRefillReqIdRead      = 1$/;"	e	enum:QCIoBufferPool::__anon19
kRefillReqIdUndefined	cc/qcdio/qciobufferpool.h	/^        kRefillReqIdUndefined = -1,$/;"	e	enum:QCIoBufferPool::__anon19
kReqTypeAllocNoLog	cc/meta/ClientSM.cc	/^		kReqTypeAllocNoLog = kOtherReqId + 1,$/;"	e	enum:RequestStatsGatherer::__anon26	file:
kReqTypeNone	cc/qcdio/qcdiskqueue.h	/^        kReqTypeNone  = 0,$/;"	e	enum:QCDiskQueue::ReqType
kReqTypeRead	cc/qcdio/qcdiskqueue.h	/^        kReqTypeRead  = 1,$/;"	e	enum:QCDiskQueue::ReqType
kReqTypeWrite	cc/qcdio/qcdiskqueue.h	/^        kReqTypeWrite = 2$/;"	e	enum:QCDiskQueue::ReqType
kReqTypesCnt	cc/meta/ClientSM.cc	/^		kReqTypesCnt       = kReqTypeAllocNoLog + 1$/;"	e	enum:RequestStatsGatherer::__anon26	file:
kRequestIdNone	cc/qcdio/qcdiskqueue.h	/^    enum { kRequestIdNone = -1 };$/;"	e	enum:QCDiskQueue::__anon18
kRequestQueueCount	cc/qcdio/qcdiskqueue.cpp	/^        kRequestQueueCount$/;"	e	enum:QCDiskQueue::Queue::__anon16	file:
kRequestTypeUnknown	cc/libkfsClient/KfsProtocolWorker.h	/^        kRequestTypeUnknown                      = 0,$/;"	e	enum:KFS::KfsProtocolWorker::RequestType
kRequestTypeWriteAppend	cc/libkfsClient/KfsProtocolWorker.h	/^        kRequestTypeWriteAppend                  = 1,$/;"	e	enum:KFS::KfsProtocolWorker::RequestType
kRequestTypeWriteAppendAsync	cc/libkfsClient/KfsProtocolWorker.h	/^        kRequestTypeWriteAppendAsync             = 5,$/;"	e	enum:KFS::KfsProtocolWorker::RequestType
kRequestTypeWriteAppendClose	cc/libkfsClient/KfsProtocolWorker.h	/^        kRequestTypeWriteAppendClose             = 2,$/;"	e	enum:KFS::KfsProtocolWorker::RequestType
kRequestTypeWriteAppendSetWriteThreshold	cc/libkfsClient/KfsProtocolWorker.h	/^        kRequestTypeWriteAppendSetWriteThreshold = 4,$/;"	e	enum:KFS::KfsProtocolWorker::RequestType
kRequestTypeWriteAppendShutdown	cc/libkfsClient/KfsProtocolWorker.h	/^        kRequestTypeWriteAppendShutdown          = 3,$/;"	e	enum:KFS::KfsProtocolWorker::RequestType
kRequestTypeWriteAppendThrottle	cc/libkfsClient/KfsProtocolWorker.h	/^        kRequestTypeWriteAppendThrottle          = 6,$/;"	e	enum:KFS::KfsProtocolWorker::RequestType
kStateChunkLost	cc/chunk/AtomicRecordAppender.cc	/^        kStateChunkLost         = 5,$/;"	e	enum:KFS::AtomicRecordAppender::State	file:
kStateClosed	cc/chunk/AtomicRecordAppender.cc	/^        kStateClosed            = 2,$/;"	e	enum:KFS::AtomicRecordAppender::State	file:
kStateDone	cc/libkfsClient/KfsProtocolWorker.h	/^            kStateDone     = 2$/;"	e	enum:KFS::KfsProtocolWorker::Request::State
kStateInFlight	cc/libkfsClient/KfsProtocolWorker.h	/^            kStateInFlight = 1,$/;"	e	enum:KFS::KfsProtocolWorker::Request::State
kStateNone	cc/chunk/AtomicRecordAppender.cc	/^        kStateNone              = 0,$/;"	e	enum:KFS::AtomicRecordAppender::State	file:
kStateNone	cc/libkfsClient/KfsProtocolWorker.h	/^            kStateNone     = 0,$/;"	e	enum:KFS::KfsProtocolWorker::Request::State
kStateOpen	cc/chunk/AtomicRecordAppender.cc	/^        kStateOpen              = 1,$/;"	e	enum:KFS::AtomicRecordAppender::State	file:
kStatePendingDelete	cc/chunk/AtomicRecordAppender.cc	/^        kStatePendingDelete     = 6,$/;"	e	enum:KFS::AtomicRecordAppender::State	file:
kStateReplicationFailed	cc/chunk/AtomicRecordAppender.cc	/^        kStateReplicationFailed = 3,$/;"	e	enum:KFS::AtomicRecordAppender::State	file:
kStateStable	cc/chunk/AtomicRecordAppender.cc	/^        kStateStable            = 4,$/;"	e	enum:KFS::AtomicRecordAppender::State	file:
kStatsIntervalSec	cc/meta/ClientSM.cc	/^	enum { kStatsIntervalSec = 20 };$/;"	e	enum:RequestStatsGatherer::__anon25	file:
kTimerWheelSize	cc/libkfsIO/NetManager.h	/^    enum { kTimerWheelSize = (1 << 8) };$/;"	e	enum:KFS::NetManager::__anon23
kdata1	cc/meta/base.h	/^	KeyData kdata1;	\/\/!< associated identification$/;"	m	class:KFS::Key
kdata2	cc/meta/base.h	/^	KeyData kdata2; \/\/!< and more identification$/;"	m	class:KFS::Key
key	cc/meta/kfstree.h	/^	const Key key() const { return childKey[count - 1]; }$/;"	f	class:KFS::Node
key	cc/meta/meta.h	/^	const Key key() const { return Key(KFS_CHUNKINFO, id(), offset); }$/;"	f	class:KFS::MetaChunkInfo
key	cc/meta/meta.h	/^	const Key key() const { return Key(KFS_DENTRY, dir); }$/;"	f	class:KFS::MetaDentry
key	cc/meta/meta.h	/^	const Key key() const { return Key(KFS_FATTR, id()); }$/;"	f	class:KFS::MetaFattr
key_type	cc/meta/LayoutManager.h	/^		typedef Map::key_type       key_type;$/;"	t	class:KFS::CSMap
kfs	python/flogger/flogger.py	/^import kfs$/;"	i
kfs	python/rmr/rmr.py	/^import kfs$/;"	i
kfs	python/rw/rw.py	/^import kfs$/;"	i
kfs	python/unittests/dirops.py	/^import kfs$/;"	i
kfs	python/unittests/worm.py	/^import kfs$/;"	i
kfs	python/unittests/write-flush.py	/^import kfs$/;"	i
kfs	python/unittests/write.py	/^import kfs$/;"	i
kfsChunkId_t	cc/common/kfstypes.h	/^typedef int64_t kfsChunkId_t;$/;"	t	namespace:KFS
kfsClient	python/unittests/dirops.py	/^kfsClient = None$/;"	v
kfsClient	python/unittests/worm.py	/^kfsClient = None$/;"	v
kfsClient	python/unittests/write-flush.py	/^kfsClient = None$/;"	v
kfsClient	python/unittests/write.py	/^kfsClient = None$/;"	v
kfsFd	java/org/kosmix/kosmosfs/access/KfsInputChannel.java	/^    private int kfsFd = -1;$/;"	f	class:KfsInputChannel	file:
kfsFd	java/org/kosmix/kosmosfs/access/KfsOutputChannel.java	/^    private int kfsFd = -1;$/;"	f	class:KfsOutputChannel	file:
kfsFileId_t	cc/common/kfstypes.h	/^typedef int64_t kfsFileId_t;$/;"	t	namespace:KFS
kfsSeq_t	cc/common/kfstypes.h	/^typedef int64_t kfsSeq_t;$/;"	t	namespace:KFS
kfs_Client	cc/access/KfsModulePy.cc	/^struct kfs_Client {$/;"	s	file:
kfs_ClientType	cc/access/KfsModulePy.cc	/^static PyTypeObject kfs_ClientType = {$/;"	v	file:
kfs_File	cc/access/KfsModulePy.cc	/^struct kfs_File {$/;"	s	file:
kfs_FileType	cc/access/KfsModulePy.cc	/^static PyTypeObject kfs_FileType = {$/;"	v	file:
kfs_append	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    public KfsOutputChannel kfs_append(String path)$/;"	m	class:KfsAccess
kfs_cd	cc/access/KfsModulePy.cc	/^kfs_cd(PyObject *pself, PyObject *args)$/;"	f	file:
kfs_cd	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    public int kfs_cd(String path)$/;"	m	class:KfsAccess
kfs_chunkLocations	cc/access/KfsModulePy.cc	/^kfs_chunkLocations(PyObject *pself, PyObject *args)$/;"	f	file:
kfs_close	cc/access/KfsModulePy.cc	/^kfs_close(PyObject *pself, PyObject *args)$/;"	f	file:
kfs_coalesceblocks	cc/access/KfsModulePy.cc	/^kfs_coalesceblocks(PyObject *pself, PyObject *args)$/;"	f	file:
kfs_compareChunkReplicas	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    public boolean kfs_compareChunkReplicas(String path, StringBuffer md5sum)$/;"	m	class:KfsAccess
kfs_create	cc/access/KfsModulePy.cc	/^kfs_create(PyObject *pself, PyObject *args)$/;"	f	file:
kfs_create	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    public KfsOutputChannel kfs_create(String path)$/;"	m	class:KfsAccess
kfs_create	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    public KfsOutputChannel kfs_create(String path, int numReplicas)$/;"	m	class:KfsAccess
kfs_create	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    public KfsOutputChannel kfs_create(String path, int numReplicas, boolean exclusive)$/;"	m	class:KfsAccess
kfs_create	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    public KfsOutputChannel kfs_create(String path, int numReplicas, boolean exclusive,$/;"	m	class:KfsAccess
kfs_dataVerify	cc/access/KfsModulePy.cc	/^kfs_dataVerify(PyObject *pself, PyObject *args)$/;"	f	file:
kfs_exists	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    public boolean kfs_exists(String path)$/;"	m	class:KfsAccess
kfs_filesize	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    public long kfs_filesize(String path)$/;"	m	class:KfsAccess
kfs_getChunkSize	cc/access/KfsModulePy.cc	/^kfs_getChunkSize(PyObject *pself, PyObject *args)$/;"	f	file:
kfs_getDataLocation	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    public String[][] kfs_getDataLocation(String path, long start, long len)$/;"	m	class:KfsAccess
kfs_getModificationTime	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    public long kfs_getModificationTime(String path)$/;"	m	class:KfsAccess
kfs_getNumChunks	cc/access/KfsModulePy.cc	/^kfs_getNumChunks(PyObject *pself, PyObject *args)$/;"	f	file:
kfs_getReplication	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    public short kfs_getReplication(String path)$/;"	m	class:KfsAccess
kfs_isDirectory	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    public boolean kfs_isDirectory(String path)$/;"	m	class:KfsAccess
kfs_isFile	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    public boolean kfs_isFile(String path)$/;"	m	class:KfsAccess
kfs_isdir	cc/access/KfsModulePy.cc	/^kfs_isdir(PyObject *pself, PyObject *args)$/;"	f	file:
kfs_isfile	cc/access/KfsModulePy.cc	/^kfs_isfile(PyObject *pself, PyObject *args)$/;"	f	file:
kfs_lib_dir	cc/access/kfs_setup.py	/^kfs_lib_dir = sys.argv[1]$/;"	v
kfs_log_level	cc/access/KfsModulePy.cc	/^kfs_log_level(PyObject *pself, PyObject *args)$/;"	f	file:
kfs_mkdir	cc/access/KfsModulePy.cc	/^kfs_mkdir(PyObject *pself, PyObject *args)$/;"	f	file:
kfs_mkdirs	cc/access/KfsModulePy.cc	/^kfs_mkdirs(PyObject *pself, PyObject *args)$/;"	f	file:
kfs_mkdirs	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    public int kfs_mkdirs(String path)$/;"	m	class:KfsAccess
kfs_open	cc/access/KfsModulePy.cc	/^kfs_open(PyObject *pself, PyObject *args)$/;"	f	file:
kfs_open	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    public KfsInputChannel kfs_open(String path)$/;"	m	class:KfsAccess
kfs_open	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    public KfsInputChannel kfs_open(String path, long bufferSize, long readAheadSize)$/;"	m	class:KfsAccess
kfs_read	cc/access/KfsModulePy.cc	/^kfs_read(PyObject *pself, PyObject *args)$/;"	f	file:
kfs_readdir	cc/access/KfsModulePy.cc	/^kfs_readdir(PyObject *pself, PyObject *args)$/;"	f	file:
kfs_readdir	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    public String[] kfs_readdir(String path)$/;"	m	class:KfsAccess
kfs_readdir	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    public String[] kfs_readdir(String path, boolean prefetchAttr)$/;"	m	class:KfsAccess
kfs_readdirplus	cc/access/KfsModulePy.cc	/^kfs_readdirplus(PyObject *pself, PyObject *args)$/;"	f	file:
kfs_readdirplus	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    public KfsFileAttr[] kfs_readdirplus(String path)$/;"	m	class:KfsAccess
kfs_remove	cc/access/KfsModulePy.cc	/^kfs_remove(PyObject *pself, PyObject *args)$/;"	f	file:
kfs_remove	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    public int kfs_remove(String path)$/;"	m	class:KfsAccess
kfs_rename	cc/access/KfsModulePy.cc	/^kfs_rename(PyObject *pself, PyObject *args)$/;"	f	file:
kfs_rename	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    public int kfs_rename(String oldpath, String newpath)$/;"	m	class:KfsAccess
kfs_rename	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    public int kfs_rename(String oldpath, String newpath, boolean overwrite)$/;"	m	class:KfsAccess
kfs_reopen	cc/access/KfsModulePy.cc	/^kfs_reopen(PyObject *pself, PyObject *args)$/;"	f	file:
kfs_rmdir	cc/access/KfsModulePy.cc	/^kfs_rmdir(PyObject *pself, PyObject *args)$/;"	f	file:
kfs_rmdir	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    public int kfs_rmdir(String path)$/;"	m	class:KfsAccess
kfs_rmdirs	cc/access/KfsModulePy.cc	/^kfs_rmdirs(PyObject *pself, PyObject *args)$/;"	f	file:
kfs_rmdirs	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    public int kfs_rmdirs(String path)$/;"	m	class:KfsAccess
kfs_seek	cc/access/KfsModulePy.cc	/^kfs_seek(PyObject *pself, PyObject *args)$/;"	f	file:
kfs_setModificationTime	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    public int kfs_setModificationTime(String path, long msecs)$/;"	m	class:KfsAccess
kfs_setReplication	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    public short kfs_setReplication(String path, int numReplicas)$/;"	m	class:KfsAccess
kfs_startup	cc/meta/startup.cc	/^KFS::kfs_startup(const string &logdir, const string &cpdir, $/;"	f	class:KFS
kfs_stat	cc/access/KfsModulePy.cc	/^kfs_stat(PyObject *pself, PyObject *args)$/;"	f	file:
kfs_sync	cc/access/KfsModulePy.cc	/^kfs_sync(PyObject *pself, PyObject *args)$/;"	f	file:
kfs_tell	cc/access/KfsModulePy.cc	/^kfs_tell(PyObject *pself, PyObject *args)$/;"	f	file:
kfs_truncate	cc/access/KfsModulePy.cc	/^kfs_truncate(PyObject *pself, PyObject *args)$/;"	f	file:
kfs_write	cc/access/KfsModulePy.cc	/^kfs_write(PyObject *pself, PyObject *args)$/;"	f	file:
kfsext	cc/access/kfs_setup.py	/^kfsext = Extension('kfs',$/;"	v
kind	cc/meta/base.h	/^	MetaType kind;	\/\/!< for what kind of metadata$/;"	m	class:KFS::Key
lastAccessTime	cc/libkfsClient/KfsClientInt.h	/^    time_t	lastAccessTime;$/;"	m	struct:KFS::FileTableEntry
lastAccessTime	cc/meta/kfstree.h	/^	time_t lastAccessTime;$/;"	m	struct:KFS::PathToFidCacheEntry
lastAccessedTime	cc/meta/LayoutManager.h	/^			time_t    lastAccessedTime;$/;"	m	struct:KFS::ARAChunkCache::Entry
lastChunkOffset	cc/libkfsClient/KfsAttr.h	/^    off_t lastChunkOffset;$/;"	m	struct:KFS::FileChunkInfo
lastDecayTime	cc/meta/LayoutManager.h	/^                	time_t    lastDecayTime;$/;"	m	struct:KFS::ARAChunkCache::Entry
lastIOTime	cc/chunk/ChunkManager.cc	/^    time_t lastIOTime;  \/\/ when was the last I\/O done on this chunk$/;"	m	class:KFS::ChunkInfoHandle	file:
lastPendingRequest	cc/meta/LayoutManager.h	/^			MetaAllocate* lastPendingRequest;$/;"	m	struct:KFS::ARAChunkCache::Entry
lastWriteTime	cc/chunk/LeaseClerk.h	/^    time_t lastWriteTime;$/;"	m	struct:KFS::LeaseInfo_t
layout	cc/libkfsClient/KfsClient.cc	/^    const ChunkLayoutInfo &layout;$/;"	m	struct:RespondingServer	file:
layout	cc/libkfsClient/KfsClient.cc	/^    const ChunkLayoutInfo &layout;$/;"	m	struct:RespondingServer2	file:
layoutDone	cc/meta/request.h	/^	bool layoutDone;	\/\/!< Has layout of chunk been done$/;"	m	struct:KFS::MetaAllocate
lc	cc/chunk/LeaseClerk.cc	/^    LeaseClerk * const lc;$/;"	m	class:LeaseRenewer	file:
leaf	cc/meta/kfstree.h	/^	Meta *leaf(int n) const			\/\/! \\brief accessor$/;"	f	class:KFS::Node
leaseId	cc/chunk/KfsOps.h	/^    int64_t leaseId; \/\/ input$/;"	m	struct:KFS::AllocChunkOp
leaseId	cc/chunk/KfsOps.h	/^    int64_t leaseId;$/;"	m	struct:KFS::LeaseRelinquishOp
leaseId	cc/chunk/KfsOps.h	/^    int64_t leaseId;$/;"	m	struct:KFS::LeaseRenewOp
leaseId	cc/chunk/LeaseClerk.h	/^    int64_t leaseId;$/;"	m	struct:KFS::LeaseInfo_t
leaseId	cc/libkfsClient/KfsOps.h	/^    int64_t leaseId; \/\/ input$/;"	m	struct:KFS::LeaseRenewOp
leaseId	cc/libkfsClient/KfsOps.h	/^    int64_t leaseId; \/\/ output$/;"	m	struct:KFS::LeaseAcquireOp
leaseId	cc/libkfsClient/KfsOps.h	/^    int64_t leaseId;$/;"	m	struct:KFS::LeaseRelinquishOp
leaseId	cc/libkfsClient/LeaseClerk.h	/^    int64_t leaseId;$/;"	m	struct:KFS::LeaseInfo_t
leaseId	cc/meta/LayoutManager.h	/^		const int64_t leaseId;$/;"	m	struct:KFS::LeaseInfo
leaseId	cc/meta/request.h	/^	const int64_t leaseId; \/\/!< input$/;"	m	struct:KFS::MetaLeaseRelinquish
leaseId	cc/meta/request.h	/^	int64_t leaseId; \/\/!< input$/;"	m	struct:KFS::MetaLeaseRenew
leaseId	cc/meta/request.h	/^	int64_t leaseId; \/\/!< result$/;"	m	struct:KFS::MetaLeaseAcquire
leaseId	cc/meta/request.h	/^	int64_t leaseId;$/;"	m	struct:KFS::MetaChunkAllocate
leaseRenewSent	cc/chunk/LeaseClerk.h	/^    bool leaseRenewSent;$/;"	m	struct:KFS::LeaseInfo_t
leaseType	cc/chunk/KfsOps.h	/^    std::string leaseType;$/;"	m	struct:KFS::LeaseRelinquishOp
leaseType	cc/chunk/KfsOps.h	/^    std::string leaseType;$/;"	m	struct:KFS::LeaseRenewOp
leaseType	cc/libkfsClient/KfsOps.h	/^    std::string leaseType;$/;"	m	struct:KFS::LeaseRelinquishOp
leaseType	cc/meta/LayoutManager.h	/^		const LeaseType leaseType;$/;"	m	struct:KFS::LeaseInfo
leaseType	cc/meta/request.h	/^	LeaseType leaseType; \/\/!< input$/;"	m	struct:KFS::MetaLeaseAcquire
leaseType	cc/meta/request.h	/^	LeaseType leaseType; \/\/!< input$/;"	m	struct:KFS::MetaLeaseRenew
leaseType	cc/meta/request.h	/^	const LeaseType leaseType; \/\/!< input$/;"	m	struct:KFS::MetaLeaseRelinquish
leftNeighbor	cc/meta/kfstree.h	/^	Node *leftNeighbor(int pos)$/;"	f	class:KFS::Node
legalname	cc/meta/kfsops.cc	/^legalname(const string name)$/;"	f	file:
length	cc/libkfsClient/KfsAsyncRW.h	/^        size_t      length;  \/\/ # of bytes to be read\/written$/;"	m	struct:KFS::AsyncReq
length	cc/libkfsClient/KfsClientInt.h	/^    size_t length;	\/\/ length of valid data$/;"	m	struct:KFS::ChunkBuffer
lib_ext	cc/meta/handler.cc	/^const string ZincHandler::lib_ext = ".so";$/;"	m	class:ZincHandler	file:
lib_ext	cc/meta/handler.h	/^       static const std::string       lib_ext;$/;"	m	class:ZincHandler
libkfsio	cc/libkfsIO/Globals.cc	/^namespace libkfsio$/;"	n	namespace:KFS	file:
libkfsio	cc/libkfsIO/Globals.h	/^    namespace libkfsio$/;"	n	namespace:KFS
libkfsio	cc/libkfsIO/IOBuffer.h	/^namespace libkfsio$/;"	n	namespace:KFS
libraries	cc/access/kfs_setup.py	/^		libraries = ['kfsClient'],$/;"	v
library_dirs	cc/access/kfs_setup.py	/^		library_dirs = [kfs_lib_dir],$/;"	v
link	cc/meta/kfsops.cc	/^Tree::link(fid_t dir, const string fname, FileType type, fid_t myID, int16_t numReplicas, const std::string optionalHandler = "")$/;"	f	class:Tree
linkToPeer	cc/meta/kfstree.h	/^	void linkToPeer(Node *n) { next = n; }$/;"	f	class:KFS::Node
link_latest	cc/meta/util.cc	/^KFS::link_latest(const string realname, const string alias)$/;"	f	class:KFS
listPaths	cc/meta/kfsops.cc	/^Tree::listPaths(ostream &ofs)$/;"	f	class:Tree
listPaths	cc/meta/kfsops.cc	/^Tree::listPaths(ostream &ofs, set<fid_t> specificIds)$/;"	f	class:Tree
listPaths	cc/meta/kfsops.cc	/^Tree::listPaths(ostream &ofs, string parent, fid_t dir, set<fid_t> specificIds)$/;"	f	class:Tree
loadChunks	cc/rebalancer/rebalancer_main.cc	/^ChunkServer::loadChunks(string &dataDir, bool splitByDrive)$/;"	f	class:ChunkServer
loadChunks	cc/rebalancer/rebalancer_main.cc	/^Rebalancer::loadChunks(string dataDir)$/;"	f	class:Rebalancer
loadEstimate	cc/meta/LayoutManager.cc	/^	uint32_t loadEstimate;$/;"	m	struct:ServerSpace	file:
loadProperties	cc/common/properties.cc	/^int Properties::loadProperties(const char* fileName, char delimiter, bool verbose, bool multiline \/*=false*\/)$/;"	f	class:Properties
loadProperties	cc/common/properties.cc	/^int Properties::loadProperties(std::istream &ist, char delimiter, bool verbose, bool multiline \/*=false*\/)$/;"	f	class:Properties
loc	cc/emulator/LayoutEmulator.cc	/^	ServerLocation loc;$/;"	m	class:MatchingServer	file:
loc	cc/libkfsClient/KfsClient.cc	/^    ServerLocation loc;$/;"	m	class:MatchingServer	file:
loc	cc/meta/LayoutManager.cc	/^	const ServerLocation loc;$/;"	m	class:MatchingServer	file:
location	cc/chunk/KfsOps.h	/^    ServerLocation location; \/\/ input: where to get the chunk from$/;"	m	struct:KFS::ReplicateChunkOp
location	cc/libkfsClient/KfsClientInt.h	/^    ServerLocation location;$/;"	m	struct:KFS::ChunkServerConn
location	cc/meta/LayoutManager.h	/^		ServerLocation location;$/;"	m	struct:KFS::HibernatingServerInfo_t
location	cc/meta/request.h	/^	ServerLocation location; \/\/<! Location of this server$/;"	m	struct:KFS::MetaHello
location	cc/meta/request.h	/^	ServerLocation location; \/\/<! Location of this server$/;"	m	struct:KFS::MetaRetireChunkserver
location	cc/tools/MonUtils.h	/^        KFS::ServerLocation location;$/;"	m	struct:KFS_MON::ChunkPingOp
locations	cc/meta/request.h	/^	vector<ServerLocation> locations; \/\/!< where the copies of the chunks are$/;"	m	struct:KFS::ChunkLayoutInfo
locations	cc/meta/request.h	/^	vector<ServerLocation> locations; \/\/!< where the copies of the chunks are$/;"	m	struct:KFS::MetaGetalloc
lock	cc/meta/thread.h	/^	void lock()$/;"	f	class:KFS::MetaThread
log	cc/meta/logger.cc	/^Logger::log(MetaRequest *r)$/;"	f	class:Logger
log	cc/meta/request.cc	/^MetaAllocate::log(ofstream &file) const$/;"	f	class:KFS::MetaAllocate
log	cc/meta/request.cc	/^MetaBye::log(ofstream &file) const$/;"	f	class:KFS::MetaBye
log	cc/meta/request.cc	/^MetaChangeChunkVersionInc::log(ofstream &file) const$/;"	f	class:KFS::MetaChangeChunkVersionInc
log	cc/meta/request.cc	/^MetaChangeFileReplication::log(ofstream &file) const$/;"	f	class:KFS::MetaChangeFileReplication
log	cc/meta/request.cc	/^MetaCheckLeases::log(ofstream &file) const$/;"	f	class:KFS::MetaCheckLeases
log	cc/meta/request.cc	/^MetaChunkCorrupt::log(ofstream &file) const$/;"	f	class:KFS::MetaChunkCorrupt
log	cc/meta/request.cc	/^MetaChunkReplicationCheck::log(ofstream &file) const$/;"	f	class:KFS::MetaChunkReplicationCheck
log	cc/meta/request.cc	/^MetaChunkSize::log(ofstream &file) const$/;"	f	class:KFS::MetaChunkSize
log	cc/meta/request.cc	/^MetaCoalesceBlocks::log(ofstream &file) const$/;"	f	class:KFS::MetaCoalesceBlocks
log	cc/meta/request.cc	/^MetaCreate::log(ofstream &file) const$/;"	f	class:KFS::MetaCreate
log	cc/meta/request.cc	/^MetaDumpChunkReplicationCandidates::log(ofstream &file) const$/;"	f	class:KFS::MetaDumpChunkReplicationCandidates
log	cc/meta/request.cc	/^MetaDumpChunkToServerMap::log(ofstream &file) const$/;"	f	class:KFS::MetaDumpChunkToServerMap
log	cc/meta/request.cc	/^MetaExecuteRebalancePlan::log(ofstream &file) const$/;"	f	class:KFS::MetaExecuteRebalancePlan
log	cc/meta/request.cc	/^MetaFsck::log(ofstream &file) const$/;"	f	class:KFS::MetaFsck
log	cc/meta/request.cc	/^MetaGetChunkServersCounters::log(ofstream & \/* file *\/) const$/;"	f	class:KFS::MetaGetChunkServersCounters
log	cc/meta/request.cc	/^MetaGetalloc::log(ofstream &file) const$/;"	f	class:KFS::MetaGetalloc
log	cc/meta/request.cc	/^MetaGetlayout::log(ofstream &file) const$/;"	f	class:KFS::MetaGetlayout
log	cc/meta/request.cc	/^MetaHello::log(ofstream &file) const$/;"	f	class:KFS::MetaHello
log	cc/meta/request.cc	/^MetaLeaseAcquire::log(ofstream &file) const$/;"	f	class:KFS::MetaLeaseAcquire
log	cc/meta/request.cc	/^MetaLeaseCleanup::log(ofstream &file) const$/;"	f	class:KFS::MetaLeaseCleanup
log	cc/meta/request.cc	/^MetaLeaseRelinquish::log(ofstream &file) const$/;"	f	class:KFS::MetaLeaseRelinquish
log	cc/meta/request.cc	/^MetaLeaseRenew::log(ofstream &file) const$/;"	f	class:KFS::MetaLeaseRenew
log	cc/meta/request.cc	/^MetaLogMakeChunkStable::log(ofstream &file) const$/;"	f	class:KFS::MetaLogMakeChunkStable
log	cc/meta/request.cc	/^MetaLookup::log(ofstream &file) const$/;"	f	class:KFS::MetaLookup
log	cc/meta/request.cc	/^MetaLookupPath::log(ofstream &file) const$/;"	f	class:KFS::MetaLookupPath
log	cc/meta/request.cc	/^MetaMkdir::log(ofstream &file) const$/;"	f	class:KFS::MetaMkdir
log	cc/meta/request.cc	/^MetaOpenFiles::log(ofstream &file) const$/;"	f	class:KFS::MetaOpenFiles
log	cc/meta/request.cc	/^MetaPing::log(ofstream &file) const$/;"	f	class:KFS::MetaPing
log	cc/meta/request.cc	/^MetaReadConfig::log(ofstream &file) const$/;"	f	class:KFS::MetaReadConfig
log	cc/meta/request.cc	/^MetaReaddir::log(ofstream &file) const$/;"	f	class:KFS::MetaReaddir
log	cc/meta/request.cc	/^MetaReaddirPlus::log(ofstream &file) const$/;"	f	class:KFS::MetaReaddirPlus
log	cc/meta/request.cc	/^MetaRecomputeDirsize::log(ofstream &file) const$/;"	f	class:KFS::MetaRecomputeDirsize
log	cc/meta/request.cc	/^MetaRemove::log(ofstream &file) const$/;"	f	class:KFS::MetaRemove
log	cc/meta/request.cc	/^MetaRename::log(ofstream &file) const$/;"	f	class:KFS::MetaRename
log	cc/meta/request.cc	/^MetaRetireChunkserver::log(ofstream &file) const$/;"	f	class:KFS::MetaRetireChunkserver
log	cc/meta/request.cc	/^MetaRmdir::log(ofstream &file) const$/;"	f	class:KFS::MetaRmdir
log	cc/meta/request.cc	/^MetaSetChunkServersProperties::log(ofstream & \/* file *\/) const$/;"	f	class:KFS::MetaSetChunkServersProperties
log	cc/meta/request.cc	/^MetaSetMtime::log(ofstream &file) const$/;"	f	class:KFS::MetaSetMtime
log	cc/meta/request.cc	/^MetaStats::log(ofstream &file) const$/;"	f	class:KFS::MetaStats
log	cc/meta/request.cc	/^MetaToggleRebalancing::log(ofstream &file) const$/;"	f	class:KFS::MetaToggleRebalancing
log	cc/meta/request.cc	/^MetaToggleWORM::log(ofstream &file) const$/;"	f	class:KFS::MetaToggleWORM
log	cc/meta/request.cc	/^MetaTruncate::log(ofstream &file) const$/;"	f	class:KFS::MetaTruncate
log	cc/meta/request.cc	/^MetaUpServers::log(ofstream &file) const$/;"	f	class:KFS::MetaUpServers
log	cc/meta/request.h	/^	virtual int log(ofstream &file) const { return 0; }$/;"	f	struct:KFS::MetaChunkRequest
log	python/flogger/flogger.py	/^	def log(self, msg):$/;"	m	class:test_op
log4cpp	cc/common/DailyRollingFileAppender.cc	/^namespace log4cpp {$/;"	n	file:
log4cpp	cc/common/DailyRollingFileAppender.h	/^namespace log4cpp$/;"	n
logDone	cc/meta/request.cc	/^MetaLogMakeChunkStable::logDone(int code, void *data)$/;"	f	class:KFS::MetaLogMakeChunkStable
logFlag	cc/meta/request.h	/^        bool logFlag;$/;"	m	struct:KFS::MetaAllocate
logMakeChunkStableFlag	cc/meta/LayoutManager.h	/^		bool              logMakeChunkStableFlag:1;$/;"	m	struct:KFS::MakeChunkStableInfo
logRotater	cc/meta/logger.cc	/^static KFS::LogRotater logRotater;$/;"	v	file:
log_parse	python/kfscp/kfscp.py	/^	def log_parse(self, parts):$/;"	m	class:cp
logdir	cc/meta/logger.h	/^	string logdir;		\/\/!< directory where logs are kept$/;"	m	class:KFS::Logger
logfile	cc/meta/logger.h	/^	string logfile(int n)	\/\/!< generate a log file name$/;"	f	class:KFS::Logger
logger	cc/common/log.cc	/^MsgLogger* KFS::MsgLogger::logger = 0;$/;"	m	class:KFS::KFS::MsgLogger	file:
logger	cc/common/log.h	/^        static MsgLogger *logger;$/;"	m	class:KFS::MsgLogger
logger_init	cc/meta/logger.cc	/^KFS::logger_init()$/;"	f	class:KFS
logger_main	cc/chunk/Logger.cc	/^logger_main(void *dummy)$/;"	f	file:
logger_setup_paths	cc/meta/logger.cc	/^KFS::logger_setup_paths(const string &logdir)$/;"	f	class:KFS
logname	cc/meta/logger.h	/^	string logname;		\/\/!< name of current log file$/;"	m	class:KFS::Logger
logno	cc/meta/replay.h	/^	int logno() { return number; }$/;"	f	class:KFS::Replay
lognum	cc/meta/logger.h	/^	int lognum;		\/\/!< for generating log file names$/;"	m	class:KFS::Logger
lookup	cc/meta/kfsops.cc	/^Tree::lookup(fid_t dir, const string &fname)$/;"	f	class:Tree
lookup	python/kfscp/kfscp.py	/^	def lookup(self, path):$/;"	m	class:cp
lookupPath	cc/meta/kfsops.cc	/^Tree::lookupPath(fid_t rootdir, const string &path)$/;"	f	class:Tree
lower_bound	cc/meta/LayoutManager.h	/^		const_iterator lower_bound(const key_type& key) const {$/;"	f	class:KFS::CSMap
lower_bound	cc/meta/LayoutManager.h	/^		iterator lower_bound(const key_type& key) {$/;"	f	class:KFS::CSMap
ls	python/kfscp/kfscp.py	/^	def ls(self, path = "", flags = ""):$/;"	m	class:cp
mARAChunkCache	cc/meta/LayoutManager.h	/^		ARAChunkCache mARAChunkCache;$/;"	m	class:KFS::LayoutManager
mAcceptCount	cc/chunk/ClientManager.h	/^        Counter mAcceptCount;$/;"	m	struct:KFS::ClientManager::Counters
mAcceptor	cc/chunk/ClientManager.h	/^    Acceptor *mAcceptor;$/;"	m	class:KFS::ClientManager
mAcceptor	cc/meta/ChunkServerFactory.h	/^                Acceptor *mAcceptor;$/;"	m	class:KFS::ChunkServerFactory
mAcceptor	cc/meta/ClientManager.h	/^        Acceptor *mAcceptor;$/;"	m	class:KFS::ClientManager
mAcceptorOwner	cc/libkfsIO/Acceptor.h	/^    IAcceptorOwner* const mAcceptorOwner;$/;"	m	class:KFS::Acceptor
mActionFlags	cc/libkfsIO/NetErrorSimulator.cc	/^        int      mActionFlags;$/;"	m	struct:KFS::NetErrorSimulator::SimSpec	file:
mActiveAppendersCount	cc/chunk/AtomicRecordAppender.h	/^    int64_t               mActiveAppendersCount;$/;"	m	class:KFS::AtomicRecordAppendManager
mAddr	cc/libkfsIO/TelemetryClient.h	/^        struct in_addr mAddr;$/;"	m	class:KFS::TelemetryClient	typeref:struct:KFS::TelemetryClient::in_addr
mAllDataSentFlag	cc/libkfsClient/KfsNetClient.cc	/^    bool              mAllDataSentFlag;$/;"	m	class:KFS::KfsNetClient::Impl	file:
mAllocCount	cc/chunk/MetaServerSM.h	/^        Counter mAllocCount;$/;"	m	struct:KFS::MetaServerSM::Counters
mAllocErrorCount	cc/chunk/MetaServerSM.h	/^        Counter mAllocErrorCount;$/;"	m	struct:KFS::MetaServerSM::Counters
mAllocOp	cc/libkfsClient/WriteAppender.cc	/^    AllocateOp              mAllocOp;$/;"	m	class:KFS::WriteAppender::Impl	file:
mAllocPtr	cc/qcdio/qciobufferpool.cpp	/^    void*        mAllocPtr;$/;"	m	class:QCIoBufferPool::Partition	file:
mAllocRetriesCount	cc/libkfsClient/WriteAppender.h	/^        Counter mAllocRetriesCount;$/;"	m	struct:KFS::WriteAppender::Stats
mAllocSize	cc/qcdio/qciobufferpool.cpp	/^    size_t       mAllocSize;$/;"	m	class:QCIoBufferPool::Partition	file:
mAllocSpace	cc/meta/ChunkServer.h	/^                int64_t mAllocSpace;$/;"	m	class:KFS::ChunkServer
mAllocSpace	cc/meta/LayoutManager.h	/^		uint64_t mAllocSpace;$/;"	m	class:KFS::RackInfo
mAllocator	cc/libkfsClient/KfsAsyncRW.h	/^        NullAllocator mAllocator;$/;"	m	class:KFS::AsyncWorker
mAllocator	cc/libkfsIO/IOBuffer.cc	/^    libkfsio::IOBufferAllocator& mAllocator;$/;"	m	struct:IOBufferDeallocatorCustom	file:
mAppendByteCount	cc/chunk/AtomicRecordAppender.h	/^        Counter mAppendByteCount;$/;"	m	struct:KFS::AtomicRecordAppendManager::Counters
mAppendByteCount	cc/libkfsClient/WriteAppender.h	/^        Counter mAppendByteCount;$/;"	m	struct:KFS::WriteAppender::Stats
mAppendCommitCount	cc/chunk/AtomicRecordAppender.cc	/^    uint64_t                mAppendCommitCount;$/;"	m	class:KFS::AtomicRecordAppender	file:
mAppendCount	cc/chunk/AtomicRecordAppender.cc	/^        uint64_t mAppendCount;$/;"	m	struct:KFS::AtomicRecordAppender::WIdState	file:
mAppendCount	cc/chunk/AtomicRecordAppender.h	/^        Counter mAppendCount;$/;"	m	struct:KFS::AtomicRecordAppendManager::Counters
mAppendCount	cc/common/BufferedLogWriter.h	/^        int64_t mAppendCount;$/;"	m	struct:KFS::BufferedLogWriter::Counters
mAppendCount	cc/libkfsClient/WriteAppender.h	/^        Counter mAppendCount;$/;"	m	struct:KFS::WriteAppender::Stats
mAppendErrorCount	cc/chunk/AtomicRecordAppender.h	/^        Counter mAppendErrorCount;$/;"	m	struct:KFS::AtomicRecordAppendManager::Counters
mAppendLength	cc/libkfsClient/WriteAppender.cc	/^    int                     mAppendLength;$/;"	m	class:KFS::WriteAppender::Impl	file:
mAppendRequestBytes	cc/chunk/ClientManager.h	/^        Counter mAppendRequestBytes;$/;"	m	struct:KFS::ClientManager::Counters
mAppendRequestCount	cc/chunk/ClientManager.h	/^        Counter mAppendRequestCount;$/;"	m	struct:KFS::ClientManager::Counters
mAppendRequestErrors	cc/chunk/ClientManager.h	/^        Counter mAppendRequestErrors;$/;"	m	struct:KFS::ClientManager::Counters
mAppendRequestTimeMicroSecs	cc/chunk/ClientManager.h	/^        Counter mAppendRequestTimeMicroSecs;$/;"	m	struct:KFS::ClientManager::Counters
mAppendWaitCount	cc/common/BufferedLogWriter.h	/^        int64_t mAppendWaitCount;$/;"	m	struct:KFS::BufferedLogWriter::Counters
mAppendWaitMicroSecs	cc/common/BufferedLogWriter.h	/^        int64_t mAppendWaitMicroSecs;$/;"	m	struct:KFS::BufferedLogWriter::Counters
mAppenderAllocCount	cc/chunk/AtomicRecordAppender.h	/^        Counter mAppenderAllocCount;$/;"	m	struct:KFS::AtomicRecordAppendManager::Counters
mAppenderAllocErrorCount	cc/chunk/AtomicRecordAppender.h	/^        Counter mAppenderAllocErrorCount;$/;"	m	struct:KFS::AtomicRecordAppendManager::Counters
mAppenderAllocMasterCount	cc/chunk/AtomicRecordAppender.h	/^        Counter mAppenderAllocMasterCount;$/;"	m	struct:KFS::AtomicRecordAppendManager::Counters
mAppenders	cc/chunk/AtomicRecordAppender.h	/^    ARAMap                mAppenders;$/;"	m	class:KFS::AtomicRecordAppendManager
mAppenders	cc/libkfsClient/KfsProtocolWorker.cc	/^    Appenders         mAppenders;$/;"	m	class:KFS::KfsProtocolWorker::Impl	file:
mAppendersIt	cc/libkfsClient/KfsProtocolWorker.cc	/^        Appenders::iterator mAppendersIt;$/;"	m	class:KFS::KfsProtocolWorker::Impl::Appender	file:
mAppendersWithWidCount	cc/chunk/AtomicRecordAppender.h	/^    int64_t               mAppendersWithWidCount;$/;"	m	class:KFS::AtomicRecordAppendManager
mArgs	cc/chunk/ChunkServer_main.cc	/^    char** mArgs;$/;"	m	class:Restarter	file:
mArray	cc/chunk/ChunkManager.h	/^                    char  mArray[sizeof(std::list<void*>::iterator)];$/;"	m	struct:KFS::ChunkManager::PendingWrites::OpListEntry::__anon4
mAssignMasterByIpFlag	cc/meta/LayoutManager.h	/^                bool   mAssignMasterByIpFlag;$/;"	m	class:KFS::LayoutManager
mAsyncWrites	cc/libkfsClient/KfsClientInt.h	/^    std::vector<AsyncWriteReq *> mAsyncWrites;$/;"	m	class:KFS::KfsClientImpl
mAsyncer	cc/libkfsClient/KfsAsyncRW.h	/^        Asyncer *mAsyncer;$/;"	m	class:KFS::AsyncWorker
mAsyncer	cc/libkfsClient/KfsClientInt.h	/^    Asyncer mAsyncer;$/;"	m	class:KFS::KfsClientImpl
mAvail	cc/libkfsIO/BufferedSocket.h	/^    int mAvail;$/;"	m	class:KFS::BufferedSocket
mAvgSpaceUtil	cc/emulator/LayoutEmulator.h	/^        double mAvgSpaceUtil;$/;"	m	class:KFS::LayoutEmulator
mAvgSpaceUtil	cc/rebalancer/rebalancer.h	/^        double mAvgSpaceUtil;$/;"	m	class:KFS::Rebalancer
mBadChunkHeaderErrorCount	cc/chunk/ChunkManager.h	/^        Counter mBadChunkHeaderErrorCount;$/;"	m	struct:KFS::ChunkManager::Counters
mBadRequestCount	cc/chunk/ClientManager.h	/^        Counter mBadRequestCount;$/;"	m	struct:KFS::ClientManager::Counters
mBadRequestHeaderCount	cc/chunk/ClientManager.h	/^        Counter mBadRequestHeaderCount;$/;"	m	struct:KFS::ClientManager::Counters
mBeginMakeChunkStableOp	cc/chunk/AtomicRecordAppender.cc	/^    BeginMakeChunkStableOp* mBeginMakeChunkStableOp;$/;"	m	class:KFS::AtomicRecordAppender	file:
mBeginMakeStableCount	cc/chunk/AtomicRecordAppender.h	/^        Counter mBeginMakeStableCount;$/;"	m	struct:KFS::AtomicRecordAppendManager::Counters
mBeginMakeStableErrorCount	cc/chunk/AtomicRecordAppender.h	/^        Counter mBeginMakeStableErrorCount;$/;"	m	struct:KFS::AtomicRecordAppendManager::Counters
mBlockSize	cc/qcdio/qcdiskqueue.cpp	/^    int             mBlockSize;$/;"	m	class:QCDiskQueue::Queue	file:
mBuf	cc/libkfsIO/IOBuffer.h	/^    BList mBuf;$/;"	m	class:KFS::IOBuffer
mBuf0Ptr	cc/common/BufferedLogWriter.cc	/^    char* const  mBuf0Ptr;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mBuf1Ptr	cc/common/BufferedLogWriter.cc	/^    char* const  mBuf1Ptr;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mBufFrontPadding	cc/chunk/AtomicRecordAppender.cc	/^    int                     mBufFrontPadding;$/;"	m	class:KFS::AtomicRecordAppender	file:
mBufPtr	cc/common/BufferedLogWriter.cc	/^    char*        mBufPtr;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mBufSize	cc/common/BufferedLogWriter.cc	/^    int          mBufSize;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mBufSizeShift	cc/qcdio/qciobufferpool.cpp	/^    int          mBufSizeShift;$/;"	m	class:QCIoBufferPool::Partition	file:
mBufWaitedCount	cc/common/BufferedLogWriter.cc	/^    Count        mBufWaitedCount;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mBufWaitersCount	cc/common/BufferedLogWriter.cc	/^    Count        mBufWaitersCount;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mBuffer	cc/chunk/AtomicRecordAppender.cc	/^    IOBuffer                mBuffer;$/;"	m	class:KFS::AtomicRecordAppender	file:
mBuffer	cc/libkfsClient/WriteAppender.cc	/^    IOBuffer                mBuffer;$/;"	m	class:KFS::WriteAppender::Impl	file:
mBuffer	cc/libkfsIO/BufferedSocket.h	/^    char mBuffer[BUF_SIZE];$/;"	m	class:KFS::BufferedSocket
mBufferAllocator	cc/chunk/DiskIo.cc	/^    BufferAllocator       mBufferAllocator;$/;"	m	class:KFS::DiskIoQueues	file:
mBufferCompactionCount	cc/libkfsClient/WriteAppender.h	/^        Counter mBufferCompactionCount;$/;"	m	struct:KFS::WriteAppender::Stats
mBufferCount	cc/qcdio/qcdiskqueue.cpp	/^        int              mBufferCount;$/;"	m	class:QCDiskQueue::Queue::BuffersIterator	file:
mBufferCount	cc/qcdio/qcdiskqueue.cpp	/^        int           mBufferCount;$/;"	m	class:QCDiskQueue::Queue::Request	file:
mBufferLimitRatio	cc/chunk/AtomicRecordAppender.h	/^    double                mBufferLimitRatio;$/;"	m	class:KFS::AtomicRecordAppendManager
mBufferManager	cc/chunk/DiskIo.cc	/^    BufferManager         mBufferManager;$/;"	m	class:KFS::DiskIoQueues	file:
mBufferManagerMaxRatio	cc/chunk/DiskIo.cc	/^    const double          mBufferManagerMaxRatio;$/;"	m	class:KFS::DiskIoQueues	file:
mBufferPool	cc/chunk/DiskIo.cc	/^        QCIoBufferPool mBufferPool;$/;"	m	class:KFS::DiskIoQueues::BufferAllocator	file:
mBufferPool	cc/meta/metaserver_main.cc	/^    QCIoBufferPool mBufferPool;$/;"	m	class:BufferAllocator	file:
mBufferPoolBufferSize	cc/chunk/DiskIo.cc	/^    const int             mBufferPoolBufferSize;$/;"	m	class:KFS::DiskIoQueues	file:
mBufferPoolLockMemoryFlag	cc/chunk/DiskIo.cc	/^    const int             mBufferPoolLockMemoryFlag;$/;"	m	class:KFS::DiskIoQueues	file:
mBufferPoolPartitionBufferCount	cc/chunk/DiskIo.cc	/^    const int             mBufferPoolPartitionBufferCount;$/;"	m	class:KFS::DiskIoQueues	file:
mBufferPoolPartitionCount	cc/chunk/DiskIo.cc	/^    const int             mBufferPoolPartitionCount;$/;"	m	class:KFS::DiskIoQueues	file:
mBufferPoolPtr	cc/chunk/BufferManager.h	/^    QCIoBufferPool* mBufferPoolPtr;$/;"	m	class:KFS::BufferManager
mBufferPoolPtr	cc/qcdio/qcdiskqueue.cpp	/^    QCIoBufferPool* mBufferPoolPtr;$/;"	m	class:QCDiskQueue::Queue	file:
mBufferPtr	cc/libkfsClient/KfsNetClient.cc	/^        IOBuffer* mBufferPtr;$/;"	m	struct:KFS::KfsNetClient::Impl::OpQueueEntry	file:
mBufferPtr	cc/libkfsClient/KfsProtocolWorker.h	/^        void*        mBufferPtr;$/;"	m	class:KFS::KfsProtocolWorker::Request
mBufferSize	cc/qcdio/qciobufferpool.h	/^    int        mBufferSize;$/;"	m	class:QCIoBufferPool
mBuffersPtr	cc/qcdio/qcdiskqueue.cpp	/^    char**          mBuffersPtr;$/;"	m	class:QCDiskQueue::Queue	file:
mBufsPtr	cc/qcdio/qcunittest.cpp	/^        char** const    mBufsPtr;$/;"	m	class:QCDiskQueueTest::Iterator	file:
mByteCount	cc/chunk/BufferManager.h	/^        ByteCount      mByteCount;$/;"	m	class:KFS::BufferManager::Client
mByteCount	cc/libkfsIO/IOBuffer.h	/^    int   mByteCount;$/;"	m	class:KFS::IOBuffer
mBytesReserved	cc/chunk/AtomicRecordAppender.cc	/^        size_t   mBytesReserved;$/;"	m	struct:KFS::AtomicRecordAppender::WIdState	file:
mBytesReserved	cc/chunk/AtomicRecordAppender.cc	/^    size_t                  mBytesReserved;$/;"	m	class:KFS::AtomicRecordAppender	file:
mBytesSentInRound	cc/libkfsClient/KfsAsyncRW.h	/^        int mBytesSentInRound;$/;"	m	class:KFS::AsyncWriteWorker
mCSGracefulRestartAppendWithWidTimeout	cc/meta/LayoutManager.h	/^                int64_t mCSGracefulRestartAppendWithWidTimeout;$/;"	m	class:KFS::LayoutManager
mCSGracefulRestartTimeout	cc/meta/LayoutManager.h	/^		int64_t mCSGracefulRestartTimeout;$/;"	m	class:KFS::LayoutManager
mCSToRestartCount	cc/meta/LayoutManager.h	/^		int     mCSToRestartCount;$/;"	m	class:KFS::LayoutManager
mCallbackObj	cc/libkfsIO/DiskConnection.h	/^    KfsCallbackObj	*mCallbackObj;$/;"	m	class:KFS::DiskConnection
mCallbackObj	cc/libkfsIO/Event.h	/^    KfsCallbackObj	*mCallbackObj;$/;"	m	class:KFS::Event
mCallbackObj	cc/libkfsIO/NetConnection.h	/^    KfsCallbackObj	*mCallbackObj;$/;"	m	class:KFS::NetConnection
mCallbackObjPtr	cc/chunk/DiskIo.h	/^    KfsCallbackObj* const  mCallbackObjPtr;$/;"	m	class:KFS::DiskIo
mCanBeChunkMaster	cc/meta/ChunkServer.h	/^		bool mCanBeChunkMaster;$/;"	m	class:KFS::ChunkServer
mCancelFlag	cc/chunk/Replicator.h	/^    bool mCancelFlag;$/;"	m	class:KFS::Replicator
mCanceledFlag	cc/libkfsClient/WriteAppender.cc	/^    bool                    mCanceledFlag;$/;"	m	class:KFS::WriteAppender::Impl	file:
mCheckpointIntervalSecs	cc/chunk/ChunkManager.h	/^    int mCheckpointIntervalSecs;$/;"	m	class:KFS::ChunkManager
mChecksum	cc/meta/LayoutManager.h	/^		uint32_t mChecksum;$/;"	m	struct:KFS::PendingMakeStableEntry
mChecksumErrorCount	cc/chunk/AtomicRecordAppender.h	/^        Counter mChecksumErrorCount;$/;"	m	struct:KFS::AtomicRecordAppendManager::Counters
mChunkAllocCount	cc/libkfsClient/WriteAppender.h	/^        Counter mChunkAllocCount;$/;"	m	struct:KFS::WriteAppender::Stats
mChunkChecksum	cc/chunk/AtomicRecordAppender.cc	/^    uint32_t                mChunkChecksum;$/;"	m	class:KFS::AtomicRecordAppender	file:
mChunkDirLostCount	cc/chunk/ChunkManager.h	/^        Counter mChunkDirLostCount;$/;"	m	struct:KFS::ChunkManager::Counters
mChunkDirs	cc/chunk/ChunkManager.h	/^    std::vector<ChunkDirInfo_t> mChunkDirs;$/;"	m	class:KFS::ChunkManager
mChunkDirsCheckIntervalSecs	cc/chunk/ChunkManager.h	/^    int              mChunkDirsCheckIntervalSecs;$/;"	m	class:KFS::ChunkManager
mChunkFileHandle	cc/chunk/AtomicRecordAppender.cc	/^    DiskIo::FilePtr         mChunkFileHandle;$/;"	m	class:KFS::AtomicRecordAppender	file:
mChunkId	cc/chunk/AtomicRecordAppender.cc	/^    const kfsChunkId_t      mChunkId;$/;"	m	class:KFS::AtomicRecordAppender	file:
mChunkId	cc/chunk/Replicator.h	/^    kfsChunkId_t mChunkId;$/;"	m	class:KFS::Replicator
mChunkIdIt	cc/chunk/ChunkManager.h	/^            ChunkIdMap::iterator  mChunkIdIt;$/;"	m	struct:KFS::ChunkManager::PendingWrites::LruEntry
mChunkIds	cc/chunk/ChunkManager.h	/^        ChunkIdMap mChunkIds;$/;"	m	class:KFS::ChunkManager::PendingWrites
mChunkInfoLists	cc/chunk/ChunkManager.h	/^    ChunkInfoHandle* mChunkInfoLists[kChunkInfoHandleListCount];$/;"	m	class:KFS::ChunkManager
mChunkManager	cc/chunk/ChunkManager.cc	/^    ChunkManager	*mChunkManager;$/;"	m	class:KFS::ChunkManager::ChunkManagerTimeoutImpl	file:
mChunkManagerTimeoutImpl	cc/chunk/ChunkManager.h	/^    ChunkManagerTimeoutImpl	*mChunkManagerTimeoutImpl;$/;"	m	class:KFS::ChunkManager
mChunkMetadataOp	cc/chunk/Replicator.h	/^    GetChunkMetadataOp mChunkMetadataOp;$/;"	m	class:KFS::Replicator
mChunkReplicationCandidates	cc/meta/LayoutManager.h	/^                ReplicationCandidates mChunkReplicationCandidates;$/;"	m	class:KFS::LayoutManager
mChunkReplicator	cc/meta/LayoutManager.h	/^		ChunkReplicator mChunkReplicator;$/;"	m	class:KFS::LayoutManager
mChunkReservationThreshold	cc/meta/LayoutManager.h	/^                int    mChunkReservationThreshold;$/;"	m	class:KFS::LayoutManager
mChunkServer	cc/libkfsClient/WriteAppender.cc	/^    ChunkServer             mChunkServer;$/;"	m	class:KFS::WriteAppender::Impl	file:
mChunkServerFactory	cc/meta/NetDispatch.h	/^        ChunkServerFactory *mChunkServerFactory; \/\/!< creates chunk servers when they connect$/;"	m	class:KFS::NetDispatch
mChunkServerHostname	cc/chunk/MetaServerSM.h	/^    std::string mChunkServerHostname;$/;"	m	class:KFS::MetaServerSM
mChunkServerInitialSeqNum	cc/libkfsClient/KfsProtocolWorker.cc	/^    int64_t           mChunkServerInitialSeqNum;$/;"	m	class:KFS::KfsProtocolWorker::Impl	file:
mChunkServerPort	cc/chunk/MetaServerSM.h	/^    int mChunkServerPort;$/;"	m	class:KFS::MetaServerSM
mChunkServers	cc/meta/ChunkServerFactory.h	/^                list<ChunkServerPtr> mChunkServers;$/;"	m	class:KFS::ChunkServerFactory
mChunkServers	cc/meta/LayoutManager.h	/^                std::vector <ChunkServerPtr> mChunkServers;$/;"	m	class:KFS::LayoutManager
mChunkServers	cc/rebalancer/rebalancer.h	/^        std::vector<ChunkServerPtr> mChunkServers;$/;"	m	class:KFS::Rebalancer
mChunkServersProps	cc/meta/LayoutManager.h	/^		Properties mChunkServersProps;$/;"	m	class:KFS::LayoutManager
mChunkServersPropsFileName	cc/meta/LayoutManager.h	/^		string     mChunkServersPropsFileName;$/;"	m	class:KFS::LayoutManager
mChunkSize	cc/chunk/AtomicRecordAppender.cc	/^    off_t                   mChunkSize; \/\/ To report to meta server$/;"	m	class:KFS::AtomicRecordAppender	file:
mChunkSize	cc/chunk/Replicator.h	/^    size_t mChunkSize;$/;"	m	class:KFS::Replicator
mChunkSize	cc/emulator/LayoutEmulator.h	/^        ChunkSizeMap mChunkSize;$/;"	m	class:KFS::LayoutEmulator
mChunkTable	cc/chunk/ChunkManager.h	/^    CMap   mChunkTable;$/;"	m	class:KFS::ChunkManager
mChunkToServerMap	cc/meta/LayoutManager.h	/^                CSMap mChunkToServerMap;$/;"	m	class:KFS::LayoutManager
mChunkVersion	cc/chunk/AtomicRecordAppender.cc	/^    const int64_t           mChunkVersion;$/;"	m	class:KFS::AtomicRecordAppender	file:
mChunkVersion	cc/chunk/Replicator.h	/^    kfsSeq_t mChunkVersion;$/;"	m	class:KFS::Replicator
mChunkVersion	cc/meta/LayoutManager.h	/^		seq_t    mChunkVersion;$/;"	m	struct:KFS::PendingMakeStableEntry
mChunkWritesIt	cc/chunk/ChunkManager.h	/^            ChunkWrites::iterator mChunkWritesIt;$/;"	m	struct:KFS::ChunkManager::PendingWrites::LruEntry
mChunks	cc/emulator/ChunkServerEmulator.h	/^        std::set<kfsChunkId_t> mChunks;$/;"	m	class:KFS::ChunkServerEmulator
mChunks	cc/rebalancer/rebalancer.h	/^        std::set<kfsChunkId_t> mChunks;$/;"	m	class:KFS::ChunkServer
mChunksToMove	cc/meta/ChunkServer.h	/^		ChunkIdSet mChunksToMove;$/;"	m	class:KFS::ChunkServer
mChunksWithLeases	cc/meta/LayoutManager.h	/^		CRCandidateSet mChunksWithLeases;$/;"	m	class:KFS::LayoutManager
mChunksWithOneReplicaStats	cc/meta/LayoutManager.h	/^		Counter *mChunksWithOneReplicaStats;$/;"	m	class:KFS::LayoutManager
mCleanUpSec	cc/chunk/AtomicRecordAppender.h	/^    int                   mCleanUpSec;$/;"	m	class:KFS::AtomicRecordAppendManager
mCleanupList	cc/libkfsClient/KfsProtocolWorker.cc	/^    Appender*         mCleanupList[1];$/;"	m	class:KFS::KfsProtocolWorker::Impl	file:
mClientAcceptPort	cc/chunk/ChunkServer.h	/^    int mClientAcceptPort;$/;"	m	class:KFS::ChunkServer
mClientCount	cc/chunk/ClientManager.h	/^        Counter mClientCount;$/;"	m	struct:KFS::ClientManager::Counters
mClientListPtr	cc/qcdio/qciobufferpool.h	/^    Client*    mClientListPtr[1];$/;"	m	class:QCIoBufferPool
mClientManager	cc/meta/NetDispatch.h	/^        ClientManager *mClientManager; \/\/!< tracks the connected clients$/;"	m	class:KFS::NetDispatch
mClientProtoVers	cc/meta/ClientSM.h	/^	int		mClientProtoVers;$/;"	m	class:KFS::ClientSM
mClients	cc/libkfsClient/KfsClient.h	/^    std::vector<KfsClientPtr> mClients;$/;"	m	class:KFS::KfsClientFactory
mClientsWihtBuffersCount	cc/chunk/BufferManager.h	/^    int             mClientsWihtBuffersCount;$/;"	m	class:KFS::BufferManager
mCloseEmptyWidStateSec	cc/chunk/AtomicRecordAppender.h	/^    int                   mCloseEmptyWidStateSec;$/;"	m	class:KFS::AtomicRecordAppendManager
mCloseFlag	cc/common/BufferedLogWriter.cc	/^    bool         mCloseFlag;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mCloseOp	cc/libkfsClient/WriteAppender.cc	/^    CloseOp                 mCloseOp;$/;"	m	class:KFS::WriteAppender::Impl	file:
mCloseReqPtr	cc/libkfsClient/KfsProtocolWorker.cc	/^        Request*            mCloseReqPtr;$/;"	m	class:KFS::KfsProtocolWorker::Impl::Appender	file:
mClosingFlag	cc/libkfsClient/WriteAppender.cc	/^    bool                    mClosingFlag;$/;"	m	class:KFS::WriteAppender::Impl	file:
mClusterKey	cc/chunk/MetaServerSM.h	/^    std::string mClusterKey;$/;"	m	class:KFS::MetaServerSM
mCmdSeq	cc/chunk/MetaServerSM.h	/^    kfsSeq_t mCmdSeq;$/;"	m	class:KFS::MetaServerSM
mCmdSeqNum	cc/libkfsClient/KfsClientInt.h	/^    kfsSeq_t	mCmdSeqNum;$/;"	m	class:KFS::KfsClientImpl
mCnt	cc/meta/ClientSM.cc	/^		int64_t mCnt;$/;"	m	struct:RequestStatsGatherer::Counter	file:
mCommitAckServers	cc/chunk/AtomicRecordAppender.cc	/^    const std::string       mCommitAckServers;$/;"	m	class:KFS::AtomicRecordAppender	file:
mCommitOffsetAckSent	cc/chunk/AtomicRecordAppender.cc	/^    off_t                   mCommitOffsetAckSent;$/;"	m	class:KFS::AtomicRecordAppender	file:
mCompleted	cc/libkfsIO/DiskManager.h	/^    MetaQueue<DiskEvent_t>		mCompleted;$/;"	m	class:KFS::DiskManager
mCompletionCode	cc/chunk/DiskIo.h	/^    QCDiskQueue::Error     mCompletionCode;$/;"	m	class:KFS::DiskIo
mCompletionPtr	cc/libkfsClient/WriteAppender.cc	/^    Completion*             mCompletionPtr;$/;"	m	class:KFS::WriteAppender::Impl	file:
mCompletionRequestId	cc/chunk/DiskIo.h	/^    QCDiskQueue::RequestId mCompletionRequestId;$/;"	m	class:KFS::DiskIo
mCompletionRunningCount	cc/qcdio/qcdiskqueue.cpp	/^    int             mCompletionRunningCount;$/;"	m	class:QCDiskQueue::Queue	file:
mCompletionStatus	cc/qcdio/qcdiskqueue.cpp	/^    CompletionStatus      mCompletionStatus;$/;"	m	class:QCDiskQueue::RequestWaiter	file:
mCond	cc/libkfsClient/KfsProtocolWorker.cc	/^        QCCondVar    mCond;$/;"	m	class:KFS::KfsProtocolWorker::Impl::SyncRequest	file:
mCond	cc/qcdio/qcmutex.h	/^    pthread_cond_t mCond;$/;"	m	class:QCCondVar
mConn	cc/libkfsClient/KfsAsyncRW.h	/^        NetConnectionPtr mConn;$/;"	m	class:KFS::AsyncWorker
mConn	cc/libkfsIO/Acceptor.h	/^    NetConnectionPtr      mConn;$/;"	m	class:KFS::Acceptor
mConn	cc/libkfsIO/NetManager.h	/^            NetConnectionPtr mConn;$/;"	m	struct:KFS::NetManager::Timer::Handler
mConnId	cc/libkfsIO/NetErrorSimulator.cc	/^        std::string              mConnId;$/;"	m	struct:KFS::NetErrorSimulator::ConnEntry	file:
mConnMap	cc/libkfsIO/NetErrorSimulator.cc	/^    ConnMap                   mConnMap;$/;"	m	class:KFS::NetErrorSimulator	file:
mConnPtr	cc/libkfsClient/KfsNetClient.cc	/^    NetConnectionPtr  mConnPtr;$/;"	m	class:KFS::KfsNetClient::Impl	file:
mConnectCount	cc/chunk/MetaServerSM.h	/^        Counter mConnectCount;$/;"	m	struct:KFS::MetaServerSM::Counters
mConnectCount	cc/libkfsClient/KfsNetClient.h	/^        Counter mConnectCount;$/;"	m	struct:KFS::KfsNetClient::Stats
mConnectFailureCount	cc/libkfsClient/KfsNetClient.h	/^        Counter mConnectFailureCount;$/;"	m	struct:KFS::KfsNetClient::Stats
mConnectedTime	cc/chunk/MetaServerSM.h	/^    time_t mConnectedTime;$/;"	m	class:KFS::MetaServerSM
mConnectionIdleTimeoutCount	cc/libkfsClient/KfsNetClient.h	/^        Counter mConnectionIdleTimeoutCount;$/;"	m	struct:KFS::KfsNetClient::Stats
mConnectionsCount	cc/libkfsIO/NetManager.h	/^    int                 mConnectionsCount;$/;"	m	class:KFS::NetManager
mConsumer	cc/libkfsIO/IOBuffer.h	/^    char             *mConsumer;$/;"	m	class:KFS::IOBufferData
mContentLength	cc/libkfsClient/KfsNetClient.cc	/^    int               mContentLength;$/;"	m	class:KFS::KfsNetClient::Impl	file:
mCorruptedChunksCount	cc/chunk/ChunkManager.h	/^        Counter mCorruptedChunksCount;$/;"	m	struct:KFS::ChunkManager::Counters
mCount	cc/libkfsIO/Counter.h	/^    uint64_t mCount;$/;"	m	class:KFS::Counter
mCount	cc/libkfsIO/NetErrorSimulator.cc	/^        Random::result_type      mCount;$/;"	m	struct:KFS::NetErrorSimulator::ConnEntry	file:
mCount	cc/qcdio/qcthread.cpp	/^    int       mCount;$/;"	m	class:QCStartedThreadList	file:
mCounters	cc/chunk/AtomicRecordAppender.h	/^    Counters              mCounters;$/;"	m	class:KFS::AtomicRecordAppendManager
mCounters	cc/chunk/BufferManager.h	/^    Counters        mCounters;$/;"	m	class:KFS::BufferManager
mCounters	cc/chunk/ChunkManager.h	/^    Counters mCounters;$/;"	m	class:KFS::ChunkManager
mCounters	cc/chunk/ClientManager.h	/^    Counters mCounters;$/;"	m	class:KFS::ClientManager
mCounters	cc/chunk/DiskIo.cc	/^    Counters              mCounters;$/;"	m	class:KFS::DiskIoQueues	file:
mCounters	cc/chunk/MetaServerSM.h	/^    Counters mCounters;$/;"	m	class:KFS::MetaServerSM
mCounters	cc/libkfsIO/Counter.h	/^    CounterMap  mCounters;$/;"	m	class:KFS::CounterManager
mCpuLoadAvg	cc/meta/ChunkServer.h	/^		double mCpuLoadAvg;$/;"	m	class:KFS::ChunkServer
mCrashOnErrorFlag	cc/chunk/DiskIo.cc	/^    const bool            mCrashOnErrorFlag;$/;"	m	class:KFS::DiskIoQueues	file:
mCreateOp	cc/libkfsClient/WriteAppender.cc	/^    CreateOp                mCreateOp;$/;"	m	class:KFS::WriteAppender::Impl	file:
mCur	cc/libkfsIO/IOBuffer.h	/^        iterator  mCur;$/;"	m	class:KFS::IOBuffer::StreamBuffer
mCurBufSize	cc/libkfsClient/KfsProtocolWorker.cc	/^        size_t mCurBufSize;$/;"	m	class:KFS::KfsProtocolWorker::Impl::DoNotDeallocate	file:
mCurConnection	cc/libkfsIO/NetManager.h	/^    NetConnection*      mCurConnection;$/;"	m	class:KFS::NetManager
mCurCount	cc/qcdio/qcdiskqueue.cpp	/^        int              mCurCount;$/;"	m	class:QCDiskQueue::Queue::BuffersIterator	file:
mCurLogWatedTime	cc/common/BufferedLogWriter.cc	/^    Time         mCurLogWatedTime;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mCurOp	cc/chunk/ClientSM.h	/^    KfsOp*                     mCurOp;$/;"	m	class:KFS::ClientSM
mCurOpPtr	cc/libkfsClient/WriteAppender.cc	/^    KfsOp*                  mCurOpPtr;$/;"	m	class:KFS::WriteAppender::Impl	file:
mCurPos	cc/libkfsClient/KfsProtocolWorker.cc	/^        int64_t             mCurPos;$/;"	m	class:KFS::KfsProtocolWorker::Impl::Appender	file:
mCurPtr	cc/common/BufferedLogWriter.cc	/^    char*        mCurPtr;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mCurPtr	cc/qcdio/qcdiskqueue.cpp	/^        char**           mCurPtr;$/;"	m	class:QCDiskQueue::Queue::BuffersIterator	file:
mCurPtr	cc/qcdio/qcunittest.cpp	/^        char**          mCurPtr;$/;"	m	class:QCDiskQueueTest::Iterator	file:
mCurTimerWheelSlot	cc/libkfsIO/NetManager.h	/^    int                 mCurTimerWheelSlot;$/;"	m	class:KFS::NetManager
mCurWritten	cc/common/BufferedLogWriter.cc	/^    Count        mCurWritten;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mCurrentSlot	cc/libkfsIO/EventManager.h	/^    int			mCurrentSlot;$/;"	m	class:KFS::EventManager
mCwd	cc/chunk/ChunkServer_main.cc	/^    char*  mCwd;$/;"	m	class:Restarter	file:
mCwd	cc/libkfsClient/KfsClientInt.h	/^    std::string	mCwd;$/;"	m	class:KFS::KfsClientImpl
mData	cc/libkfsIO/IOBuffer.h	/^    IOBufferBlockPtr mData;$/;"	m	class:KFS::IOBufferData
mDataReceivedFlag	cc/libkfsClient/KfsNetClient.cc	/^    bool              mDataReceivedFlag;$/;"	m	class:KFS::KfsNetClient::Impl	file:
mDataSentFlag	cc/libkfsClient/KfsNetClient.cc	/^    bool              mDataSentFlag;$/;"	m	class:KFS::KfsNetClient::Impl	file:
mDebugChecksum	cc/libkfsIO/IOBuffer.h	/^    unsigned int mDebugChecksum;$/;"	m	class:KFS::IOBuffer
mDefaultClient	cc/libkfsClient/KfsClient.h	/^    KfsClientPtr mDefaultClient;$/;"	m	class:KFS::KfsClientFactory
mDefaultIoBufferSize	cc/libkfsClient/KfsClientInt.h	/^    size_t mDefaultIoBufferSize;$/;"	m	class:KFS::KfsClientImpl
mDefaultReadAheadSize	cc/libkfsClient/KfsClientInt.h	/^    size_t mDefaultReadAheadSize;$/;"	m	class:KFS::KfsClientImpl
mDefaultSpaceReservationSize	cc/libkfsClient/KfsProtocolWorker.cc	/^    const int         mDefaultSpaceReservationSize;$/;"	m	class:KFS::KfsProtocolWorker::Impl	file:
mDefaultSpaceReservationSize	cc/libkfsClient/WriteAppender.cc	/^    const int               mDefaultSpaceReservationSize;$/;"	m	class:KFS::WriteAppender::Impl	file:
mDeleteOldLogsFlag	cc/common/BufferedLogWriter.cc	/^    bool         mDeleteOldLogsFlag;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mDestructedFlag	cc/libkfsIO/Globals.h	/^            bool              mDestructedFlag;$/;"	m	struct:KFS::libkfsio::Globals_t
mDeviceId	cc/chunk/DiskIo.cc	/^    const unsigned long mDeviceId;$/;"	m	class:KFS::DiskQueue	file:
mDevpollFd	cc/qcdio/qcfdpoll.cpp	/^    int            mDevpollFd;$/;"	m	class:QCFdPoll::Impl	file:
mDirLostChunkCount	cc/chunk/ChunkManager.h	/^        Counter mDirLostChunkCount;$/;"	m	struct:KFS::ChunkManager::Counters
mDisabled	cc/libkfsIO/ITimeout.h	/^    bool        mDisabled;$/;"	m	class:KFS::ITimeout
mDiskClearOverloadedMinFreeBufferCount	cc/chunk/DiskIo.cc	/^    const int             mDiskClearOverloadedMinFreeBufferCount;$/;"	m	class:KFS::DiskIoQueues	file:
mDiskClearOverloadedPendingRequestCount	cc/chunk/DiskIo.cc	/^    const int             mDiskClearOverloadedPendingRequestCount;$/;"	m	class:KFS::DiskIoQueues	file:
mDiskClearOverloadedPendingWriteByteCount	cc/chunk/DiskIo.cc	/^    const int64_t         mDiskClearOverloadedPendingWriteByteCount;$/;"	m	class:KFS::DiskIoQueues	file:
mDiskEvents	cc/libkfsIO/DiskManager.h	/^    std::list<DiskEventPtr>		mDiskEvents;$/;"	m	class:KFS::DiskManager
mDiskIO	cc/libkfsIO/DiskConnection.h	/^    std::deque<DiskIORequest>	mDiskIO;$/;"	m	class:KFS::DiskConnection
mDiskOverloaded	cc/libkfsIO/NetManager.h	/^    bool		mDiskOverloaded;$/;"	m	class:KFS::NetManager
mDiskOverloadedMinFreeBufferCount	cc/chunk/DiskIo.cc	/^    const int             mDiskOverloadedMinFreeBufferCount;$/;"	m	class:KFS::DiskIoQueues	file:
mDiskOverloadedPendingRequestCount	cc/chunk/DiskIo.cc	/^    const int             mDiskOverloadedPendingRequestCount;$/;"	m	class:KFS::DiskIoQueues	file:
mDiskOverloadedPendingWriteByteCount	cc/chunk/DiskIo.cc	/^    const int64_t         mDiskOverloadedPendingWriteByteCount;$/;"	m	class:KFS::DiskIoQueues	file:
mDiskQueueMaxBuffersPerRequest	cc/chunk/DiskIo.cc	/^    const int             mDiskQueueMaxBuffersPerRequest;$/;"	m	class:KFS::DiskIoQueues	file:
mDiskQueueMaxEnqueueWaitNanoSec	cc/chunk/DiskIo.cc	/^    const DiskQueue::Time mDiskQueueMaxEnqueueWaitNanoSec;$/;"	m	class:KFS::DiskIoQueues	file:
mDiskQueueMaxQueueDepth	cc/chunk/DiskIo.cc	/^    const int             mDiskQueueMaxQueueDepth;$/;"	m	class:KFS::DiskIoQueues	file:
mDiskQueueThreadCount	cc/chunk/DiskIo.cc	/^    const int             mDiskQueueThreadCount;$/;"	m	class:KFS::DiskIoQueues	file:
mDiskQueuesPtr	cc/chunk/DiskIo.cc	/^    DiskQueue*            mDiskQueuesPtr[1];$/;"	m	class:KFS::DiskIoQueues	file:
mDispatchedOps	cc/chunk/MetaServerSM.h	/^    std::list<KfsOp *> mDispatchedOps;$/;"	m	class:KFS::MetaServerSM
mDispatchedOps	cc/chunk/RemoteSyncSM.h	/^    std::list<KfsOp *> mDispatchedOps;$/;"	m	class:KFS::RemoteSyncSM
mDispatchedReqs	cc/meta/ChunkServer.h	/^                DispatchedReqs mDispatchedReqs;$/;"	m	class:KFS::ChunkServer
mDoCompactionFlag	cc/qcdio/qcfdpoll.cpp	/^    bool           mDoCompactionFlag;$/;"	m	class:QCFdPoll::Impl	file:
mDoNotDeallocate	cc/libkfsClient/KfsProtocolWorker.cc	/^    DoNotDeallocate   mDoNotDeallocate;$/;"	m	class:KFS::KfsProtocolWorker::Impl	file:
mDoingRebalancePlanning	cc/emulator/LayoutEmulator.h	/^        bool mDoingRebalancePlanning;$/;"	m	class:KFS::LayoutEmulator
mDone	cc/chunk/Replicator.h	/^    bool mDone;$/;"	m	class:KFS::Replicator
mDoneCond	cc/qcdio/qcdiskqueue.cpp	/^    QCCondVar             mDoneCond;$/;"	m	class:QCDiskQueue::RequestWaiter	file:
mDoneCond	cc/qcdio/qcunittest.cpp	/^        QCCondVar mDoneCond;$/;"	m	class:QCDiskQueueTest::RequestWaiter	file:
mDoneFlag	cc/qcdio/qcdiskqueue.cpp	/^    bool                  mDoneFlag;$/;"	m	class:QCDiskQueue::RequestWaiter	file:
mDonePos	cc/libkfsClient/KfsProtocolWorker.cc	/^        int64_t             mDonePos;$/;"	m	class:KFS::KfsProtocolWorker::Impl::Appender	file:
mDown	cc/meta/ChunkServer.h	/^		bool mDown;$/;"	m	class:KFS::ChunkServer
mDownReason	cc/meta/ChunkServer.h	/^                string     mDownReason;$/;"	m	class:KFS::ChunkServer
mDownServers	cc/meta/LayoutManager.h	/^		DownServers mDownServers;$/;"	m	class:KFS::LayoutManager
mDrives	cc/rebalancer/rebalancer.h	/^        std::vector<DriveInfo> mDrives;$/;"	m	class:KFS::ChunkServer
mDroppedCount	cc/common/BufferedLogWriter.cc	/^    Count        mDroppedCount;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mDroppedCount	cc/common/BufferedLogWriter.h	/^        int64_t mDroppedCount;$/;"	m	struct:KFS::BufferedLogWriter::Counters
mDummyFd	cc/qcdio/qcfdpoll.cpp	/^    int            mDummyFd;$/;"	m	class:QCFdPoll::Impl	file:
mEnabledFlag	cc/chunk/BufferManager.h	/^    const bool      mEnabledFlag;$/;"	m	class:KFS::BufferManager
mEnd	cc/libkfsIO/IOBuffer.h	/^    char             *mEnd;$/;"	m	class:KFS::IOBufferData
mEndPtr	cc/common/BufferedLogWriter.cc	/^    char*        mEndPtr;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mEndPtr	cc/qcdio/qcunittest.cpp	/^        char** const    mEndPtr;$/;"	m	class:QCDiskQueueTest::Iterator	file:
mEnv	cc/chunk/ChunkServer_main.cc	/^    char** mEnv;$/;"	m	class:Restarter	file:
mEpollEventCount	cc/qcdio/qcfdpoll.cpp	/^    int                 mEpollEventCount;$/;"	m	class:QCFdPoll::Impl	file:
mEpollFd	cc/qcdio/qcfdpoll.cpp	/^    int                 mEpollFd;$/;"	m	class:QCFdPoll::Impl	file:
mErr	cc/meta/ClientSM.cc	/^		int64_t mErr;$/;"	m	struct:RequestStatsGatherer::Counter	file:
mError	cc/qcdio/qcdiskqueue.h	/^        Error     mError;$/;"	m	class:QCDiskQueue::EnqueueStatus
mError	cc/qcdio/qcdiskqueue.h	/^        Error mError;$/;"	m	class:QCDiskQueue::Status
mErrorCode	cc/libkfsClient/WriteAppender.cc	/^    int                     mErrorCode;$/;"	m	class:KFS::WriteAppender::Impl	file:
mEvacuatingChunks	cc/meta/ChunkServer.h	/^		ChunkIdSet mEvacuatingChunks;$/;"	m	class:KFS::ChunkServer
mEventData	cc/libkfsIO/Event.h	/^    void		*mEventData;$/;"	m	class:KFS::Event
mEventManager	cc/libkfsIO/EventManager.h	/^    EventManager		*mEventManager;$/;"	m	class:KFS::EventManagerTimeoutImpl
mEventManagerTimeoutImpl	cc/libkfsIO/EventManager.h	/^    EventManagerTimeoutImpl	*mEventManagerTimeoutImpl;$/;"	m	class:KFS::EventManager
mEventObserverPtr	cc/libkfsClient/KfsNetClient.cc	/^    EventObserver*    mEventObserverPtr;$/;"	m	class:KFS::KfsNetClient::Impl	file:
mEventStatus	cc/libkfsIO/Event.h	/^    EventStatus_t	mEventStatus;$/;"	m	class:KFS::Event
mEventsPtr	cc/qcdio/qcfdpoll.cpp	/^    struct epoll_event* mEventsPtr;$/;"	m	class:QCFdPoll::Impl	typeref:struct:QCFdPoll::Impl::epoll_event	file:
mExitOnRestartFlag	cc/chunk/ChunkServer_main.cc	/^    bool   mExitOnRestartFlag;$/;"	m	class:Restarter	file:
mExpirationTime	cc/libkfsIO/NetConnection.h	/^        time_t         mExpirationTime;$/;"	m	class:KFS::NetConnection::NetManagerEntry
mFailedReplicationStats	cc/meta/LayoutManager.h	/^		Counter *mFailedReplicationStats;$/;"	m	class:KFS::LayoutManager
mFd	cc/common/BufferedLogWriter.cc	/^    int          mFd;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mFd	cc/libkfsClient/KfsClientInt.h	/^    int            mFd;$/;"	m	class:KFS::PendingChunkRead
mFd	cc/libkfsClient/KfsPendingOp.h	/^    volatile int   mFd;$/;"	m	class:KFS::KfsPendingOp
mFd	cc/libkfsIO/FileHandle.h	/^        int mFd; \/\/ the underlying file pointer$/;"	m	struct:KFS::FileHandle_t
mFd	cc/libkfsIO/NetConnection.h	/^        int            mFd;$/;"	m	class:KFS::NetConnection::NetManagerEntry
mFdCount	cc/qcdio/qcdiskqueue.cpp	/^    int             mFdCount;$/;"	m	class:QCDiskQueue::Queue	file:
mFdCount	cc/qcdio/qcfdpoll.cpp	/^    int            mFdCount;$/;"	m	class:QCFdPoll::Impl	file:
mFdMap	cc/qcdio/qcfdpoll.cpp	/^    FdMap          mFdMap;$/;"	m	class:QCFdPoll::Impl	file:
mFdPtr	cc/qcdio/qcdiskqueue.cpp	/^    int*            mFdPtr;$/;"	m	class:QCDiskQueue::Queue	file:
mFile	cc/chunk/Logger.h	/^    std::ofstream mFile;$/;"	m	class:KFS::Logger
mFileCount	cc/qcdio/qcdiskqueue.cpp	/^    int             mFileCount;$/;"	m	class:QCDiskQueue::Queue	file:
mFileId	cc/chunk/Replicator.h	/^    kfsFileId_t mFileId;$/;"	m	class:KFS::Replicator
mFileId	cc/libkfsClient/KfsProtocolWorker.h	/^        FileId       mFileId;$/;"	m	class:KFS::KfsProtocolWorker::Request
mFileIdx	cc/chunk/DiskIo.h	/^        int        mFileIdx;$/;"	m	class:KFS::DiskIo::File
mFileIdx	cc/qcdio/qcdiskqueue.h	/^        FileIdx mFileIdx;$/;"	m	class:QCDiskQueue::OpenFileStatus
mFileInfoPtr	cc/qcdio/qcdiskqueue.cpp	/^    FileInfo*       mFileInfoPtr;$/;"	m	class:QCDiskQueue::Queue	file:
mFileInstance	cc/libkfsClient/KfsClientInt.h	/^    unsigned int mFileInstance;$/;"	m	class:KFS::KfsClientImpl
mFileInstance	cc/libkfsClient/KfsProtocolWorker.h	/^        FileInstance mFileInstance;$/;"	m	class:KFS::KfsProtocolWorker::Request
mFileName	cc/common/BufferedLogWriter.cc	/^    string       mFileName;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mFileName	cc/libkfsClient/WriteAppender.cc	/^    std::string             mFileName;$/;"	m	class:KFS::WriteAppender::Impl	file:
mFileNamePrefixes	cc/chunk/DiskIo.cc	/^    std::string         mFileNamePrefixes;$/;"	m	class:KFS::DiskQueue	file:
mFilePendingReqCountPtr	cc/qcdio/qcdiskqueue.cpp	/^    unsigned int*   mFilePendingReqCountPtr;$/;"	m	class:QCDiskQueue::Queue	file:
mFilePtr	cc/chunk/DiskIo.h	/^    FilePtr                mFilePtr;$/;"	m	class:KFS::DiskIo
mFileTable	cc/libkfsClient/KfsClientInt.h	/^    std::vector <FileTableEntry *> mFileTable;$/;"	m	class:KFS::KfsClientImpl
mFlushInterval	cc/common/BufferedLogWriter.cc	/^    Time         mFlushInterval;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mFlushIntervalSec	cc/chunk/AtomicRecordAppender.h	/^    int                   mFlushIntervalSec;$/;"	m	class:KFS::AtomicRecordAppendManager
mFlushLimit	cc/chunk/AtomicRecordAppender.h	/^    int                   mFlushLimit;$/;"	m	class:KFS::AtomicRecordAppendManager
mForGdbToFindNetManager	cc/libkfsIO/Globals.h	/^            NetManager*       mForGdbToFindNetManager;$/;"	m	struct:KFS::libkfsio::Globals_t
mForcedAllocationInterval	cc/libkfsClient/WriteAppender.cc	/^    int                     mForcedAllocationInterval;$/;"	m	class:KFS::WriteAppender::Impl	file:
mFreeCnt	cc/qcdio/qciobufferpool.cpp	/^    int          mFreeCnt;$/;"	m	class:QCIoBufferPool::Partition	file:
mFreeCnt	cc/qcdio/qciobufferpool.h	/^    int        mFreeCnt;$/;"	m	class:QCIoBufferPool
mFreeCount	cc/qcdio/qcdiskqueue.cpp	/^    int             mFreeCount;$/;"	m	class:QCDiskQueue::Queue	file:
mFreeFdHead	cc/qcdio/qcdiskqueue.cpp	/^    int             mFreeFdHead;$/;"	m	class:QCDiskQueue::Queue	file:
mFreeListPtr	cc/qcdio/qciobufferpool.cpp	/^    BufferIndex* mFreeListPtr;$/;"	m	class:QCIoBufferPool::Partition	file:
mFreeReqCond	cc/qcdio/qcdiskqueue.cpp	/^    QCCondVar       mFreeReqCond;$/;"	m	class:QCDiskQueue::Queue	file:
mFreeSyncRequests	cc/libkfsClient/KfsProtocolWorker.cc	/^    SyncRequest*      mFreeSyncRequests[1];$/;"	m	class:KFS::KfsProtocolWorker::Impl	file:
mGeneration	cc/qcdio/qcfdpoll.cpp	/^    size_t         mGeneration;$/;"	m	class:QCFdPoll::Impl	file:
mGetOpStatusCount	cc/chunk/AtomicRecordAppender.h	/^        Counter mGetOpStatusCount;$/;"	m	struct:KFS::AtomicRecordAppendManager::Counters
mGetOpStatusErrorCount	cc/chunk/AtomicRecordAppender.h	/^        Counter mGetOpStatusErrorCount;$/;"	m	struct:KFS::AtomicRecordAppendManager::Counters
mGetOpStatusKnownCount	cc/chunk/AtomicRecordAppender.h	/^        Counter mGetOpStatusKnownCount;$/;"	m	struct:KFS::AtomicRecordAppendManager::Counters
mGetRecordAppendOpStatusIndex	cc/libkfsClient/WriteAppender.cc	/^    unsigned int            mGetRecordAppendOpStatusIndex;$/;"	m	class:KFS::WriteAppender::Impl	file:
mGetRecordAppendOpStatusOp	cc/libkfsClient/WriteAppender.cc	/^    GetRecordAppendOpStatus mGetRecordAppendOpStatusOp;$/;"	m	class:KFS::WriteAppender::Impl	file:
mGetRequestCount	cc/chunk/BufferManager.h	/^    RequestCount    mGetRequestCount;$/;"	m	class:KFS::BufferManager
mHandle	cc/libkfsIO/DiskConnection.h	/^    FileHandlePtr	mHandle;$/;"	m	class:KFS::DiskConnection
mHandler	cc/libkfsIO/NetManager.h	/^        Handler mHandler;$/;"	m	class:KFS::NetManager::Timer
mHasChecksum	cc/meta/LayoutManager.h	/^		bool     mHasChecksum;$/;"	m	struct:KFS::PendingMakeStableEntry
mHead	cc/libkfsIO/BufferedSocket.h	/^    char *mHead;$/;"	m	class:KFS::BufferedSocket
mHead	cc/qcdio/qcthread.cpp	/^    QCThread  mHead;$/;"	m	class:QCStartedThreadList	file:
mHeadPtr	cc/qcdio/qcdllist.h	/^        NodeT*const* const mHeadPtr;$/;"	m	class:QCDLList::Iterator
mHeartbeatProperties	cc/meta/ChunkServer.h	/^                Properties mHeartbeatProperties;$/;"	m	class:KFS::ChunkServer
mHeartbeatSent	cc/meta/ChunkServer.h	/^                bool   mHeartbeatSent;$/;"	m	class:KFS::ChunkServer
mHeartbeatSkipped	cc/meta/ChunkServer.h	/^                bool mHeartbeatSkipped;$/;"	m	class:KFS::ChunkServer
mHelloCount	cc/chunk/MetaServerSM.h	/^        Counter mHelloCount;$/;"	m	struct:KFS::MetaServerSM::Counters
mHelloDone	cc/meta/ChunkServer.h	/^                bool mHelloDone;$/;"	m	class:KFS::ChunkServer
mHelloErrorCount	cc/chunk/MetaServerSM.h	/^        Counter mHelloErrorCount;$/;"	m	struct:KFS::MetaServerSM::Counters
mHelloOp	cc/chunk/MetaServerSM.h	/^    HelloMetaOp *mHelloOp;$/;"	m	class:KFS::MetaServerSM
mHibernatingServers	cc/meta/LayoutManager.h	/^		std::vector <HibernatingServerInfo_t> mHibernatingServers;$/;"	m	class:KFS::LayoutManager
mHoleFlag	cc/qcdio/qcfdpoll.cpp	/^        bool  mHoleFlag;$/;"	m	struct:QCFdPoll::Impl::FdMapEnry	file:
mHolesCnt	cc/qcdio/qcfdpoll.cpp	/^    int            mHolesCnt;$/;"	m	class:QCFdPoll::Impl	file:
mHostname	cc/libkfsClient/KfsClientInt.h	/^    std::string mHostname;$/;"	m	class:KFS::KfsClientImpl
mIdleTimeoutCount	cc/chunk/ClientManager.h	/^        Counter mIdleTimeoutCount;$/;"	m	struct:KFS::ClientManager::Counters
mIdleTimeoutFlag	cc/libkfsClient/KfsNetClient.cc	/^    bool              mIdleTimeoutFlag;$/;"	m	class:KFS::KfsNetClient::Impl	file:
mIdleTimeoutSec	cc/chunk/ClientManager.h	/^    int      mIdleTimeoutSec;$/;"	m	class:KFS::ClientManager
mIdleTimeoutSec	cc/libkfsClient/KfsNetClient.cc	/^    int               mIdleTimeoutSec;$/;"	m	class:KFS::KfsNetClient::Impl	file:
mIdleTimeoutSec	cc/libkfsClient/KfsProtocolWorker.cc	/^    const int         mIdleTimeoutSec;$/;"	m	class:KFS::KfsProtocolWorker::Impl	file:
mIdx	cc/qcdio/qcfdpoll.cpp	/^        int   mIdx;$/;"	m	struct:QCFdPoll::Impl::FdMapEnry	file:
mImpl	cc/common/BufferedLogWriter.h	/^    Impl&             mImpl;$/;"	m	class:KFS::BufferedLogWriter
mImpl	cc/libkfsClient/KfsClient.h	/^    KfsClientImpl *mImpl;$/;"	m	class:KFS::KfsClient
mImpl	cc/libkfsClient/KfsClientInt.h	/^    KfsClientImpl& mImpl;$/;"	m	class:KFS::PendingChunkRead
mImpl	cc/libkfsClient/KfsNetClient.h	/^    Impl& mImpl;$/;"	m	class:KFS::KfsNetClient
mImpl	cc/libkfsClient/KfsPendingOp.h	/^    KfsClientImpl& mImpl;$/;"	m	class:KFS::KfsPendingOp
mImpl	cc/libkfsClient/KfsProtocolWorker.h	/^    Impl& mImpl;$/;"	m	class:KFS::KfsProtocolWorker
mImpl	cc/libkfsClient/WriteAppender.h	/^    Impl& mImpl;$/;"	m	class:KFS::WriteAppender
mImpl	cc/libkfsIO/NetKicker.h	/^        Impl& mImpl;$/;"	m	class:KFS::NetKicker
mImpl	cc/qcdio/qcfdpoll.h	/^    Impl& mImpl;$/;"	m	class:QCFdPoll
mInBuffer	cc/libkfsIO/NetConnection.h	/^    IOBuffer		mInBuffer;$/;"	m	class:KFS::NetConnection
mInProgress	cc/meta/ChunkReplicator.h	/^	bool mInProgress;$/;"	m	class:KFS::ChunkReplicator
mInProgress	cc/meta/LeaseCleaner.h	/^	bool mInProgress;$/;"	m	class:KFS::LeaseCleaner
mInactiveFdsCleanupIntervalSecs	cc/chunk/ChunkManager.h	/^    int    mInactiveFdsCleanupIntervalSecs;$/;"	m	class:KFS::ChunkManager
mInactivityTimeout	cc/chunk/MetaServerSM.h	/^    int mInactivityTimeout;$/;"	m	class:KFS::MetaServerSM
mInactivityTimeoutSecs	cc/libkfsIO/NetConnection.h	/^    int			mInactivityTimeoutSecs;$/;"	m	class:KFS::NetConnection
mIncrement	cc/qcdio/qcstutils.h	/^    T  const mIncrement;$/;"	m	class:QCStValueIncrementor
mInitedFlag	cc/chunk/BufferManager.h	/^    bool            mInitedFlag;$/;"	m	class:KFS::BufferManager
mInitedFlag	cc/libkfsIO/Globals.h	/^            bool              mInitedFlag;$/;"	m	struct:KFS::libkfsio::Globals_t
mInstanceNum	cc/chunk/AtomicRecordAppender.cc	/^    const uint64_t          mInstanceNum;$/;"	m	class:KFS::AtomicRecordAppender	file:
mInstanceNum	cc/chunk/AtomicRecordAppender.h	/^    const uint64_t        mInstanceNum;$/;"	m	class:KFS::AtomicRecordAppendManager
mInstanceNum	cc/chunk/ClientSM.h	/^    const uint64_t             mInstanceNum;$/;"	m	class:KFS::ClientSM
mInterval	cc/libkfsIO/NetErrorSimulator.cc	/^        uint32_t mInterval;$/;"	m	struct:KFS::NetErrorSimulator::SimSpec	file:
mIntervalMs	cc/libkfsIO/ITimeout.h	/^    int		mIntervalMs;$/;"	m	class:KFS::ITimeout
mIoBuf	cc/libkfsIO/IOBuffer.h	/^        IOBuffer& mIoBuf;$/;"	m	class:KFS::IOBuffer::StreamBuffer
mIoBuffers	cc/chunk/DiskIo.cc	/^        IoBuffers mIoBuffers;$/;"	m	class:KFS::DiskIoQueues::WriteCancelWaiter	file:
mIoBuffers	cc/chunk/DiskIo.h	/^    IoBuffers              mIoBuffers;$/;"	m	class:KFS::DiskIo
mIoByteCount	cc/qcdio/qcdiskqueue.h	/^            int64_t mIoByteCount;$/;"	m	class:QCDiskQueue::CompletionStatus
mIoCompletionPtr	cc/qcdio/qcdiskqueue.cpp	/^        IoCompletion* mIoCompletionPtr;$/;"	m	class:QCDiskQueue::Queue::Request	file:
mIoOpsInFlight	cc/chunk/AtomicRecordAppender.cc	/^    int                     mIoOpsInFlight;$/;"	m	class:KFS::AtomicRecordAppender	file:
mIoQueuesPtr	cc/chunk/DiskIo.cc	/^    DiskIo*               mIoQueuesPtr[1];$/;"	m	class:KFS::DiskIoQueues	file:
mIoRetCode	cc/chunk/DiskIo.h	/^    ssize_t                mIoRetCode;$/;"	m	class:KFS::DiskIo
mIoTimeoutSec	cc/chunk/ClientManager.h	/^    int      mIoTimeoutSec;$/;"	m	class:KFS::ClientManager
mIoVecPerThreadCount	cc/qcdio/qcdiskqueue.cpp	/^    int             mIoVecPerThreadCount;$/;"	m	class:QCDiskQueue::Queue	file:
mIoVecPtr	cc/qcdio/qcdiskqueue.cpp	/^    struct iovec*   mIoVecPtr;$/;"	m	class:QCDiskQueue::Queue	typeref:struct:QCDiskQueue::Queue::iovec	file:
mIsChunkTableDirty	cc/chunk/ChunkManager.h	/^    bool mIsChunkTableDirty;$/;"	m	class:KFS::ChunkManager
mIsExecutingRebalancePlan	cc/meta/LayoutManager.h	/^		bool mIsExecutingRebalancePlan;$/;"	m	class:KFS::LayoutManager
mIsForkedChild	cc/libkfsIO/NetManager.h	/^    bool                mIsForkedChild;$/;"	m	class:KFS::NetManager
mIsInitialized	cc/libkfsClient/KfsClientInt.h	/^    bool	mIsInitialized;$/;"	m	class:KFS::KfsClientImpl
mIsOverloaded	cc/libkfsIO/NetManager.h	/^    bool                mIsOverloaded;$/;"	m	class:KFS::NetManager
mIsPathToFidCacheEnabled	cc/meta/kfstree.h	/^	bool mIsPathToFidCacheEnabled; \/\/!< should we enable path->fid cache?$/;"	m	class:KFS::Tree
mIsRebalancingEnabled	cc/meta/LayoutManager.h	/^		bool mIsRebalancingEnabled;$/;"	m	class:KFS::LayoutManager
mIsRetiring	cc/meta/ChunkServer.h	/^                bool mIsRetiring;$/;"	m	class:KFS::ChunkServer
mIt	cc/meta/LayoutManager.h	/^		iterator mIt;$/;"	m	class:KFS::CSMap
mItr	cc/qcdio/qcunittest.cpp	/^        Iterator mItr;$/;"	m	class:QCDiskQueueTest::BPClient	file:
mKey	cc/meta/LayoutManager.h	/^		key_type mKey;$/;"	m	class:KFS::CSMap
mKeyOp	cc/chunk/ChunkManager.h	/^        WriteOp    mKeyOp;$/;"	m	class:KFS::ChunkManager::PendingWrites
mKeyValidFlag	cc/meta/LayoutManager.h	/^		bool     mKeyValidFlag;$/;"	m	class:KFS::CSMap
mKickNetThread	cc/chunk/ChunkServer.h	/^    bool mKickNetThread;$/;"	m	class:KFS::ChunkServer
mLastActivityTime	cc/chunk/AtomicRecordAppender.cc	/^    time_t                  mLastActivityTime;$/;"	m	class:KFS::AtomicRecordAppender	file:
mLastBeginMakeChunkStableOp	cc/chunk/AtomicRecordAppender.cc	/^    BeginMakeChunkStableOp* mLastBeginMakeChunkStableOp;$/;"	m	class:KFS::AtomicRecordAppender	file:
mLastBlockIdx	cc/qcdio/qcdiskqueue.cpp	/^        uint64_t mLastBlockIdx:48;$/;"	m	struct:QCDiskQueue::Queue::FileInfo	file:
mLastCall	cc/libkfsIO/ITimeout.h	/^    int64_t 	mLastCall;$/;"	m	class:KFS::ITimeout
mLastChunkRebalanced	cc/meta/LayoutManager.h	/^		kfsChunkId_t mLastChunkRebalanced;$/;"	m	class:KFS::LayoutManager
mLastChunkReplicated	cc/meta/LayoutManager.h	/^		kfsChunkId_t mLastChunkReplicated;$/;"	m	class:KFS::LayoutManager
mLastConnectTime	cc/chunk/MetaServerSM.h	/^    time_t mLastConnectTime;$/;"	m	class:KFS::MetaServerSM
mLastDriveChosen	cc/chunk/ChunkManager.h	/^    int mLastDriveChosen;$/;"	m	class:KFS::ChunkManager
mLastError	cc/common/BufferedLogWriter.cc	/^    int          mLastError;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mLastFlushTime	cc/chunk/AtomicRecordAppender.cc	/^    time_t                  mLastFlushTime;$/;"	m	class:KFS::AtomicRecordAppender	file:
mLastHeard	cc/meta/ChunkServer.h	/^		time_t mLastHeard;$/;"	m	class:KFS::ChunkServer
mLastHeartBeatLoggedTime	cc/meta/ChunkServer.h	/^                time_t     mLastHeartBeatLoggedTime;$/;"	m	class:KFS::ChunkServer
mLastHeartbeatSent	cc/meta/ChunkServer.h	/^                time_t mLastHeartbeatSent;$/;"	m	class:KFS::ChunkServer
mLastIdx	cc/qcdio/qcfdpoll.cpp	/^    int            mLastIdx;$/;"	m	class:QCFdPoll::Impl	file:
mLastLeaseCheckTime	cc/chunk/LeaseClerk.h	/^    time_t mLastLeaseCheckTime;$/;"	m	class:KFS::LeaseClerk
mLastLogTm	cc/common/BufferedLogWriter.cc	/^    struct tm    mLastLogTm;$/;"	m	class:KFS::BufferedLogWriter::Impl	typeref:struct:KFS::BufferedLogWriter::Impl::tm	file:
mLastMakeChunkStableOp	cc/chunk/AtomicRecordAppender.cc	/^    MakeChunkStableOp*      mLastMakeChunkStableOp;$/;"	m	class:KFS::AtomicRecordAppender	file:
mLastNotification	cc/libkfsIO/TelemetryClient.h	/^        time_t mLastNotification;$/;"	m	class:KFS::TelemetryClient
mLastPathToFidCacheCleanupTime	cc/meta/kfstree.h	/^	time_t mLastPathToFidCacheCleanupTime;$/;"	m	class:KFS::Tree
mLastRecomputeDirsizeTime	cc/meta/LayoutManager.h	/^                time_t  mLastRecomputeDirsizeTime;$/;"	m	class:KFS::LayoutManager
mLastRecvCmdTime	cc/chunk/MetaServerSM.h	/^    time_t mLastRecvCmdTime;$/;"	m	class:KFS::MetaServerSM
mLastRecvTime	cc/chunk/RemoteSyncSM.h	/^    time_t   mLastRecvTime;$/;"	m	class:KFS::RemoteSyncSM
mLastReplicationCheckTime	cc/meta/LayoutManager.h	/^                time_t  mLastReplicationCheckTime;$/;"	m	class:KFS::LayoutManager
mLastSyncReqPtr	cc/libkfsClient/KfsProtocolWorker.cc	/^        Request*            mLastSyncReqPtr;$/;"	m	class:KFS::KfsProtocolWorker::Impl::Appender	file:
mLeaseCleaner	cc/meta/LayoutManager.h	/^		LeaseCleaner mLeaseCleaner;$/;"	m	class:KFS::LayoutManager
mLeaseClerk	cc/libkfsClient/KfsClientInt.h	/^    LeaseClerk  mLeaseClerk;$/;"	m	class:KFS::KfsClientImpl
mLeaseExpiredCount	cc/chunk/AtomicRecordAppender.h	/^        Counter mLeaseExpiredCount;$/;"	m	struct:KFS::AtomicRecordAppendManager::Counters
mLeaseId	cc/meta/LayoutManager.h	/^		int64_t mLeaseId;$/;"	m	class:KFS::LayoutManager
mLeaseOwnerDownExpireDelay	cc/meta/LayoutManager.h	/^                int    mLeaseOwnerDownExpireDelay;$/;"	m	class:KFS::LayoutManager
mLeases	cc/chunk/LeaseClerk.h	/^    LeaseMap mLeases;$/;"	m	class:KFS::LeaseClerk
mLeases	cc/libkfsClient/LeaseClerk.h	/^    LeaseMap mLeases;$/;"	m	class:KFS::LeaseClerk
mLength	cc/chunk/AtomicRecordAppender.cc	/^        size_t   mLength;$/;"	m	struct:KFS::AtomicRecordAppender::WIdState	file:
mListIt	cc/libkfsIO/NetConnection.h	/^        List::iterator mListIt;$/;"	m	class:KFS::NetConnection::NetManagerEntry
mLocation	cc/chunk/ChunkServer.h	/^    ServerLocation mLocation;$/;"	m	class:KFS::ChunkServer
mLocation	cc/chunk/MetaServerSM.h	/^    ServerLocation mLocation;$/;"	m	class:KFS::MetaServerSM
mLocation	cc/chunk/RemoteSyncSM.h	/^    ServerLocation mLocation;$/;"	m	class:KFS::RemoteSyncSM
mLocation	cc/meta/ChunkServer.h	/^		ServerLocation mLocation;$/;"	m	class:KFS::ChunkServer
mLocation	cc/rebalancer/rebalancer.h	/^        ServerLocation mLocation;$/;"	m	class:KFS::ChunkServer
mLockCnt	cc/qcdio/qcmutex.h	/^    int             mLockCnt;$/;"	m	class:QCMutex
mLogDir	cc/chunk/Logger.h	/^    std::string mLogDir;$/;"	m	class:KFS::Logger
mLogFileNamePrefixes	cc/common/BufferedLogWriter.cc	/^    LogFileNames mLogFileNamePrefixes;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mLogFilename	cc/chunk/Logger.h	/^    std::string mLogFilename;$/;"	m	class:KFS::Logger
mLogGenNum	cc/chunk/Logger.h	/^    long long mLogGenNum;$/;"	m	class:KFS::Logger
mLogLevel	cc/common/BufferedLogWriter.h	/^    volatile LogLevel mLogLevel;$/;"	m	class:KFS::BufferedLogWriter
mLogPrefix	cc/libkfsClient/KfsNetClient.cc	/^    const std::string mLogPrefix;$/;"	m	class:KFS::KfsNetClient::Impl	file:
mLogPrefix	cc/libkfsClient/WriteAppender.cc	/^    std::string const       mLogPrefix;$/;"	m	class:KFS::WriteAppender::Impl::std	file:
mLogPrefixPtr	cc/libkfsClient/KfsProtocolWorker.cc	/^    const char* const mLogPrefixPtr;$/;"	m	class:KFS::KfsProtocolWorker::Impl	file:
mLogTimeStampPrefixStr	cc/common/BufferedLogWriter.cc	/^    char         mLogTimeStampPrefixStr[256];$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mLogTimeStampSec	cc/common/BufferedLogWriter.cc	/^    int64_t      mLogTimeStampSec;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mLogged	cc/chunk/Logger.h	/^    MetaQueue<KfsOp> mLogged;$/;"	m	class:KFS::Logger
mLogger	cc/chunk/Logger.h	/^    Logger	*mLogger;$/;"	m	class:KFS::LoggerTimeoutImpl
mLoggerTimeoutImpl	cc/chunk/Logger.h	/^    LoggerTimeoutImpl *mLoggerTimeoutImpl;$/;"	m	class:KFS::Logger
mLongtermEvents	cc/libkfsIO/EventManager.h	/^    std::list <EventPtr>	mLongtermEvents;$/;"	m	class:KFS::EventManager
mLongtermWait	cc/libkfsIO/Event.h	/^    int			mLongtermWait;$/;"	m	class:KFS::Event
mLookupOp	cc/libkfsClient/WriteAppender.cc	/^    LookupOp                mLookupOp;$/;"	m	class:KFS::WriteAppender::Impl	file:
mLookupPathOp	cc/libkfsClient/WriteAppender.cc	/^    LookupPathOp            mLookupPathOp;$/;"	m	class:KFS::WriteAppender::Impl	file:
mLostChunkCount	cc/chunk/AtomicRecordAppender.h	/^        Counter mLostChunkCount;$/;"	m	struct:KFS::AtomicRecordAppendManager::Counters
mLostChunks	cc/meta/ChunkServer.h	/^                int64_t    mLostChunks;$/;"	m	class:KFS::ChunkServer
mLru	cc/chunk/ChunkManager.h	/^        Lru        mLru;$/;"	m	class:KFS::ChunkManager::PendingWrites
mLruIteratorStorage	cc/chunk/ChunkManager.h	/^                } mLruIteratorStorage;$/;"	m	class:KFS::ChunkManager::PendingWrites::OpListEntry	typeref:struct:KFS::ChunkManager::PendingWrites::OpListEntry::__anon4
mMD5Sum	cc/chunk/MetaServerSM.h	/^    std::string mMD5Sum;$/;"	m	class:KFS::MetaServerSM
mMainThread	cc/qcdio/qcthread.cpp	/^    pthread_t mMainThread;$/;"	m	class:QCStartedThreadList	file:
mMakeChunkStableOp	cc/chunk/AtomicRecordAppender.cc	/^    MakeChunkStableOp*      mMakeChunkStableOp;$/;"	m	class:KFS::AtomicRecordAppender	file:
mMakeDirsFlag	cc/libkfsClient/WriteAppender.cc	/^    bool                    mMakeDirsFlag;$/;"	m	class:KFS::WriteAppender::Impl	file:
mMakeStableChecksumErrorCount	cc/chunk/AtomicRecordAppender.h	/^        Counter mMakeStableChecksumErrorCount;$/;"	m	struct:KFS::AtomicRecordAppendManager::Counters
mMakeStableCount	cc/chunk/AtomicRecordAppender.h	/^        Counter mMakeStableCount;$/;"	m	struct:KFS::AtomicRecordAppendManager::Counters
mMakeStableErrorCount	cc/chunk/AtomicRecordAppender.h	/^        Counter mMakeStableErrorCount;$/;"	m	struct:KFS::AtomicRecordAppendManager::Counters
mMakeStableLengthErrorCount	cc/chunk/AtomicRecordAppender.h	/^        Counter mMakeStableLengthErrorCount;$/;"	m	struct:KFS::AtomicRecordAppendManager::Counters
mManagerPtr	cc/chunk/BufferManager.h	/^        BufferManager* mManagerPtr;$/;"	m	class:KFS::BufferManager::Client
mMap	cc/meta/LayoutManager.h	/^		Map      mMap;$/;"	m	class:KFS::CSMap
mMap	cc/meta/LayoutManager.h	/^		Map mMap;$/;"	m	class:KFS::ARAChunkCache
mMasterCommittedOffset	cc/chunk/AtomicRecordAppender.cc	/^    off_t                   mMasterCommittedOffset;$/;"	m	class:KFS::AtomicRecordAppender	file:
mMastersCount	cc/meta/LayoutManager.h	/^                size_t mMastersCount;$/;"	m	class:KFS::LayoutManager
mMastersToRestartCount	cc/meta/LayoutManager.h	/^                int     mMastersToRestartCount;$/;"	m	class:KFS::LayoutManager
mMaxAppendLength	cc/common/BufferedLogWriter.cc	/^    const int    mMaxAppendLength;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mMaxAppenderBytes	cc/chunk/AtomicRecordAppender.h	/^    int                   mMaxAppenderBytes;$/;"	m	class:KFS::AtomicRecordAppendManager
mMaxCSRestarting	cc/meta/LayoutManager.h	/^		int     mMaxCSRestarting;$/;"	m	class:KFS::LayoutManager
mMaxCSUptime	cc/meta/LayoutManager.h	/^		int64_t mMaxCSUptime;$/;"	m	class:KFS::LayoutManager
mMaxClientQuota	cc/chunk/BufferManager.h	/^    ByteCount       mMaxClientQuota;$/;"	m	class:KFS::BufferManager
mMaxDownServersHistorySize	cc/meta/LayoutManager.h	/^                uint64_t mMaxDownServersHistorySize;$/;"	m	class:KFS::LayoutManager
mMaxEventCount	cc/qcdio/qcfdpoll.cpp	/^    int                 mMaxEventCount;$/;"	m	class:QCFdPoll::Impl	file:
mMaxGracefulRestartSeconds	cc/chunk/ChunkServer_main.cc	/^    int    mMaxGracefulRestartSeconds;$/;"	m	class:Restarter	file:
mMaxIORequestSize	cc/chunk/ChunkManager.h	/^    size_t mMaxIORequestSize;$/;"	m	class:KFS::ChunkManager
mMaxLogFileSize	cc/common/BufferedLogWriter.cc	/^    int64_t      mMaxLogFileSize;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mMaxLogFiles	cc/common/BufferedLogWriter.cc	/^    int64_t      mMaxLogFiles;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mMaxLogWaitTime	cc/common/BufferedLogWriter.cc	/^    Time         mMaxLogWaitTime;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mMaxNumRetriesPerOp	cc/libkfsClient/KfsClientInt.h	/^    int mMaxNumRetriesPerOp;$/;"	m	class:KFS::KfsClientImpl
mMaxOpenChunkFiles	cc/chunk/ChunkManager.h	/^    int         mMaxOpenChunkFiles;$/;"	m	class:KFS::ChunkManager
mMaxOutgoingBacklog	cc/libkfsIO/NetManager.h	/^    int64_t		mMaxOutgoingBacklog;$/;"	m	class:KFS::NetManager
mMaxOutstandingIOs	cc/libkfsIO/DiskManager.h	/^    uint32_t			mMaxOutstandingIOs;$/;"	m	class:KFS::DiskManager
mMaxPartialBuffersCount	cc/libkfsClient/WriteAppender.cc	/^    const int               mMaxPartialBuffersCount;$/;"	m	class:KFS::WriteAppender::Impl	file:
mMaxPendingOrEndPos	cc/libkfsClient/KfsProtocolWorker.h	/^        int64_t      mMaxPendingOrEndPos;$/;"	m	class:KFS::KfsProtocolWorker::Request
mMaxPendingWriteLruSecs	cc/chunk/ChunkManager.h	/^    int mMaxPendingWriteLruSecs;$/;"	m	class:KFS::ChunkManager
mMaxReadAhead	cc/chunk/MetaServerSM.h	/^    int mMaxReadAhead;$/;"	m	class:KFS::MetaServerSM
mMaxReadLength	cc/libkfsIO/IOBuffer.h	/^        int       mMaxReadLength;$/;"	m	class:KFS::IOBuffer::StreamBuffer
mMaxRebalanceSpaceUtilThreshold	cc/meta/LayoutManager.h	/^		double mMaxRebalanceSpaceUtilThreshold;$/;"	m	class:KFS::LayoutManager
mMaxRebalanceSpaceUtilThreshold	cc/rebalancer/rebalancer.h	/^        double mMaxRebalanceSpaceUtilThreshold;$/;"	m	class:KFS::Rebalancer
mMaxReleaseCount	cc/qcdio/qcunittest.cpp	/^        int      mMaxReleaseCount;$/;"	m	class:QCDiskQueueTest::BPClient	file:
mMaxRequestSize	cc/chunk/DiskIo.cc	/^    size_t                mMaxRequestSize;$/;"	m	class:KFS::DiskIoQueues	file:
mMaxReservationSize	cc/meta/LayoutManager.h	/^                int    mMaxReservationSize;$/;"	m	class:KFS::LayoutManager
mMaxRetryCount	cc/libkfsClient/KfsNetClient.cc	/^    int               mMaxRetryCount;$/;"	m	class:KFS::KfsNetClient::Impl	file:
mMaxRetryCount	cc/libkfsClient/KfsProtocolWorker.cc	/^    const int         mMaxRetryCount;$/;"	m	class:KFS::KfsProtocolWorker::Impl	file:
mMaxRetryCount	cc/libkfsClient/WriteAppender.cc	/^    const int               mMaxRetryCount;$/;"	m	class:KFS::WriteAppender::Impl	file:
mMaxWriteIdsPerChunk	cc/chunk/AtomicRecordAppender.h	/^    int                   mMaxWriteIdsPerChunk;$/;"	m	class:KFS::AtomicRecordAppendManager
mMetaOpsCancelledCount	cc/libkfsClient/WriteAppender.h	/^        Counter mMetaOpsCancelledCount;$/;"	m	struct:KFS::WriteAppender::Stats
mMetaOpsQueuedCount	cc/libkfsClient/WriteAppender.h	/^        Counter mMetaOpsQueuedCount;$/;"	m	struct:KFS::WriteAppender::Stats
mMetaServer	cc/libkfsClient/KfsProtocolWorker.cc	/^    MetaServer        mMetaServer;$/;"	m	class:KFS::KfsProtocolWorker::Impl	file:
mMetaServer	cc/libkfsClient/WriteAppender.cc	/^    MetaServer&             mMetaServer;$/;"	m	class:KFS::WriteAppender::Impl	file:
mMetaServerLoc	cc/libkfsClient/KfsClientInt.h	/^    ServerLocation mMetaServerLoc;$/;"	m	class:KFS::KfsClientImpl
mMetaServerSock	cc/libkfsClient/KfsClientInt.h	/^    TcpSocket	mMetaServerSock;$/;"	m	class:KFS::KfsClientImpl
mMetaSyncDelayTimeSecs	cc/chunk/ChunkManager.h	/^    int              mMetaSyncDelayTimeSecs;$/;"	m	class:KFS::ChunkManager
mMinBufferCount	cc/chunk/BufferManager.h	/^    int             mMinBufferCount;$/;"	m	class:KFS::BufferManager
mMinChunkserversToExitRecovery	cc/meta/LayoutManager.h	/^		uint32_t mMinChunkserversToExitRecovery;$/;"	m	class:KFS::LayoutManager
mMinMetaUptimeSec	cc/chunk/AtomicRecordAppender.h	/^    int                   mMinMetaUptimeSec;$/;"	m	class:KFS::AtomicRecordAppendManager
mMinModTimeToKeepSec	cc/common/BufferedLogWriter.cc	/^    int64_t      mMinModTimeToKeepSec;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mMinRebalanceSpaceUtilThreshold	cc/meta/LayoutManager.h	/^		double mMinRebalanceSpaceUtilThreshold;$/;"	m	class:KFS::LayoutManager
mMinRebalanceSpaceUtilThreshold	cc/rebalancer/rebalancer.h	/^        double mMinRebalanceSpaceUtilThreshold;$/;"	m	class:KFS::Rebalancer
mMkdirOp	cc/libkfsClient/WriteAppender.cc	/^    MkdirOp                 mMkdirOp;$/;"	m	class:KFS::WriteAppender::Impl	file:
mMptr	cc/libkfsIO/KfsCallbackObj.h	/^    MethodPtr	mMptr;	\/\/ pointer to the method$/;"	m	class:KFS::ObjectMethod
mMsgAppendCount	cc/common/BufferedLogWriter.cc	/^    int64_t      mMsgAppendCount;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mMutex	cc/chunk/DiskIo.cc	/^    QCMutex               mMutex;$/;"	m	class:KFS::DiskIoQueues	file:
mMutex	cc/common/BufferedLogWriter.cc	/^    QCMutex      mMutex;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mMutex	cc/libkfsClient/KfsClientInt.h	/^    pthread_mutex_t mMutex;$/;"	m	class:KFS::KfsClientImpl
mMutex	cc/libkfsClient/KfsPendingOp.h	/^    QCMutex        mMutex;$/;"	m	class:KFS::KfsPendingOp
mMutex	cc/libkfsClient/KfsProtocolWorker.cc	/^        QCMutex      mMutex;$/;"	m	class:KFS::KfsProtocolWorker::Impl::SyncRequest	file:
mMutex	cc/libkfsClient/KfsProtocolWorker.cc	/^    QCMutex           mMutex;$/;"	m	class:KFS::KfsProtocolWorker::Impl	file:
mMutex	cc/libkfsClient/concurrency.h	/^    pthread_mutex_t *mMutex;$/;"	m	class:KFS::MutexLock
mMutex	cc/libkfsIO/NetKicker.cc	/^    QCMutex mMutex;$/;"	m	class:NetKicker::Impl	file:
mMutex	cc/libkfsIO/NetManager.cc	/^    QCMutex mMutex;$/;"	m	class:NetManager::Waker	file:
mMutex	cc/qcdio/qcdiskqueue.cpp	/^    QCMutex               mMutex;$/;"	m	class:QCDiskQueue::RequestWaiter	file:
mMutex	cc/qcdio/qcdiskqueue.cpp	/^    QCMutex         mMutex;$/;"	m	class:QCDiskQueue::Queue	file:
mMutex	cc/qcdio/qciobufferpool.h	/^    QCMutex    mMutex;$/;"	m	class:QCIoBufferPool
mMutex	cc/qcdio/qcmutex.h	/^    pthread_mutex_t mMutex;$/;"	m	class:QCMutex
mMutex	cc/qcdio/qcthread.cpp	/^    QCMutex   mMutex;$/;"	m	class:QCStartedThreadList	file:
mMutex	cc/qcdio/qcunittest.cpp	/^        QCMutex   mMutex;$/;"	m	class:QCDiskQueueTest::RequestWaiter	file:
mMutexPtr	cc/qcdio/qcstutils.h	/^    QCMutex* mMutexPtr;$/;"	m	class:QCStMutexLocker
mMutexPtr	cc/qcdio/qcstutils.h	/^    QCMutex* mMutexPtr;$/;"	m	class:QCStMutexUnlocker
mName	cc/libkfsIO/Counter.h	/^    std::string mName;$/;"	m	class:KFS::Counter
mName	cc/qcdio/qcthread.h	/^    std::string mName;$/;"	m	class:QCThread
mNetConnection	cc/chunk/ClientSM.h	/^    NetConnectionPtr	       mNetConnection;$/;"	m	class:KFS::ClientSM
mNetConnection	cc/chunk/MetaServerSM.h	/^    NetConnectionPtr mNetConnection;$/;"	m	class:KFS::MetaServerSM
mNetConnection	cc/chunk/RemoteSyncSM.h	/^    NetConnectionPtr mNetConnection;$/;"	m	class:KFS::RemoteSyncSM
mNetConnection	cc/meta/ChunkServer.h	/^                NetConnectionPtr mNetConnection;$/;"	m	class:KFS::ChunkServer
mNetConnection	cc/meta/ClientSM.h	/^        NetConnectionPtr	mNetConnection;$/;"	m	class:KFS::ClientSM
mNetErrorCount	cc/libkfsClient/KfsNetClient.h	/^        Counter mNetErrorCount;$/;"	m	struct:KFS::KfsNetClient::Stats
mNetManager	cc/libkfsClient/KfsNetClient.cc	/^    NetManager&       mNetManager;$/;"	m	class:KFS::KfsNetClient::Impl	file:
mNetManager	cc/libkfsClient/KfsProtocolWorker.cc	/^    NetManager        mNetManager;$/;"	m	class:KFS::KfsProtocolWorker::Impl	file:
mNetManager	cc/libkfsClient/WriteAppender.cc	/^    NetManager&             mNetManager;$/;"	m	class:KFS::WriteAppender::Impl	file:
mNetManager	cc/libkfsIO/Acceptor.h	/^    NetManager&           mNetManager;$/;"	m	class:KFS::Acceptor
mNetManager	cc/libkfsIO/NetConnection.h	/^        NetManager*    mNetManager;$/;"	m	class:KFS::NetConnection::NetManagerEntry
mNetManager	cc/libkfsIO/NetErrorSimulator.cc	/^    NetManager&               mNetManager;$/;"	m	class:KFS::NetErrorSimulator	file:
mNetManagerEntry	cc/libkfsIO/NetConnection.h	/^    NetManagerEntry     mNetManagerEntry;$/;"	m	class:KFS::NetConnection
mNetworkOverloaded	cc/libkfsIO/NetManager.h	/^    bool		mNetworkOverloaded;$/;"	m	class:KFS::NetManager
mNewLogSuffix	cc/common/BufferedLogWriter.cc	/^    string       mNewLogSuffix;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mNextCheckpointTime	cc/chunk/ChunkManager.h	/^    time_t      mNextCheckpointTime;$/;"	m	class:KFS::ChunkManager
mNextChunkDirsCheckTime	cc/chunk/ChunkManager.h	/^    time_t	     mNextChunkDirsCheckTime;$/;"	m	class:KFS::ChunkManager
mNextCommitOffset	cc/chunk/AtomicRecordAppender.cc	/^    off_t                   mNextCommitOffset;$/;"	m	class:KFS::AtomicRecordAppender	file:
mNextDeleteOldLogsTimeSec	cc/common/BufferedLogWriter.cc	/^    int64_t      mNextDeleteOldLogsTimeSec;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mNextEventIdx	cc/qcdio/qcfdpoll.cpp	/^    int                 mNextEventIdx;$/;"	m	class:QCFdPoll::Impl	file:
mNextFlushTime	cc/common/BufferedLogWriter.cc	/^    Time         mNextFlushTime;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mNextIdx	cc/qcdio/qcdiskqueue.cpp	/^        RequestIdx    mNextIdx;$/;"	m	class:QCDiskQueue::Queue::Request	file:
mNextIdx	cc/qcdio/qcfdpoll.cpp	/^    int            mNextIdx;$/;"	m	class:QCFdPoll::Impl	file:
mNextInactiveFdCleanupTime	cc/chunk/ChunkManager.h	/^    time_t mNextInactiveFdCleanupTime;$/;"	m	class:KFS::ChunkManager
mNextNodePtr	cc/qcdio/qcdllist.h	/^        NodeT*             mNextNodePtr;$/;"	m	class:QCDLList::Iterator
mNextOffset	cc/chunk/AtomicRecordAppender.cc	/^    off_t                   mNextOffset;$/;"	m	class:KFS::AtomicRecordAppender	file:
mNextOpenRetryTime	cc/common/BufferedLogWriter.cc	/^    Time         mNextOpenRetryTime;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mNextPendingMetaSyncScanTime	cc/chunk/ChunkManager.h	/^    time_t           mNextPendingMetaSyncScanTime;$/;"	m	class:KFS::ChunkManager
mNextPtr	cc/chunk/AtomicRecordAppender.cc	/^    AtomicRecordAppender*   mNextPtr[1];$/;"	m	class:KFS::AtomicRecordAppender	file:
mNextPtr	cc/chunk/BufferManager.h	/^        Client*        mNextPtr[1];$/;"	m	class:KFS::BufferManager::Client
mNextPtr	cc/chunk/ChunkManager.cc	/^    ChunkInfoHandle* mNextPtr[ChunkManager::kChunkInfoHandleListCount];$/;"	m	class:KFS::ChunkInfoHandle	file:
mNextPtr	cc/chunk/DiskIo.cc	/^    DiskQueue*          mNextPtr[1];$/;"	m	class:KFS::DiskQueue	file:
mNextPtr	cc/chunk/DiskIo.h	/^    DiskIo*                mNextPtr[1];$/;"	m	class:KFS::DiskIo
mNextPtr	cc/chunk/KfsOps.h	/^    RecordAppendOp* mNextPtr[1];$/;"	m	struct:KFS::RecordAppendOp
mNextPtr	cc/libkfsClient/KfsProtocolWorker.cc	/^        Appender*           mNextPtr[1];$/;"	m	class:KFS::KfsProtocolWorker::Impl::Appender	file:
mNextPtr	cc/libkfsClient/KfsProtocolWorker.cc	/^        SyncRequest* mNextPtr[1];$/;"	m	class:KFS::KfsProtocolWorker::Impl::SyncRequest	file:
mNextPtr	cc/libkfsClient/KfsProtocolWorker.h	/^        Request* mNextPtr[1];$/;"	m	class:KFS::KfsProtocolWorker::Request
mNextPtr	cc/qcdio/qciobufferpool.cpp	/^    Partition*   mNextPtr[1];$/;"	m	class:QCIoBufferPool::Partition	file:
mNextPtr	cc/qcdio/qciobufferpool.h	/^        Client*         mNextPtr[1];$/;"	m	class:QCIoBufferPool::Client
mNextPtr	cc/qcdio/qcthread.h	/^    QCThread*   mNextPtr[1];$/;"	m	class:QCThread
mNextSeqNum	cc/libkfsClient/KfsNetClient.cc	/^    kfsSeq_t          mNextSeqNum;$/;"	m	class:KFS::KfsNetClient::Impl	file:
mNextTime	cc/meta/ClientSM.cc	/^	time_t  mNextTime;$/;"	m	class:RequestStatsGatherer	file:
mNextWriteOffset	cc/chunk/AtomicRecordAppender.cc	/^    off_t                   mNextWriteOffset;$/;"	m	class:KFS::AtomicRecordAppender	file:
mNonStableChunks	cc/meta/LayoutManager.h	/^		NonStableChunksMap   mNonStableChunks;$/;"	m	class:KFS::LayoutManager
mNow	cc/libkfsIO/NetManager.h	/^    time_t              mNow;$/;"	m	class:KFS::NetManager
mNumAppendsWithWid	cc/meta/ChunkServer.h	/^                int64_t mNumAppendsWithWid;$/;"	m	class:KFS::ChunkServer
mNumBlksRebalanced	cc/emulator/LayoutEmulator.h	/^        int mNumBlksRebalanced;$/;"	m	class:KFS::LayoutEmulator
mNumBytesToSend	cc/libkfsIO/NetManager.h	/^    int64_t             mNumBytesToSend;$/;"	m	class:KFS::NetManager
mNumChunkReadReplications	cc/meta/ChunkServer.h	/^		int mNumChunkReadReplications;$/;"	m	class:KFS::ChunkServer
mNumChunkWriteReplications	cc/meta/ChunkServer.h	/^		int mNumChunkWriteReplications;$/;"	m	class:KFS::ChunkServer
mNumChunkWrites	cc/meta/ChunkServer.h	/^		int     mNumChunkWrites;$/;"	m	class:KFS::ChunkServer
mNumChunks	cc/chunk/ChunkManager.h	/^    long	mNumChunks;$/;"	m	class:KFS::ChunkManager
mNumChunks	cc/meta/ChunkServer.h	/^		long mNumChunks;$/;"	m	class:KFS::ChunkServer
mNumChunks	cc/rebalancer/rebalancer.h	/^        int     mNumChunks;$/;"	m	class:KFS::ChunkServer
mNumCorruptChunks	cc/meta/ChunkServer.h	/^		int mNumCorruptChunks;$/;"	m	class:KFS::ChunkServer
mNumDrives	cc/meta/ChunkServer.h	/^		int mNumDrives;$/;"	m	class:KFS::ChunkServer
mNumOngoingReplications	cc/meta/LayoutManager.h	/^		int mNumOngoingReplications;$/;"	m	class:KFS::LayoutManager
mNumReplicas	cc/libkfsClient/WriteAppender.cc	/^    int                     mNumReplicas;$/;"	m	class:KFS::WriteAppender::Impl	file:
mNumRunning	cc/libkfsClient/KfsAsyncRW.h	/^        int				mNumRunning;$/;"	m	class:KFS::Asyncer
mNumServers	cc/chunk/AtomicRecordAppender.cc	/^    const uint32_t          mNumServers;$/;"	m	class:KFS::AtomicRecordAppender	file:
mObj	cc/libkfsIO/NetManager.h	/^            KfsCallbackObj&  mObj;$/;"	m	struct:KFS::NetManager::Timer::Handler
mObjMeth	cc/libkfsIO/KfsCallbackObj.h	/^    ObjectMethodBase *mObjMeth;$/;"	m	class:KFS::KfsCallbackObj
mObjMethodStorage	cc/libkfsIO/KfsCallbackObj.h	/^    } mObjMethodStorage;$/;"	m	class:KFS::KfsCallbackObj	typeref:struct:KFS::KfsCallbackObj::__anon22
mOffset	cc/chunk/AtomicRecordAppender.cc	/^        off_t    mOffset;$/;"	m	struct:KFS::AtomicRecordAppender::WIdState	file:
mOffset	cc/chunk/Replicator.h	/^    off_t mOffset;$/;"	m	class:KFS::Replicator
mOngoingReplicationStats	cc/meta/LayoutManager.h	/^		Counter *mOngoingReplicationStats;$/;"	m	class:KFS::LayoutManager
mOp	cc/chunk/ChunkManager.h	/^            WriteOp* mOp;$/;"	m	struct:KFS::ChunkManager::PendingWrites::WriteIdEntry
mOp	cc/meta/ChunkReplicator.h	/^	MetaChunkReplicationCheck mOp;$/;"	m	class:KFS::ChunkReplicator
mOp	cc/meta/ClientSM.h	/^        MetaRequest		*mOp;$/;"	m	class:KFS::ClientSM
mOp	cc/meta/LeaseCleaner.h	/^	MetaLeaseCleanup mOp;$/;"	m	class:KFS::LeaseCleaner
mOpCount	cc/chunk/ChunkServer.h	/^    int mOpCount;$/;"	m	class:KFS::ChunkServer
mOpPtr	cc/libkfsClient/KfsNetClient.cc	/^        KfsOp*    mOpPtr;$/;"	m	struct:KFS::KfsNetClient::Impl::OpQueueEntry	file:
mOpStartTime	cc/libkfsClient/WriteAppender.cc	/^    time_t                  mOpStartTime;$/;"	m	class:KFS::WriteAppender::Impl	file:
mOpTimeoutSec	cc/libkfsClient/KfsNetClient.cc	/^    int               mOpTimeoutSec;$/;"	m	class:KFS::KfsNetClient::Impl	file:
mOpTimeoutSec	cc/libkfsClient/KfsProtocolWorker.cc	/^    const int         mOpTimeoutSec;$/;"	m	class:KFS::KfsProtocolWorker::Impl	file:
mOpTimeoutSec	cc/libkfsClient/WriteAppender.cc	/^    const int               mOpTimeoutSec;$/;"	m	class:KFS::WriteAppender::Impl	file:
mOpenAppendersCount	cc/chunk/AtomicRecordAppender.h	/^    int64_t               mOpenAppendersCount;$/;"	m	class:KFS::AtomicRecordAppendManager
mOpenErrorCount	cc/chunk/ChunkManager.h	/^        Counter mOpenErrorCount;$/;"	m	struct:KFS::ChunkManager::Counters
mOpenFlag	cc/libkfsClient/WriteAppender.cc	/^    bool                    mOpenFlag;$/;"	m	class:KFS::WriteAppender::Impl	file:
mOpenFlags	cc/common/BufferedLogWriter.cc	/^    int          mOpenFlags;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mOpenMode	cc/common/BufferedLogWriter.cc	/^    int          mOpenMode;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mOpenRetryInterval	cc/common/BufferedLogWriter.cc	/^    Time         mOpenRetryInterval;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mOpeningFlag	cc/libkfsClient/WriteAppender.cc	/^    bool                    mOpeningFlag;$/;"	m	class:KFS::WriteAppender::Impl	file:
mOps	cc/chunk/ClientSM.h	/^    OpsQueue	               mOps;$/;"	m	class:KFS::ClientSM
mOpsCancelledCount	cc/libkfsClient/KfsNetClient.h	/^        Counter mOpsCancelledCount;$/;"	m	struct:KFS::KfsNetClient::Stats
mOpsQueuedCount	cc/libkfsClient/KfsNetClient.h	/^        Counter mOpsQueuedCount;$/;"	m	struct:KFS::KfsNetClient::Stats
mOpsRecAppendCount	cc/libkfsClient/WriteAppender.h	/^        Counter mOpsRecAppendCount;$/;"	m	struct:KFS::WriteAppender::Stats
mOpsRetriedCount	cc/libkfsClient/KfsNetClient.h	/^        Counter mOpsRetriedCount;$/;"	m	struct:KFS::KfsNetClient::Stats
mOpsTimeoutCount	cc/libkfsClient/KfsNetClient.h	/^        Counter mOpsTimeoutCount;$/;"	m	struct:KFS::KfsNetClient::Stats
mOptr	cc/libkfsIO/KfsCallbackObj.h	/^    T* 		mOptr;      \/\/ pointer to the object$/;"	m	class:KFS::ObjectMethod
mOrigVal	cc/qcdio/qcstutils.h	/^    T  const mOrigVal;$/;"	m	class:QCStValueChanger
mOtherRequestCount	cc/chunk/ClientManager.h	/^        Counter mOtherRequestCount;$/;"	m	struct:KFS::ClientManager::Counters
mOtherRequestErrors	cc/chunk/ClientManager.h	/^        Counter mOtherRequestErrors;$/;"	m	struct:KFS::ClientManager::Counters
mOtherRequestTimeMicroSecs	cc/chunk/ClientManager.h	/^        Counter mOtherRequestTimeMicroSecs;$/;"	m	struct:KFS::ClientManager::Counters
mOurName	cc/libkfsClient/KfsAsyncRW.h	/^        std::string mOurName; \/\/ stash our host\/port so we can print it out in log messages$/;"	m	struct:KFS::AsyncReq
mOutBuffer	cc/libkfsIO/NetConnection.h	/^    IOBuffer		mOutBuffer;$/;"	m	class:KFS::NetConnection
mOutFd	cc/emulator/ChunkServerEmulator.h	/^        int mOutFd;$/;"	m	class:KFS::ChunkServerEmulator
mOutFd	cc/rebalancer/rebalancer.h	/^        int mOutFd;$/;"	m	class:KFS::Rebalancer
mOutIteratorPtr	cc/qcdio/qcdiskqueue.cpp	/^    OutputIterator* const mOutIteratorPtr;$/;"	m	class:QCDiskQueue::RequestWaiter	file:
mOuter	cc/libkfsClient/WriteAppender.cc	/^    WriteAppender&          mOuter;$/;"	m	class:KFS::WriteAppender::Impl	file:
mOverLoadedServers	cc/rebalancer/rebalancer.h	/^        std::vector<ChunkServerPtr> mOverLoadedServers;$/;"	m	class:KFS::Rebalancer
mOverloaded	cc/libkfsIO/DiskManager.h	/^    bool			mOverloaded;$/;"	m	class:KFS::DiskManager
mOverloadedFlag	cc/chunk/DiskIo.cc	/^    bool                  mOverloadedFlag;$/;"	m	class:KFS::DiskIoQueues	file:
mOwner	cc/chunk/Replicator.h	/^    ReplicateChunkOp *mOwner;$/;"	m	class:KFS::Replicator
mOwner	cc/libkfsClient/KfsProtocolWorker.cc	/^        Owner&              mOwner;$/;"	m	class:KFS::KfsProtocolWorker::Impl::Appender	file:
mOwner	cc/meta/ChunkReplicator.h	/^	ChunkReplicator *mOwner;$/;"	m	class:KFS::ChunkReplicatorTimeoutImpl
mOwner	cc/meta/LeaseCleaner.h	/^	LeaseCleaner *mOwner;$/;"	m	class:KFS::LeaseCleanerTimeoutImpl
mOwner	cc/qcdio/qcmutex.h	/^    pthread_t       mOwner;$/;"	m	class:QCMutex
mOwnerPtr	cc/libkfsClient/KfsNetClient.cc	/^        OpOwner*  mOwnerPtr;$/;"	m	struct:KFS::KfsNetClient::Impl::OpQueueEntry	file:
mPartialBuffersCount	cc/libkfsClient/WriteAppender.cc	/^    int                     mPartialBuffersCount;$/;"	m	class:KFS::WriteAppender::Impl	file:
mPartitionListPtr	cc/qcdio/qciobufferpool.h	/^    Partition* mPartitionListPtr[1];$/;"	m	class:QCIoBufferPool
mPathCache	cc/libkfsClient/KfsClientInt.h	/^    NameToFdMap mPathCache;$/;"	m	class:KFS::KfsClientImpl
mPathName	cc/libkfsClient/KfsProtocolWorker.h	/^        std::string  mPathName;$/;"	m	class:KFS::KfsProtocolWorker::Request
mPathName	cc/libkfsClient/WriteAppender.cc	/^    std::string             mPathName;$/;"	m	class:KFS::WriteAppender::Impl	file:
mPathNamePos	cc/libkfsClient/WriteAppender.cc	/^    StringPos               mPathNamePos;$/;"	m	class:KFS::WriteAppender::Impl	file:
mPathToFidCache	cc/meta/kfstree.h	/^	PathToFidCacheMap mPathToFidCache; $/;"	m	class:KFS::Tree
mPeer	cc/chunk/Replicator.h	/^    RemoteSyncSMPtr mPeer;$/;"	m	class:KFS::Replicator
mPeerLocation	cc/chunk/AtomicRecordAppender.cc	/^    const ServerLocation    mPeerLocation;$/;"	m	class:KFS::AtomicRecordAppender	file:
mPeerName	cc/libkfsIO/NetConnection.h	/^    std::string         mPeerName;$/;"	m	class:KFS::NetConnection
mPeerNameRegex	cc/libkfsIO/NetErrorSimulator.cc	/^        Regex    mPeerNameRegex;$/;"	m	struct:KFS::NetErrorSimulator::SimSpec	file:
mPending	cc/chunk/Logger.h	/^    MetaQueue<KfsOp> mPending;$/;"	m	class:KFS::Logger
mPending	cc/libkfsClient/KfsProtocolWorker.cc	/^        int                 mPending;$/;"	m	class:KFS::KfsProtocolWorker::Impl::Appender	file:
mPending	cc/meta/ChildProcessTracker.h	/^		Pending mPending;$/;"	m	class:KFS::ChildProcessTrackingTimer
mPending	cc/meta/ClientSM.h	/^	std::list<MetaRequest *> mPending;$/;"	m	class:KFS::ClientSM
mPendingBeginMakeStable	cc/meta/LayoutManager.h	/^		ChunkIdSet           mPendingBeginMakeStable;$/;"	m	class:KFS::LayoutManager
mPendingCount	cc/qcdio/qcdiskqueue.cpp	/^    int             mPendingCount;$/;"	m	class:QCDiskQueue::Queue	file:
mPendingFlushList	cc/chunk/AtomicRecordAppender.h	/^    AtomicRecordAppender* mPendingFlushList[1];$/;"	m	class:KFS::AtomicRecordAppendManager
mPendingLength	cc/meta/ClientSM.h	/^	int		mPendingLength;$/;"	m	class:KFS::ClientSM
mPendingMakeStable	cc/meta/LayoutManager.h	/^		PendingMakeStableMap mPendingMakeStable;$/;"	m	class:KFS::LayoutManager
mPendingOp	cc/libkfsClient/KfsClientInt.h	/^    KfsPendingOp mPendingOp;$/;"	m	class:KFS::KfsClientImpl
mPendingOpQueue	cc/libkfsClient/KfsNetClient.cc	/^    OpQueue           mPendingOpQueue;$/;"	m	class:KFS::KfsNetClient::Impl	file:
mPendingOps	cc/chunk/ClientSM.h	/^    PendingOpsList            mPendingOps;$/;"	m	class:KFS::ClientSM
mPendingOps	cc/chunk/MetaServerSM.h	/^    MetaQueue<KfsOp> mPendingOps;$/;"	m	class:KFS::MetaServerSM
mPendingReadBlockCount	cc/qcdio/qcdiskqueue.cpp	/^    int64_t         mPendingReadBlockCount;$/;"	m	class:QCDiskQueue::Queue	file:
mPendingReqs	cc/meta/ChunkServer.h	/^                PendingReqs mPendingReqs;$/;"	m	class:KFS::ChunkServer
mPendingResponses	cc/chunk/MetaServerSM.h	/^    MetaQueue<KfsOp> mPendingResponses;$/;"	m	class:KFS::MetaServerSM
mPendingSubmitQueue	cc/chunk/ClientSM.h	/^    PendingOpsList            mPendingSubmitQueue;$/;"	m	class:KFS::ClientSM
mPendingWriteBlockCount	cc/qcdio/qcdiskqueue.cpp	/^    int64_t         mPendingWriteBlockCount;$/;"	m	class:QCDiskQueue::Queue	file:
mPendingWrites	cc/chunk/ChunkManager.h	/^    PendingWrites mPendingWrites;$/;"	m	class:KFS::ChunkManager
mPercentLoadedNodesToAvoidForWrites	cc/meta/LayoutManager.h	/^                double mPercentLoadedNodesToAvoidForWrites;$/;"	m	class:KFS::LayoutManager
mPercentVariationFromMean	cc/emulator/LayoutEmulator.h	/^        float mPercentVariationFromMean;$/;"	m	class:KFS::LayoutEmulator
mPercentVariationFromMean	cc/rebalancer/rebalancer.h	/^        double mPercentVariationFromMean;$/;"	m	class:KFS::Rebalancer
mPeriodic	cc/libkfsIO/Event.h	/^    bool		mPeriodic;$/;"	m	class:KFS::Event
mPipeFds	cc/libkfsIO/NetKicker.cc	/^    int     mPipeFds[2];$/;"	m	class:NetKicker::Impl	file:
mPipeFds	cc/libkfsIO/NetManager.cc	/^    int     mPipeFds[2];$/;"	m	class:NetManager::Waker	file:
mPoll	cc/libkfsIO/NetManager.h	/^    QCFdPoll&           mPoll;$/;"	m	class:KFS::NetManager
mPollEventHook	cc/libkfsIO/NetManager.h	/^    PollEventHook*      mPollEventHook;$/;"	m	class:KFS::NetManager
mPollVecPtr	cc/qcdio/qcfdpoll.cpp	/^    struct pollfd* mPollVecPtr;$/;"	m	class:QCFdPoll::Impl	typeref:struct:QCFdPoll::Impl::pollfd	file:
mPollVecSize	cc/qcdio/qcfdpoll.cpp	/^    int            mPollVecSize;$/;"	m	class:QCFdPoll::Impl	file:
mPoolPtr	cc/qcdio/qciobufferpool.h	/^        QCIoBufferPool* mPoolPtr;$/;"	m	class:QCIoBufferPool::Client
mPoolPtr	cc/qcdio/qcunittest.cpp	/^        QCIoBufferPool* mPoolPtr;$/;"	m	class:QCDiskQueueTest::Iterator	file:
mPort	cc/libkfsIO/Acceptor.h	/^    const int             mPort;$/;"	m	class:KFS::Acceptor
mPreAllocateFlag	cc/libkfsClient/KfsProtocolWorker.cc	/^    const bool        mPreAllocateFlag;$/;"	m	class:KFS::KfsProtocolWorker::Impl	file:
mPreAllocationFlag	cc/libkfsClient/WriteAppender.cc	/^    bool                    mPreAllocationFlag;$/;"	m	class:KFS::WriteAppender::Impl	file:
mPreferredAppendSize	cc/libkfsClient/KfsProtocolWorker.cc	/^    const int         mPreferredAppendSize;$/;"	m	class:KFS::KfsProtocolWorker::Impl	file:
mPreferredAppendSize	cc/libkfsClient/WriteAppender.cc	/^    const int               mPreferredAppendSize;$/;"	m	class:KFS::WriteAppender::Impl	file:
mPrevIdx	cc/qcdio/qcdiskqueue.cpp	/^        RequestIdx    mPrevIdx;$/;"	m	class:QCDiskQueue::Queue::Request	file:
mPrevNumToWrite	cc/chunk/ClientSM.h	/^    ByteCount                  mPrevNumToWrite;$/;"	m	class:KFS::ClientSM
mPrevPtr	cc/chunk/AtomicRecordAppender.cc	/^    AtomicRecordAppender*   mPrevPtr[1];$/;"	m	class:KFS::AtomicRecordAppender	file:
mPrevPtr	cc/chunk/BufferManager.h	/^        Client*        mPrevPtr[1];$/;"	m	class:KFS::BufferManager::Client
mPrevPtr	cc/chunk/ChunkManager.cc	/^    ChunkInfoHandle* mPrevPtr[ChunkManager::kChunkInfoHandleListCount];$/;"	m	class:KFS::ChunkInfoHandle	file:
mPrevPtr	cc/chunk/DiskIo.cc	/^    DiskQueue*          mPrevPtr[1];$/;"	m	class:KFS::DiskQueue	file:
mPrevPtr	cc/chunk/DiskIo.h	/^    DiskIo*                mPrevPtr[1];$/;"	m	class:KFS::DiskIo
mPrevPtr	cc/chunk/KfsOps.h	/^    RecordAppendOp* mPrevPtr[1];$/;"	m	struct:KFS::RecordAppendOp
mPrevPtr	cc/libkfsClient/KfsProtocolWorker.cc	/^        Appender*           mPrevPtr[1];$/;"	m	class:KFS::KfsProtocolWorker::Impl::Appender	file:
mPrevPtr	cc/libkfsClient/KfsProtocolWorker.cc	/^        SyncRequest* mPrevPtr[1];$/;"	m	class:KFS::KfsProtocolWorker::Impl::SyncRequest	file:
mPrevPtr	cc/libkfsClient/KfsProtocolWorker.h	/^        Request* mPrevPtr[1];$/;"	m	class:KFS::KfsProtocolWorker::Request
mPrevPtr	cc/qcdio/qciobufferpool.cpp	/^    Partition*   mPrevPtr[1];$/;"	m	class:QCIoBufferPool::Partition	file:
mPrevPtr	cc/qcdio/qciobufferpool.h	/^        Client*         mPrevPtr[1];$/;"	m	class:QCIoBufferPool::Client
mPrevPtr	cc/qcdio/qcthread.h	/^    QCThread*   mPrevPtr[1];$/;"	m	class:QCThread
mPrevRecordAppendOpSeq	cc/libkfsClient/WriteAppender.cc	/^    int64_t                 mPrevRecordAppendOpSeq;$/;"	m	class:KFS::WriteAppender::Impl	file:
mPriorityChunkReplicationCandidates	cc/meta/LayoutManager.h	/^		CRCandidateSet mPriorityChunkReplicationCandidates;$/;"	m	class:KFS::LayoutManager
mProducer	cc/libkfsIO/IOBuffer.h	/^    char             *mProducer;$/;"	m	class:KFS::IOBufferData
mProperties	cc/libkfsClient/KfsNetClient.cc	/^    Properties        mProperties;$/;"	m	class:KFS::KfsNetClient::Impl	file:
mProtocolWorker	cc/libkfsClient/KfsClientInt.h	/^    KfsProtocolWorker* mProtocolWorker;$/;"	m	class:KFS::KfsClientImpl
mPutRequestCount	cc/chunk/BufferManager.h	/^    RequestCount    mPutRequestCount;$/;"	m	class:KFS::BufferManager
mQueue	cc/qcdio/qcdiskqueue.cpp	/^        Queue&           mQueue;$/;"	m	class:QCDiskQueue::Queue::BuffersIterator	file:
mQueuePtr	cc/chunk/DiskIo.h	/^        DiskQueue* mQueuePtr;$/;"	m	class:KFS::DiskIo::File
mQueuePtr	cc/qcdio/qcdiskqueue.cpp	/^        Queue* mQueuePtr;$/;"	m	class:QCDiskQueue::Queue::IoThread	file:
mQueuePtr	cc/qcdio/qcdiskqueue.h	/^    Queue* mQueuePtr;$/;"	m	class:QCDiskQueue
mQueueStack	cc/libkfsClient/KfsNetClient.cc	/^    QueueStack        mQueueStack;$/;"	m	class:KFS::KfsNetClient::Impl	file:
mRack	cc/rebalancer/rebalancer.h	/^        int     mRack;$/;"	m	class:KFS::ChunkServer
mRackId	cc/chunk/MetaServerSM.h	/^    int mRackId;$/;"	m	class:KFS::MetaServerSM
mRackId	cc/meta/ChunkServer.h	/^		int mRackId;$/;"	m	class:KFS::ChunkServer
mRackId	cc/meta/LayoutManager.h	/^		uint32_t mRackId;$/;"	m	class:KFS::RackInfo
mRacks	cc/meta/LayoutManager.h	/^		std::vector<RackInfo> mRacks;$/;"	m	class:KFS::LayoutManager
mRandMax	cc/libkfsIO/NetErrorSimulator.cc	/^    const Random::result_type mRandMax;$/;"	m	class:KFS::NetErrorSimulator	file:
mRandSeed	cc/libkfsClient/KfsClientInt.h	/^    unsigned    mRandSeed;$/;"	m	class:KFS::KfsClientImpl
mRandom	cc/libkfsIO/NetErrorSimulator.cc	/^    Random                    mRandom;$/;"	m	class:KFS::NetErrorSimulator	file:
mReadAhead	cc/libkfsClient/KfsClientInt.h	/^    size_t         mReadAhead;$/;"	m	class:KFS::PendingChunkRead
mReadBufOffset	cc/chunk/DiskIo.h	/^    size_t                 mReadBufOffset;$/;"	m	class:KFS::DiskIo
mReadByteCount	cc/chunk/DiskIo.h	/^        Counter mReadByteCount;$/;"	m	struct:KFS::DiskIo::Counters
mReadChecksumErrorCount	cc/chunk/ChunkManager.h	/^        Counter mReadChecksumErrorCount;$/;"	m	struct:KFS::ChunkManager::Counters
mReadCount	cc/chunk/DiskIo.h	/^        Counter mReadCount;$/;"	m	struct:KFS::DiskIo::Counters
mReadErrorCount	cc/chunk/AtomicRecordAppender.h	/^        Counter mReadErrorCount;$/;"	m	struct:KFS::AtomicRecordAppendManager::Counters
mReadErrorCount	cc/chunk/ChunkManager.h	/^        Counter mReadErrorCount;$/;"	m	struct:KFS::ChunkManager::Counters
mReadErrorCount	cc/chunk/DiskIo.h	/^        Counter mReadErrorCount;$/;"	m	struct:KFS::DiskIo::Counters
mReadFlag	cc/libkfsClient/KfsPendingOp.h	/^    bool           mReadFlag;$/;"	m	class:KFS::KfsPendingOp
mReadHeaderDoneFlag	cc/libkfsClient/KfsNetClient.cc	/^    bool              mReadHeaderDoneFlag;$/;"	m	class:KFS::KfsNetClient::Impl	file:
mReadLength	cc/chunk/DiskIo.h	/^    size_t                 mReadLength;$/;"	m	class:KFS::DiskIo
mReadOnlyFlag	cc/chunk/AtomicRecordAppender.cc	/^        bool     mReadOnlyFlag;$/;"	m	struct:KFS::AtomicRecordAppender::WIdState	file:
mReadOp	cc/chunk/Replicator.h	/^    ReadOp mReadOp;$/;"	m	class:KFS::Replicator
mReadOp	cc/libkfsClient/KfsAsyncRW.h	/^        ReadOp mReadOp;$/;"	m	class:KFS::AsyncReadWorker
mReadOp	cc/libkfsClient/KfsClientInt.h	/^    ReadOp         mReadOp;$/;"	m	class:KFS::PendingChunkRead
mReadPendingBytes	cc/chunk/DiskIo.cc	/^    int64_t               mReadPendingBytes;$/;"	m	class:KFS::DiskIoQueues	file:
mReadReqCount	cc/chunk/DiskIo.cc	/^    int                   mReadReqCount;$/;"	m	class:KFS::DiskIoQueues	file:
mReadRequest	cc/libkfsClient/KfsAsyncRW.h	/^        MetaQueue<AsyncReadReq>		mReadRequest;$/;"	m	class:KFS::Asyncer
mReadRequestBytes	cc/chunk/ClientManager.h	/^        Counter mReadRequestBytes;$/;"	m	struct:KFS::ClientManager::Counters
mReadRequestCount	cc/chunk/ClientManager.h	/^        Counter mReadRequestCount;$/;"	m	struct:KFS::ClientManager::Counters
mReadRequestErrors	cc/chunk/ClientManager.h	/^        Counter mReadRequestErrors;$/;"	m	struct:KFS::ClientManager::Counters
mReadRequestTimeMicroSecs	cc/chunk/ClientManager.h	/^        Counter mReadRequestTimeMicroSecs;$/;"	m	struct:KFS::ClientManager::Counters
mReadResponse	cc/libkfsClient/KfsAsyncRW.h	/^        MetaQueue<AsyncReadReq>		mReadResponse;$/;"	m	class:KFS::Asyncer
mRecAppendOp	cc/libkfsClient/WriteAppender.cc	/^    RecordAppendOp          mRecAppendOp;$/;"	m	class:KFS::WriteAppender::Impl	file:
mRecoveryIntervalSecs	cc/meta/LayoutManager.h	/^		int mRecoveryIntervalSecs;$/;"	m	class:KFS::LayoutManager
mRecoveryStartTime	cc/meta/LayoutManager.h	/^		time_t mRecoveryStartTime;$/;"	m	class:KFS::LayoutManager
mRecursionCnt	cc/chunk/ClientSM.h	/^    int                        mRecursionCnt;$/;"	m	class:KFS::ClientSM
mRecursionCnt	cc/meta/ClientSM.h	/^        int             mRecursionCnt;$/;"	m	class:KFS::ClientSM
mReloadChunkServersPropertiesFlag	cc/meta/LayoutManager.h	/^		bool       mReloadChunkServersPropertiesFlag;$/;"	m	class:KFS::LayoutManager
mRemainingCount	cc/chunk/BufferManager.h	/^    ByteCount       mRemainingCount;$/;"	m	class:KFS::BufferManager
mRemoteSyncers	cc/chunk/ChunkServer.h	/^    std::list<RemoteSyncSMPtr> mRemoteSyncers;$/;"	m	class:KFS::ChunkServer
mRemoteSyncers	cc/chunk/ClientSM.h	/^    std::list<RemoteSyncSMPtr> mRemoteSyncers;$/;"	m	class:KFS::ClientSM
mRemove	cc/libkfsIO/NetManager.h	/^    List                mRemove;$/;"	m	class:KFS::NetManager
mReplicationErrorCount	cc/chunk/AtomicRecordAppender.h	/^        Counter mReplicationErrorCount;$/;"	m	struct:KFS::AtomicRecordAppendManager::Counters
mReplicationList	cc/chunk/AtomicRecordAppender.cc	/^    RecordAppendOp*         mReplicationList[1];$/;"	m	class:KFS::AtomicRecordAppender	file:
mReplicationPos	cc/chunk/AtomicRecordAppender.cc	/^    const int               mReplicationPos;$/;"	m	class:KFS::AtomicRecordAppender	file:
mReplicationTimeoutCount	cc/chunk/AtomicRecordAppender.h	/^        Counter mReplicationTimeoutCount;$/;"	m	struct:KFS::AtomicRecordAppendManager::Counters
mReplicationTimeoutSec	cc/chunk/AtomicRecordAppender.h	/^    int                   mReplicationTimeoutSec;$/;"	m	class:KFS::AtomicRecordAppendManager
mReplicationTodoStats	cc/meta/LayoutManager.h	/^		Counter *mReplicationTodoStats;$/;"	m	class:KFS::LayoutManager
mReplicationsInFlight	cc/chunk/AtomicRecordAppender.cc	/^    int                     mReplicationsInFlight;$/;"	m	class:KFS::AtomicRecordAppender	file:
mReplyNumBytes	cc/chunk/RemoteSyncSM.h	/^    int      mReplyNumBytes;$/;"	m	class:KFS::RemoteSyncSM
mReplySeqNum	cc/chunk/RemoteSyncSM.h	/^    kfsSeq_t mReplySeqNum;$/;"	m	class:KFS::RemoteSyncSM
mReq	cc/libkfsClient/KfsAsyncRW.h	/^        AsyncReq *mReq;$/;"	m	class:KFS::AsyncWorker
mReqHeadIdx	cc/qcdio/qcdiskqueue.cpp	/^        const RequestIdx mReqHeadIdx;$/;"	m	class:QCDiskQueue::Queue::BuffersIterator	file:
mReqIdx	cc/qcdio/qcdiskqueue.cpp	/^        RequestIdx       mReqIdx;$/;"	m	class:QCDiskQueue::Queue::BuffersIterator	file:
mReqWaitersCount	cc/qcdio/qcdiskqueue.cpp	/^    int             mReqWaitersCount;$/;"	m	class:QCDiskQueue::Queue	file:
mRequest	cc/meta/ClientSM.cc	/^	Counter mRequest[kReqTypesCnt];$/;"	m	class:RequestStatsGatherer	file:
mRequestBufferCount	cc/qcdio/qcdiskqueue.cpp	/^    int             mRequestBufferCount;$/;"	m	class:QCDiskQueue::Queue	file:
mRequestByteCount	cc/chunk/BufferManager.h	/^        Counter mRequestByteCount;$/;"	m	struct:KFS::BufferManager::Counters
mRequestCount	cc/chunk/BufferManager.h	/^        Counter mRequestCount;$/;"	m	struct:KFS::BufferManager::Counters
mRequestCount	cc/qcdio/qcunittest.cpp	/^        int       mRequestCount;$/;"	m	class:QCDiskQueueTest::RequestWaiter	file:
mRequestDeniedByteCount	cc/chunk/BufferManager.h	/^        Counter mRequestDeniedByteCount;$/;"	m	struct:KFS::BufferManager::Counters
mRequestDeniedCount	cc/chunk/BufferManager.h	/^        Counter mRequestDeniedCount;$/;"	m	struct:KFS::BufferManager::Counters
mRequestGrantedByteCount	cc/chunk/BufferManager.h	/^        Counter mRequestGrantedByteCount;$/;"	m	struct:KFS::BufferManager::Counters
mRequestGrantedCount	cc/chunk/BufferManager.h	/^        Counter mRequestGrantedCount;$/;"	m	struct:KFS::BufferManager::Counters
mRequestId	cc/chunk/DiskIo.h	/^    QCDiskQueue::RequestId mRequestId;$/;"	m	class:KFS::DiskIo
mRequestId	cc/qcdio/qcdiskqueue.h	/^        RequestId mRequestId;$/;"	m	class:QCDiskQueue::EnqueueStatus
mRequestLengthExceededCount	cc/chunk/ClientManager.h	/^        Counter mRequestLengthExceededCount;$/;"	m	struct:KFS::ClientManager::Counters
mRequestType	cc/libkfsClient/KfsProtocolWorker.h	/^        RequestType  mRequestType;$/;"	m	class:KFS::KfsProtocolWorker::Request
mRequestsPtr	cc/qcdio/qcdiskqueue.cpp	/^    Request*        mRequestsPtr;$/;"	m	class:QCDiskQueue::Queue	file:
mReservationDecayStep	cc/meta/LayoutManager.h	/^                int    mReservationDecayStep;$/;"	m	class:KFS::LayoutManager
mReservationOvercommitFactor	cc/meta/LayoutManager.h	/^                double mReservationOvercommitFactor;$/;"	m	class:KFS::LayoutManager
mReservations	cc/chunk/ClientSM.h	/^    ChunkSpaceResMap           mReservations;$/;"	m	class:KFS::ClientSM
mReserveSpaceCount	cc/libkfsClient/WriteAppender.h	/^        Counter mReserveSpaceCount;$/;"	m	struct:KFS::WriteAppender::Stats
mReserveSpaceDeniedCount	cc/libkfsClient/WriteAppender.h	/^        Counter mReserveSpaceDeniedCount;$/;"	m	struct:KFS::WriteAppender::Stats
mResponseTimeoutCount	cc/libkfsClient/KfsNetClient.h	/^        Counter mResponseTimeoutCount;$/;"	m	struct:KFS::KfsNetClient::Stats
mRestartQueuedFlag	cc/meta/ChunkServer.h	/^                bool       mRestartQueuedFlag;$/;"	m	class:KFS::ChunkServer
mRestartScheduledFlag	cc/meta/ChunkServer.h	/^                bool       mRestartScheduledFlag;$/;"	m	class:KFS::ChunkServer
mRestartScheduledTime	cc/meta/ChunkServer.h	/^                time_t     mRestartScheduledTime;$/;"	m	class:KFS::ChunkServer
mResult	cc/libkfsClient/KfsPendingOp.h	/^    ssize_t        mResult;$/;"	m	class:KFS::KfsPendingOp
mRetStatus	cc/libkfsClient/KfsProtocolWorker.cc	/^        int          mRetStatus;$/;"	m	class:KFS::KfsProtocolWorker::Impl::SyncRequest	file:
mRetireStartTime	cc/meta/ChunkServer.h	/^		time_t mRetireStartTime;$/;"	m	class:KFS::ChunkServer
mRetriesCount	cc/libkfsClient/WriteAppender.h	/^        Counter mRetriesCount;$/;"	m	struct:KFS::WriteAppender::Stats
mRetryConnectOnlyFlag	cc/libkfsClient/KfsNetClient.cc	/^    bool              mRetryConnectOnlyFlag;$/;"	m	class:KFS::KfsNetClient::Impl	file:
mRetryCount	cc/libkfsClient/KfsNetClient.cc	/^        int       mRetryCount;$/;"	m	struct:KFS::KfsNetClient::Impl::OpQueueEntry	file:
mRetryCount	cc/libkfsClient/KfsNetClient.cc	/^    int               mRetryCount;$/;"	m	class:KFS::KfsNetClient::Impl	file:
mRetryCount	cc/libkfsClient/WriteAppender.cc	/^    int                     mRetryCount;$/;"	m	class:KFS::WriteAppender::Impl	file:
mRunFlag	cc/common/BufferedLogWriter.cc	/^    bool         mRunFlag;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mRunFlag	cc/libkfsIO/NetManager.h	/^    volatile bool       mRunFlag;$/;"	m	class:KFS::NetManager
mRunFlag	cc/qcdio/qcdiskqueue.cpp	/^    bool            mRunFlag;$/;"	m	class:QCDiskQueue::Queue	file:
mRunnablePtr	cc/qcdio/qcthread.h	/^    QCRunnable* mRunnablePtr;$/;"	m	class:QCThread
mSendCommitAckTimeoutSec	cc/chunk/AtomicRecordAppender.h	/^    int                   mSendCommitAckTimeoutSec;$/;"	m	class:KFS::AtomicRecordAppendManager
mSentHello	cc/chunk/MetaServerSM.h	/^    bool mSentHello;$/;"	m	class:KFS::MetaServerSM
mSeq	cc/chunk/AtomicRecordAppender.cc	/^        kfsSeq_t mSeq;$/;"	m	struct:KFS::AtomicRecordAppender::WIdState	file:
mSeqNo	cc/meta/ChunkServer.h	/^                seq_t mSeqNo;$/;"	m	class:KFS::ChunkServer
mSeqnum	cc/chunk/RemoteSyncSM.h	/^    kfsSeq_t mSeqnum;$/;"	m	class:KFS::RemoteSyncSM
mServerDownReplicationDelay	cc/meta/LayoutManager.h	/^		int    mServerDownReplicationDelay;$/;"	m	class:KFS::LayoutManager
mServerIp	cc/libkfsIO/TelemetryClient.h	/^        std::string mServerIp;$/;"	m	class:KFS::TelemetryClient
mServerLocation	cc/libkfsClient/KfsNetClient.cc	/^    ServerLocation    mServerLocation;$/;"	m	class:KFS::KfsNetClient::Impl	file:
mServerName	cc/libkfsClient/KfsAsyncRW.h	/^        std::string mServerName; \/\/ stash the server name so we can print it out in log messages$/;"	m	struct:KFS::AsyncReq
mServerPort	cc/libkfsIO/TelemetryClient.h	/^        int mServerPort;$/;"	m	class:KFS::TelemetryClient
mServers	cc/meta/LayoutManager.h	/^		std::vector<ChunkServerPtr> mServers;$/;"	m	class:KFS::RackInfo
mShutdownFlag	cc/libkfsIO/NetManager.h	/^    bool                mShutdownFlag;$/;"	m	class:KFS::NetManager
mSize	cc/libkfsClient/KfsProtocolWorker.h	/^        int          mSize;$/;"	m	class:KFS::KfsProtocolWorker::Request
mSize	cc/meta/LayoutManager.h	/^		off_t    mSize;$/;"	m	struct:KFS::PendingMakeStableEntry
mSizeOp	cc/libkfsClient/WriteAppender.cc	/^    SizeOp                  mSizeOp;$/;"	m	class:KFS::WriteAppender::Impl	file:
mSlavesCount	cc/meta/LayoutManager.h	/^                size_t mSlavesCount;$/;"	m	class:KFS::LayoutManager
mSleepSec	cc/libkfsIO/NetErrorSimulator.cc	/^        float    mSleepSec;$/;"	m	struct:KFS::NetErrorSimulator::SimSpec	file:
mSleepTimeSec	cc/libkfsClient/KfsNetClient.h	/^        Counter mSleepTimeSec;$/;"	m	struct:KFS::KfsNetClient::Stats
mSleepTimeSec	cc/libkfsClient/WriteAppender.h	/^        Counter mSleepTimeSec;$/;"	m	struct:KFS::WriteAppender::Stats
mSleepingFlag	cc/libkfsClient/KfsNetClient.cc	/^    bool              mSleepingFlag;$/;"	m	class:KFS::KfsNetClient::Impl	file:
mSleepingFlag	cc/libkfsClient/WriteAppender.cc	/^    bool                    mSleepingFlag;$/;"	m	class:KFS::WriteAppender::Impl	file:
mSleepingFlag	cc/libkfsIO/NetManager.cc	/^    bool    mSleepingFlag;$/;"	m	class:NetManager::Waker	file:
mSlots	cc/libkfsIO/EventManager.h	/^    std::list<EventPtr>	mSlots[MAX_EVENT_SLOTS];$/;"	m	class:KFS::EventManager
mSlowNodes	cc/libkfsClient/KfsClientInt.h	/^    std::vector<struct in_addr> mSlowNodes;$/;"	m	class:KFS::KfsClientImpl
mSock	cc/libkfsIO/NetConnection.h	/^    TcpSocket*          mSock;$/;"	m	class:KFS::NetConnection
mSock	cc/libkfsIO/NetManager.h	/^            TcpSocket        mSock;$/;"	m	struct:KFS::NetManager::Timer::Handler
mSock	cc/libkfsIO/TelemetryClient.h	/^        int mSock;$/;"	m	class:KFS::TelemetryClient
mSockFd	cc/libkfsIO/TcpSocket.h	/^    int mSockFd;$/;"	m	class:KFS::TcpSocket
mSockNameRegex	cc/libkfsIO/NetErrorSimulator.cc	/^        Regex    mSockNameRegex;$/;"	m	struct:KFS::NetErrorSimulator::SimSpec	file:
mSocket	cc/libkfsClient/KfsClientInt.h	/^    TcpSocket*     mSocket;$/;"	m	class:KFS::PendingChunkRead
mSpaceAllocPendingFlag	cc/qcdio/qcdiskqueue.cpp	/^        bool     mSpaceAllocPendingFlag:1;$/;"	m	struct:QCDiskQueue::Queue::FileInfo	file:
mSpaceAvailable	cc/libkfsClient/WriteAppender.cc	/^    int                     mSpaceAvailable;$/;"	m	class:KFS::WriteAppender::Impl	file:
mSpaceReleaseOp	cc/libkfsClient/WriteAppender.cc	/^    ChunkSpaceReleaseOp     mSpaceReleaseOp;$/;"	m	class:KFS::WriteAppender::Impl	file:
mSpaceReserveByteCount	cc/chunk/AtomicRecordAppender.h	/^        Counter mSpaceReserveByteCount;$/;"	m	struct:KFS::AtomicRecordAppendManager::Counters
mSpaceReserveCount	cc/chunk/AtomicRecordAppender.h	/^        Counter mSpaceReserveCount;$/;"	m	struct:KFS::AtomicRecordAppendManager::Counters
mSpaceReserveDeniedCount	cc/chunk/AtomicRecordAppender.h	/^        Counter mSpaceReserveDeniedCount;$/;"	m	struct:KFS::AtomicRecordAppendManager::Counters
mSpaceReserveErrorCount	cc/chunk/AtomicRecordAppender.h	/^        Counter mSpaceReserveErrorCount;$/;"	m	struct:KFS::AtomicRecordAppendManager::Counters
mSpaceReserveOp	cc/libkfsClient/WriteAppender.cc	/^    ChunkSpaceReserveOp     mSpaceReserveOp;$/;"	m	class:KFS::WriteAppender::Impl	file:
mSpecIt	cc/libkfsIO/NetErrorSimulator.cc	/^        SimSpecs::const_iterator mSpecIt;$/;"	m	struct:KFS::NetErrorSimulator::ConnEntry	file:
mSpecs	cc/libkfsIO/NetErrorSimulator.cc	/^    SimSpecs                  mSpecs;$/;"	m	class:KFS::NetErrorSimulator	file:
mStaleChunkCount	cc/meta/LayoutManager.h	/^		Counter *mStaleChunkCount;$/;"	m	class:KFS::LayoutManager
mStartPtr	cc/qcdio/qciobufferpool.cpp	/^    char*        mStartPtr;$/;"	m	class:QCIoBufferPool::Partition	file:
mStartTime	cc/libkfsClient/KfsAsyncRW.h	/^        time_t mStartTime;$/;"	m	class:KFS::AsyncWorker
mStartTime	cc/libkfsIO/NetManager.h	/^            time_t           mStartTime;$/;"	m	struct:KFS::NetManager::Timer::Handler
mStartTime	cc/libkfsIO/NetManager.h	/^    const time_t        mStartTime;$/;"	m	class:KFS::NetManager
mStartTime	cc/meta/LayoutManager.h	/^		const time_t mStartTime;$/;"	m	class:KFS::LayoutManager
mStartedFlag	cc/qcdio/qcthread.h	/^    bool        mStartedFlag;$/;"	m	class:QCThread
mState	cc/chunk/AtomicRecordAppender.cc	/^    State                   mState;$/;"	m	class:KFS::AtomicRecordAppender	file:
mState	cc/libkfsClient/KfsProtocolWorker.h	/^        State        mState;$/;"	m	class:KFS::KfsProtocolWorker::Request
mStats	cc/libkfsClient/KfsNetClient.cc	/^    Stats             mStats;$/;"	m	class:KFS::KfsNetClient::Impl	file:
mStats	cc/libkfsClient/WriteAppender.cc	/^    Stats                   mStats;$/;"	m	class:KFS::WriteAppender::Impl	file:
mStatus	cc/chunk/AtomicRecordAppender.cc	/^        int      mStatus;$/;"	m	struct:KFS::AtomicRecordAppender::WIdState	file:
mStatus	cc/libkfsClient/KfsProtocolWorker.h	/^        int          mStatus;$/;"	m	class:KFS::KfsProtocolWorker::Request
mStopFlag	cc/libkfsClient/KfsAsyncRW.h	/^        bool				mStopFlag;$/;"	m	class:KFS::Asyncer
mStopFlag	cc/libkfsClient/KfsPendingOp.h	/^    bool           mStopFlag;$/;"	m	class:KFS::KfsPendingOp
mStopRequest	cc/libkfsClient/KfsProtocolWorker.cc	/^    StopRequest       mStopRequest;$/;"	m	class:KFS::KfsProtocolWorker::Impl	file:
mStorage	cc/libkfsIO/KfsCallbackObj.h	/^        char mStorage[sizeof(ObjectMethod<ObjectMethodBase>)];$/;"	m	struct:KFS::KfsCallbackObj::__anon22
mSyncCount	cc/chunk/DiskIo.h	/^        Counter mSyncCount;$/;"	m	struct:KFS::DiskIo::Counters
mSyncErrorCount	cc/chunk/DiskIo.h	/^        Counter mSyncErrorCount;$/;"	m	struct:KFS::DiskIo::Counters
mSysError	cc/qcdio/qcdiskqueue.h	/^        int   mSysError;$/;"	m	class:QCDiskQueue::Status
mTelemetryReporter	cc/chunk/ChunkServer.h	/^    TelemetryClient mTelemetryReporter;$/;"	m	class:KFS::ChunkServer
mTelemetryReporter	cc/libkfsClient/KfsClientInt.h	/^    TelemetryClient mTelemetryReporter;$/;"	m	class:KFS::KfsClientImpl
mThread	cc/common/BufferedLogWriter.cc	/^    QCThread     mThread;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mThread	cc/libkfsClient/KfsAsyncRW.h	/^        QCThread			mThread;$/;"	m	class:KFS::Asyncer
mThread	cc/libkfsClient/KfsPendingOp.h	/^    QCThread       mThread;$/;"	m	class:KFS::KfsPendingOp
mThread	cc/qcdio/qcthread.h	/^    pthread_t   mThread;$/;"	m	class:QCThread
mThreadCount	cc/qcdio/qcdiskqueue.cpp	/^    int             mThreadCount;$/;"	m	class:QCDiskQueue::Queue	file:
mThreadIndex	cc/qcdio/qcdiskqueue.cpp	/^        int    mThreadIndex;$/;"	m	class:QCDiskQueue::Queue::IoThread	file:
mThreadsPtr	cc/qcdio/qcdiskqueue.cpp	/^    IoThread*       mThreadsPtr;$/;"	m	class:QCDiskQueue::Queue	file:
mTime	cc/libkfsClient/KfsNetClient.cc	/^        time_t    mTime;$/;"	m	struct:KFS::KfsNetClient::Impl::OpQueueEntry	file:
mTimeSec	cc/common/BufferedLogWriter.cc	/^    int64_t      mTimeSec;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mTimeSecBetweenRetries	cc/libkfsClient/KfsNetClient.cc	/^    int               mTimeSecBetweenRetries;$/;"	m	class:KFS::KfsNetClient::Impl	file:
mTimeSecBetweenRetries	cc/libkfsClient/KfsProtocolWorker.cc	/^    const int         mTimeSecBetweenRetries;$/;"	m	class:KFS::KfsProtocolWorker::Impl	file:
mTimeSecBetweenRetries	cc/libkfsClient/WriteAppender.cc	/^    const int               mTimeSecBetweenRetries;$/;"	m	class:KFS::WriteAppender::Impl	file:
mTimeSpent	cc/libkfsIO/Counter.h	/^    float mTimeSpent;$/;"	m	class:KFS::Counter
mTimeStampFormat	cc/common/BufferedLogWriter.cc	/^    string       mTimeStampFormat;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mTimeTm	cc/common/BufferedLogWriter.cc	/^    struct tm    mTimeTm;$/;"	m	class:KFS::BufferedLogWriter::Impl	typeref:struct:KFS::BufferedLogWriter::Impl::tm	file:
mTimeoutHandlers	cc/libkfsIO/NetManager.h	/^    std::list<ITimeout *>	mTimeoutHandlers;$/;"	m	class:KFS::NetManager
mTimeoutLostCount	cc/chunk/AtomicRecordAppender.h	/^        Counter mTimeoutLostCount;$/;"	m	struct:KFS::AtomicRecordAppendManager::Counters
mTimeoutMs	cc/libkfsIO/Event.h	/^    int			mTimeoutMs;$/;"	m	class:KFS::Event
mTimeoutMs	cc/libkfsIO/NetManager.h	/^    const int           mTimeoutMs;$/;"	m	class:KFS::NetManager
mTimeoutOp	cc/chunk/ChunkManager.cc	/^    TimeoutOp		mTimeoutOp;$/;"	m	class:KFS::ChunkManager::ChunkManagerTimeoutImpl	file:
mTimer	cc/chunk/AtomicRecordAppender.cc	/^    Timer                   mTimer;$/;"	m	class:KFS::AtomicRecordAppender	file:
mTimer	cc/meta/ChunkReplicator.h	/^	ChunkReplicatorTimeoutImpl *mTimer;$/;"	m	class:KFS::ChunkReplicator
mTimer	cc/meta/LeaseCleaner.h	/^	LeaseCleanerTimeoutImpl *mTimer;$/;"	m	class:KFS::LeaseCleaner
mTimerOverrunCount	cc/libkfsIO/NetManager.h	/^    int64_t             mTimerOverrunCount;$/;"	m	class:KFS::NetManager
mTimerOverrunSec	cc/libkfsIO/NetManager.h	/^    int64_t             mTimerOverrunSec;$/;"	m	class:KFS::NetManager
mTimerRunningFlag	cc/libkfsIO/NetManager.h	/^    bool                mTimerRunningFlag;$/;"	m	class:KFS::NetManager
mTimerWheel	cc/libkfsIO/NetManager.h	/^    List                mTimerWheel[kTimerWheelSize + 1];$/;"	m	class:KFS::NetManager
mTimerWheelBucketItr	cc/libkfsIO/NetManager.h	/^    List::iterator      mTimerWheelBucketItr;$/;"	m	class:KFS::NetManager
mTimerWheelSlot	cc/libkfsIO/NetConnection.h	/^        int            mTimerWheelSlot;$/;"	m	class:KFS::NetConnection::NetManagerEntry
mTotal	cc/meta/ClientSM.cc	/^	Counter mTotal;$/;"	m	class:RequestStatsGatherer	file:
mTotalBuffersBytes	cc/chunk/AtomicRecordAppender.h	/^    int64_t               mTotalBuffersBytes;$/;"	m	class:KFS::AtomicRecordAppendManager
mTotalCnt	cc/qcdio/qciobufferpool.cpp	/^    int          mTotalCnt;$/;"	m	class:QCIoBufferPool::Partition	file:
mTotalCount	cc/chunk/BufferManager.h	/^    ByteCount       mTotalCount;$/;"	m	class:KFS::BufferManager
mTotalCount	cc/qcdio/qcdiskqueue.cpp	/^    int             mTotalCount;$/;"	m	class:QCDiskQueue::Queue	file:
mTotalDroppedCount	cc/common/BufferedLogWriter.cc	/^    Count        mTotalDroppedCount;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mTotalLogWaitedTime	cc/common/BufferedLogWriter.cc	/^    Time         mTotalLogWaitedTime;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mTotalPendingBytes	cc/chunk/AtomicRecordAppender.h	/^    int64_t               mTotalPendingBytes;$/;"	m	class:KFS::AtomicRecordAppendManager
mTotalReplicationStats	cc/meta/LayoutManager.h	/^		Counter *mTotalReplicationStats;$/;"	m	class:KFS::LayoutManager
mTotalSpace	cc/chunk/ChunkManager.h	/^    int64_t	mTotalSpace;$/;"	m	class:KFS::ChunkManager
mTotalSpace	cc/meta/ChunkServer.h	/^                int64_t mTotalSpace;$/;"	m	class:KFS::ChunkServer
mTotalSpace	cc/meta/LayoutManager.h	/^		uint64_t mTotalSpace;$/;"	m	class:KFS::RackInfo
mTotalSpace	cc/rebalancer/rebalancer.h	/^        off_t   mTotalSpace;$/;"	m	class:KFS::ChunkServer
mTruncatedCount	cc/common/BufferedLogWriter.cc	/^    Count        mTruncatedCount;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mTruncatedSuffix	cc/common/BufferedLogWriter.cc	/^    string       mTruncatedSuffix;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mUnderLoadedServers	cc/rebalancer/rebalancer.h	/^        std::vector<ChunkServerPtr> mUnderLoadedServers;$/;"	m	class:KFS::Rebalancer
mUptime	cc/meta/ChunkServer.h	/^                int64_t    mUptime;$/;"	m	class:KFS::ChunkServer
mUseGMTFlag	cc/common/BufferedLogWriter.cc	/^    bool         mUseGMTFlag;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mUsedSpace	cc/chunk/ChunkManager.h	/^    int64_t	mUsedSpace;$/;"	m	class:KFS::ChunkManager
mUsedSpace	cc/meta/ChunkServer.h	/^                int64_t mUsedSpace;$/;"	m	class:KFS::ChunkServer
mUsedSpace	cc/rebalancer/rebalancer.h	/^        off_t	mUsedSpace;$/;"	m	class:KFS::ChunkServer
mUserDataPtr	cc/qcdio/qcfdpoll.cpp	/^        void* mUserDataPtr;$/;"	m	struct:QCFdPoll::Impl::FdMapEnry	file:
mValPtr	cc/qcdio/qcstutils.h	/^    T*       mValPtr;$/;"	m	class:QCStValueChanger
mValPtr	cc/qcdio/qcstutils.h	/^    T*       mValPtr;$/;"	m	class:QCStValueIncrementor
mWAppender	cc/libkfsClient/KfsProtocolWorker.cc	/^        WriteAppender       mWAppender;$/;"	m	class:KFS::KfsProtocolWorker::Impl::Appender	file:
mWaitQueuePtr	cc/chunk/BufferManager.h	/^    Client*         mWaitQueuePtr[1];$/;"	m	class:KFS::BufferManager
mWaitingByteCount	cc/chunk/BufferManager.h	/^    ByteCount       mWaitingByteCount;$/;"	m	class:KFS::BufferManager
mWaitingCount	cc/chunk/BufferManager.h	/^    int             mWaitingCount;$/;"	m	class:KFS::BufferManager
mWaitingFlag	cc/libkfsClient/KfsProtocolWorker.cc	/^        bool         mWaitingFlag;$/;"	m	class:KFS::KfsProtocolWorker::Impl::SyncRequest	file:
mWaitingForByteCount	cc/chunk/BufferManager.h	/^        ByteCount      mWaitingForByteCount;$/;"	m	class:KFS::BufferManager::Client
mWakeFlag	cc/libkfsIO/NetManager.cc	/^    bool    mWakeFlag;$/;"	m	class:NetManager::Waker	file:
mWakeUpCond	cc/libkfsClient/KfsPendingOp.h	/^    QCCondVar      mWakeUpCond;$/;"	m	class:KFS::KfsPendingOp
mWaker	cc/libkfsIO/NetManager.h	/^    Waker&              mWaker;$/;"	m	class:KFS::NetManager
mWorkCond	cc/qcdio/qcdiskqueue.cpp	/^    QCCondVar       mWorkCond;$/;"	m	class:QCDiskQueue::Queue	file:
mWorkQueue	cc/libkfsClient/KfsProtocolWorker.cc	/^        Request*            mWorkQueue[1];$/;"	m	class:KFS::KfsProtocolWorker::Impl::Appender	file:
mWorkQueue	cc/libkfsClient/KfsProtocolWorker.cc	/^    Request*          mWorkQueue[1];$/;"	m	class:KFS::KfsProtocolWorker::Impl	file:
mWorker	cc/chunk/Logger.h	/^    MetaThread mWorker;$/;"	m	class:KFS::Logger
mWorker	cc/libkfsClient/KfsProtocolWorker.cc	/^    QCThread          mWorker;$/;"	m	class:KFS::KfsProtocolWorker::Impl	file:
mWrieIdAllocRetryCount	cc/libkfsClient/WriteAppender.cc	/^    int                     mWrieIdAllocRetryCount;$/;"	m	class:KFS::WriteAppender::Impl	file:
mWriteByteCount	cc/chunk/DiskIo.h	/^        Counter mWriteByteCount;$/;"	m	struct:KFS::DiskIo::Counters
mWriteByteCount	cc/libkfsIO/NetConnection.h	/^        int            mWriteByteCount;$/;"	m	class:KFS::NetConnection::NetManagerEntry
mWriteBytesDiscardedCount	cc/common/BufferedLogWriter.cc	/^    Count        mWriteBytesDiscardedCount;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mWriteCancelWaiterPtr	cc/chunk/DiskIo.cc	/^    WriteCancelWaiter*    mWriteCancelWaiterPtr;$/;"	m	class:KFS::DiskIoQueues	file:
mWriteCond	cc/common/BufferedLogWriter.cc	/^    QCCondVar    mWriteCond;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mWriteCount	cc/chunk/DiskIo.h	/^        Counter mWriteCount;$/;"	m	struct:KFS::DiskIo::Counters
mWriteDoneCond	cc/common/BufferedLogWriter.cc	/^    QCCondVar    mWriteDoneCond;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mWriteDuration	cc/chunk/KfsOps.cc	/^    Counter mWriteDuration;$/;"	m	struct:OpCounterMap	file:
mWriteEndPtr	cc/common/BufferedLogWriter.cc	/^    const char*  mWriteEndPtr;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mWriteErrCount	cc/common/BufferedLogWriter.cc	/^    Count        mWriteErrCount;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mWriteErrorCount	cc/chunk/AtomicRecordAppender.h	/^        Counter mWriteErrorCount;$/;"	m	struct:KFS::AtomicRecordAppendManager::Counters
mWriteErrorCount	cc/chunk/ChunkManager.h	/^        Counter mWriteErrorCount;$/;"	m	struct:KFS::ChunkManager::Counters
mWriteErrorCount	cc/chunk/DiskIo.h	/^        Counter mWriteErrorCount;$/;"	m	struct:KFS::DiskIo::Counters
mWriteErrorCount	cc/common/BufferedLogWriter.h	/^        int64_t mWriteErrorCount;$/;"	m	struct:KFS::BufferedLogWriter::Counters
mWriteId	cc/chunk/ChunkManager.h	/^    int64_t mWriteId;$/;"	m	class:KFS::ChunkManager
mWriteIdAllocCount	cc/chunk/AtomicRecordAppender.h	/^        Counter mWriteIdAllocCount;$/;"	m	struct:KFS::AtomicRecordAppendManager::Counters
mWriteIdAllocErrorCount	cc/chunk/AtomicRecordAppender.h	/^        Counter mWriteIdAllocErrorCount;$/;"	m	struct:KFS::AtomicRecordAppendManager::Counters
mWriteIdAllocNoAppenderCount	cc/chunk/AtomicRecordAppender.h	/^        Counter mWriteIdAllocNoAppenderCount;$/;"	m	struct:KFS::AtomicRecordAppendManager::Counters
mWriteIdAllocOp	cc/libkfsClient/KfsAsyncRW.h	/^        WriteIdAllocOp mWriteIdAllocOp;$/;"	m	class:KFS::AsyncWriteWorker
mWriteIdAllocOp	cc/libkfsClient/WriteAppender.cc	/^    WriteIdAllocOp          mWriteIdAllocOp;$/;"	m	class:KFS::WriteAppender::Impl	file:
mWriteIdIt	cc/chunk/ChunkManager.h	/^            WriteIdSet::iterator  mWriteIdIt;$/;"	m	struct:KFS::ChunkManager::PendingWrites::LruEntry
mWriteIdState	cc/chunk/AtomicRecordAppender.cc	/^    WriteIdState            mWriteIdState;$/;"	m	class:KFS::AtomicRecordAppender	file:
mWriteIds	cc/chunk/ChunkManager.h	/^        WriteIdSet mWriteIds;$/;"	m	class:KFS::ChunkManager::PendingWrites
mWriteIds	cc/libkfsClient/WriteAppender.cc	/^    WriteIds                mWriteIds;$/;"	m	class:KFS::WriteAppender::Impl	file:
mWriteMaster	cc/chunk/KfsOps.cc	/^    Counter mWriteMaster;$/;"	m	struct:OpCounterMap	file:
mWriteOp	cc/chunk/Replicator.h	/^    WriteOp mWriteOp;$/;"	m	class:KFS::Replicator
mWritePendingBytes	cc/chunk/DiskIo.cc	/^    int64_t               mWritePendingBytes;$/;"	m	class:KFS::DiskIoQueues	file:
mWritePrepareOp	cc/libkfsClient/KfsAsyncRW.h	/^        WritePrepareOp mWritePrepareOp;$/;"	m	class:KFS::AsyncWriteWorker
mWritePtr	cc/common/BufferedLogWriter.cc	/^    const char*  mWritePtr;$/;"	m	class:KFS::BufferedLogWriter::Impl	file:
mWriteQueue	cc/libkfsClient/WriteAppender.cc	/^    WriteQueue              mWriteQueue;$/;"	m	class:KFS::WriteAppender::Impl	file:
mWriteReqCount	cc/chunk/DiskIo.cc	/^    int                   mWriteReqCount;$/;"	m	class:KFS::DiskIoQueues	file:
mWriteRequest	cc/libkfsClient/KfsAsyncRW.h	/^        MetaQueue<AsyncWriteReq>	mWriteRequest;$/;"	m	class:KFS::Asyncer
mWriteRequestBytes	cc/chunk/ClientManager.h	/^        Counter mWriteRequestBytes;$/;"	m	struct:KFS::ClientManager::Counters
mWriteRequestCount	cc/chunk/ClientManager.h	/^        Counter mWriteRequestCount;$/;"	m	struct:KFS::ClientManager::Counters
mWriteRequestErrors	cc/chunk/ClientManager.h	/^        Counter mWriteRequestErrors;$/;"	m	struct:KFS::ClientManager::Counters
mWriteRequestTimeMicroSecs	cc/chunk/ClientManager.h	/^        Counter mWriteRequestTimeMicroSecs;$/;"	m	struct:KFS::ClientManager::Counters
mWriteResponse	cc/libkfsClient/KfsAsyncRW.h	/^        MetaQueue<AsyncWriteReq>	mWriteResponse;$/;"	m	class:KFS::Asyncer
mWriteSyncOp	cc/libkfsClient/KfsAsyncRW.h	/^        WriteSyncOp mWriteSyncOp;$/;"	m	class:KFS::AsyncWriteWorker
mWriteThreshold	cc/libkfsClient/KfsProtocolWorker.cc	/^        int                 mWriteThreshold;$/;"	m	class:KFS::KfsProtocolWorker::Impl::Appender	file:
mWriteThreshold	cc/libkfsClient/KfsProtocolWorker.cc	/^    const int         mWriteThreshold;$/;"	m	class:KFS::KfsProtocolWorker::Impl	file:
mWriteThreshold	cc/libkfsClient/WriteAppender.cc	/^    int                     mWriteThreshold;$/;"	m	class:KFS::WriteAppender::Impl	file:
mWritten	cc/libkfsIO/NetKicker.cc	/^    int     mWritten;$/;"	m	class:NetKicker::Impl	file:
mWritten	cc/libkfsIO/NetManager.cc	/^    int     mWritten;$/;"	m	class:NetManager::Waker	file:
main	cc/chunk/ChunkServer_main.cc	/^main(int argc, char **argv)$/;"	f
main	cc/chunk/chunkscrubber_main.cc	/^int main(int argc, char **argv)$/;"	f
main	cc/chunk/chunktrimmer_main.cc	/^int main(int argc, char **argv)$/;"	f
main	cc/chunk/chunkupgrade_main.cc	/^int main(int argc, char **argv)$/;"	f
main	cc/emulator/rebalanceexecutor_main.cc	/^main(int argc, char **argv)$/;"	f
main	cc/emulator/rebalanceplanner_main.cc	/^main(int argc, char **argv)$/;"	f
main	cc/emulator/replicachecker_main.cc	/^main(int argc, char **argv)$/;"	f
main	cc/emulator/rereplicator_main.cc	/^main(int argc, char **argv)$/;"	f
main	cc/fuse/kfs_fuse_main.cc	/^main(int argc, char **argv)$/;"	f
main	cc/meta/filelister_main.cc	/^int main(int argc, char **argv)$/;"	f
main	cc/meta/kfsfsck_main.cc	/^int main(int argc, char **argv)$/;"	f
main	cc/meta/logcompactor_main.cc	/^int main(int argc, char **argv)$/;"	f
main	cc/meta/metaserver_main.cc	/^main(int argc, char **argv)$/;"	f
main	cc/meta/restoremtime_main.cc	/^int main(int argc, char **argv)$/;"	f
main	cc/qcdio/iovperf.c	/^int main(int argc, char** argv)$/;"	f
main	cc/qcdio/qcunittest.cpp	/^main($/;"	f
main	cc/rebalancer/rebalancer_main.cc	/^main(int argc, char **argv)$/;"	f
main	cc/telemetry/telemetry_repeater_main.cc	/^int main(int argc, char **argv)$/;"	f
main	cc/telemetry/telemetry_server_main.cc	/^int main(int argc, char **argv)$/;"	f
main	cc/tests/KfsDataGen_main.cc	/^main(int argc, char **argv)$/;"	f
main	cc/tests/KfsDirFileTester_main.cc	/^main(int argc, char **argv)$/;"	f
main	cc/tests/KfsDirScanTest_main.cc	/^main(int argc, char **argv)$/;"	f
main	cc/tests/KfsLogTest_main.cc	/^int main(int argc, char** argv)$/;"	f
main	cc/tests/KfsPerfReader_main.cc	/^main(int argc, char **argv)$/;"	f
main	cc/tests/KfsPerfWriter_main.cc	/^main(int argc, char **argv)$/;"	f
main	cc/tests/KfsRW_main.cc	/^main(int argc, char **argv)$/;"	f
main	cc/tests/KfsReader_main.cc	/^main(int argc, char **argv)$/;"	f
main	cc/tests/KfsRecordAppend_main.cc	/^main(int argc, char **argv)$/;"	f
main	cc/tests/KfsSeekWrite_main.cc	/^main(int argc, char **argv)$/;"	f
main	cc/tests/KfsTrunc_main.cc	/^main(int argc, char **argv)$/;"	f
main	cc/tests/KfsWriter_main.cc	/^main(int argc, char **argv)$/;"	f
main	cc/tests/mkfstree_main.cc	/^main(int argc, char **argv)$/;"	f
main	cc/tools/KfsCat_main.cc	/^main(int argc, char **argv)$/;"	f
main	cc/tools/cpfromkfs_main.cc	/^main(int argc, char **argv)$/;"	f
main	cc/tools/cptokfs_main.cc	/^main(int argc, char **argv)$/;"	f
main	cc/tools/kfscp_main.cc	/^main(int argc, char **argv)$/;"	f
main	cc/tools/kfsdataverify_main.cc	/^int main(int argc, char **argv)$/;"	f
main	cc/tools/kfsfileenum_main.cc	/^main(int argc, char **argv)$/;"	f
main	cc/tools/kfsls_main.cc	/^main(int argc, char **argv)$/;"	f
main	cc/tools/kfsping_main.cc	/^int main(int argc, char **argv)$/;"	f
main	cc/tools/kfsput_main.cc	/^main(int argc, char **argv)$/;"	f
main	cc/tools/kfsrebalance_main.cc	/^int main(int argc, char **argv)$/;"	f
main	cc/tools/kfsretire_main.cc	/^int main(int argc, char **argv)$/;"	f
main	cc/tools/kfsshell_main.cc	/^main(int argc, char **argv)$/;"	f
main	cc/tools/kfsstats_main.cc	/^int main(int argc, char **argv)$/;"	f
main	cc/tools/kfstoggleworm_main.cc	/^int main(int argc, char **argv)$/;"	f
main	java/org/kosmix/kosmosfs/access/KfsTest.java	/^    public static void main(String args[]) {$/;"	m	class:KfsTest
makeChunkFilename	cc/chunk/chunkupgrade_main.cc	/^string makeChunkFilename(const string &chunkDir, const DiskChunkInfo_t &chunkInfo)$/;"	f
makeDumpsterDir	cc/meta/kfsops.cc	/^KFS::makeDumpsterDir()$/;"	f	class:KFS
make_if_needed	cc/chunk/ChunkServer_main.cc	/^make_if_needed(const char *dirname, bool check)$/;"	f	file:
make_test_directory	python/rw/rw.py	/^def make_test_directory(client):$/;"	f
makefattr	python/kfscp/kfscp.py	/^	def makefattr(self, parts):$/;"	m	class:cp
makename	cc/meta/util.cc	/^KFS::makename(const string dir, const string prefix, int number)$/;"	f	class:KFS
map_source	python/rw/rw.py	/^def map_source(src):$/;"	f
mapped_type	cc/meta/LayoutManager.h	/^		typedef Map::mapped_type    mapped_type;$/;"	t	class:KFS::CSMap
markparity	cc/meta/kfstree.h	/^	void markparity(int count)$/;"	f	class:KFS::Node
markskip	cc/meta/meta.h	/^	void markskip() { setflag(META_SKIP); }$/;"	f	class:KFS::Meta
master	cc/meta/request.h	/^	ChunkServerPtr master;$/;"	m	struct:KFS::MetaAllocate
masterCommitOffset	cc/chunk/KfsOps.h	/^    int64_t      masterCommitOffset;$/;"	m	struct:KFS::GetRecordAppendOpStatus
masterCommitOffset	cc/libkfsClient/KfsOps.h	/^    int64_t      masterCommitOffset;$/;"	m	struct:KFS::GetRecordAppendOpStatus
masterCommitted	cc/chunk/KfsOps.h	/^    off_t        masterCommitted; \/\/ input$/;"	m	struct:KFS::CloseOp
masterCommittedOffset	cc/chunk/KfsOps.h	/^    off_t        masterCommittedOffset; \/* input piggy back master's ack to slave *\/$/;"	m	struct:KFS::RecordAppendOp
masterFlag	cc/chunk/KfsOps.h	/^    bool         masterFlag;$/;"	m	struct:KFS::GetRecordAppendOpStatus
masterFlag	cc/libkfsClient/KfsOps.h	/^    bool         masterFlag;$/;"	m	struct:KFS::GetRecordAppendOpStatus
masterServer	cc/libkfsClient/KfsOps.h	/^    ServerLocation masterServer; \/\/ master for running the write transaction$/;"	m	struct:KFS::AllocateOp
match	cc/meta/meta.cc	/^MetaDentry::match(Meta *m)$/;"	f	class:MetaDentry
match	cc/meta/meta.h	/^	virtual bool match(Meta *test) { return id() == test->id(); }$/;"	f	class:KFS::Meta
max	cc/meta/kfsops.cc	/^struct timeval& max(struct timeval &a, struct timeval &b)$/;"	f
maxAppendersPerChunk	cc/libkfsClient/KfsOps.h	/^    int maxAppendersPerChunk;$/;"	m	struct:KFS::AllocateOp
maxAppendersPerChunk	cc/meta/request.h	/^	int maxAppendersPerChunk;$/;"	m	struct:KFS::MetaAllocate
maxReadAhead	cc/libkfsIO/NetConnection.h	/^    int                 maxReadAhead;$/;"	m	class:KFS::NetConnection
maxServerSpaceUtilThreshold	cc/meta/LayoutManager.cc	/^	double maxServerSpaceUtilThreshold;$/;"	m	class:LoadedServerPred	file:
md5sum	cc/chunk/KfsOps.h	/^    std::string md5sum;$/;"	m	struct:KFS::HelloMetaOp
mergeNeighbor	cc/meta/kfstree.cc	/^Node::mergeNeighbor(int pos)$/;"	f	class:Node
metaMagic	cc/chunk/Chunk.h	/^    int metaMagic;$/;"	m	struct:KFS::DiskChunkInfo_t
metaMagic	cc/chunk/chunkupgrade_main.cc	/^    int metaMagic;$/;"	m	struct:DiskChunkInfoV1_t	file:
metaType	cc/meta/base.h	/^	MetaType metaType() const { return type; }$/;"	f	class:KFS::MetaNode
metaVersion	cc/chunk/Chunk.h	/^    int metaVersion;$/;"	m	struct:KFS::DiskChunkInfo_t
metaVersion	cc/chunk/chunkupgrade_main.cc	/^    int metaVersion;$/;"	m	struct:DiskChunkInfoV1_t	file:
mgr	cc/meta/LayoutManager.cc	/^	LayoutManager *mgr;$/;"	m	class:RebalancePlanExecutor	file:
mismatchSizes	cc/emulator/LayoutEmulator.cc	/^    int &mismatchSizes;$/;"	m	class:RackAwareReplicationVerifier	file:
missing	cc/emulator/LayoutEmulator.cc	/^    int &missing;$/;"	m	class:RackAwareReplicationVerifier	file:
mkdir	cc/meta/kfsops.cc	/^Tree::mkdir(fid_t dir, const string &dname, fid_t *newFid)$/;"	f	class:Tree
mkdir_op	python/flogger/flogger.py	/^class mkdir_op(test_op):$/;"	c
mkdirs	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    int mkdirs(long ptr, String  path);$/;"	m	class:KfsAccess	file:
mmap	python/rw/rw.py	/^import mmap$/;"	i
mmap	python/unittests/dirops.py	/^import mmap$/;"	i
mmap	python/unittests/worm.py	/^import mmap$/;"	i
mmap	python/unittests/write-flush.py	/^import mmap, stat$/;"	i
mmap	python/unittests/write.py	/^import mmap$/;"	i
mode	cc/access/KfsModulePy.cc	/^	PyObject *mode;			\/\/ Access mode$/;"	m	struct:kfs_File	file:
modeflag	cc/access/KfsModulePy.cc	/^modeflag(const char *modestr)$/;"	f	file:
modificationTime	java/org/kosmix/kosmosfs/access/KfsFileAttr.java	/^    public long modificationTime;$/;"	f	class:KfsFileAttr
moveChildren	cc/meta/kfstree.cc	/^Node::moveChildren(Node *dest, int start, int n)$/;"	f	class:Node
moveToDumpster	cc/meta/kfsops.cc	/^Tree::moveToDumpster(fid_t dir, const string &fname)$/;"	f	class:Tree
movingAvg	cc/telemetry/telemetry_server.h	/^        double movingAvg;$/;"	m	struct:KFS::NodeState_t
msg	cc/telemetry/packet.h	/^        char msg[MSG_LEN];$/;"	m	struct:KFS::TelemetryClntPacket_t
mtime	cc/libkfsClient/KfsAttr.h	/^    struct timeval mtime; \/\/\/ modification time$/;"	m	struct:KFS::FileAttr	typeref:struct:KFS::FileAttr::timeval
mtime	cc/libkfsClient/KfsAttr.h	/^    struct timeval mtime; \/\/\/ modification time$/;"	m	struct:KFS::KfsFileAttr	typeref:struct:KFS::KfsFileAttr::timeval
mtime	cc/libkfsClient/KfsAttr.h	/^    struct timeval mtime; \/\/\/ modification time$/;"	m	struct:KFS::KfsServerAttr	typeref:struct:KFS::KfsServerAttr::timeval
mtime	cc/libkfsClient/KfsOps.h	/^    struct timeval mtime;$/;"	m	struct:KFS::SetMtimeOp	typeref:struct:KFS::SetMtimeOp::timeval
mtime	cc/meta/meta.h	/^	struct timeval mtime;	\/\/!< modification time$/;"	m	class:KFS::MetaFattr	typeref:struct:KFS::MetaFattr::timeval
mtime	cc/meta/request.h	/^	struct timeval mtime; 	\/\/!< the mtime to set$/;"	m	struct:KFS::MetaSetMtime	typeref:struct:KFS::MetaSetMtime::timeval
mutation	cc/meta/request.h	/^	const bool mutation; \/\/!< mutates metatree$/;"	m	struct:KFS::MetaRequest
mutations	cc/meta/checkpoint.h	/^	int mutations;		\/\/!< changes since last CP$/;"	m	class:KFS::Checkpoint
mutex	cc/meta/thread.h	/^	pthread_mutex_t mutex;$/;"	m	class:KFS::MetaThread
myHostname	cc/libkfsClient/KfsClient.cc	/^    string myHostname;$/;"	m	class:ChunkserverMatcher	file:
myLoc	cc/chunk/RemoteSyncSM.cc	/^    ServerLocation myLoc;$/;"	m	class:RemoteSyncSMMatcher	file:
myLocation	cc/chunk/KfsOps.h	/^    ServerLocation myLocation;$/;"	m	struct:KFS::HelloMetaOp
myid	cc/emulator/LayoutEmulator.cc	/^    chunkId_t myid;$/;"	m	class:ChunkIdMatcher	file:
myid	cc/meta/LayoutManager.cc	/^	chunkId_t myid;$/;"	m	class:ChunkIdMatcher	file:
myid	cc/meta/LayoutManager.cc	/^	const int64_t myid;$/;"	m	class:LeaseIdMatcher	file:
myid	cc/meta/kfsops.cc	/^	chunkId_t myid;$/;"	m	class:ChunkIdMatch	file:
myname	cc/libkfsClient/KfsClient.cc	/^    string myname;$/;"	m	class:FTMatcher	file:
myseq	cc/meta/ChunkServer.cc	/^	const seq_t myseq;$/;"	m	class:OpMatch	file:
n	cc/meta/kfstree.h	/^		Node *n;		\/\/!< parent node$/;"	m	struct:KFS::Tree::pathlink
n	cc/meta/meta.h	/^	seqid_t n;		\/\/!< id of this object$/;"	m	class:KFS::UniqueID
nSecsDown	cc/meta/request.h	/^	int nSecsDown; \/\/<! set to -1, we retire; otherwise, # of secs of down time$/;"	m	struct:KFS::MetaRetireChunkserver
name	cc/access/KfsModulePy.cc	/^	PyObject *name;			\/\/ File name$/;"	m	struct:kfs_File	file:
name	cc/libkfsClient/KfsClientInt.h	/^    std::string	name;$/;"	m	struct:KFS::FileTableEntry
name	cc/meta/checkpoint.h	/^	const string name() const { return cpname; }$/;"	f	class:KFS::Checkpoint
name	cc/meta/logger.h	/^	const string name() const { return logname; }	\/\/!< name of log file$/;"	f	class:KFS::Logger
name	cc/meta/meta.h	/^	string name;	\/\/!< name of this entry$/;"	m	class:KFS::MetaDentry
name	cc/meta/request.h	/^	string name;	\/\/!< name to create$/;"	m	struct:KFS::MetaCreate
name	cc/meta/request.h	/^	string name;	\/\/!< name to create$/;"	m	struct:KFS::MetaMkdir
name	cc/meta/request.h	/^	string name;	\/\/!< name to look up$/;"	m	struct:KFS::MetaLookup
name	cc/meta/request.h	/^	string name;	\/\/!< name to remove$/;"	m	struct:KFS::MetaRemove
name	cc/meta/request.h	/^	string name;	\/\/!< name to remove$/;"	m	struct:KFS::MetaRmdir
name	python/kfscp/kfscp.py	/^	def name(self, id):$/;"	m	class:cp
name_and_type	python/kfscp/kfscp.py	/^	def name_and_type(self, id):$/;"	m	class:cp
nbytes	cc/chunk/KfsOps.h	/^    size_t nbytes;$/;"	m	struct:KFS::ChunkSpaceReleaseOp
nbytes	cc/chunk/KfsOps.h	/^    size_t nbytes;$/;"	m	struct:KFS::ChunkSpaceReserveOp
needAck	cc/chunk/KfsOps.h	/^    bool         needAck;         \/\/ input: when set, this RPC is ack'ed$/;"	m	struct:KFS::CloseOp
needToForwardToPeer	cc/chunk/KfsOps.cc	/^needToForwardToPeer(string &serverInfo, uint32_t numServers, int &myPos,$/;"	f	file:
netProcessor	cc/chunk/ChunkServer.cc	/^static MetaThread netProcessor;$/;"	v	file:
netWorker	cc/chunk/ChunkServer.cc	/^netWorker(void *dummy)$/;"	f	file:
new_tree	cc/meta/kfstree.h	/^	int new_tree()			\/\/!< create a directory namespace$/;"	f	class:KFS::Tree
newname	cc/meta/request.h	/^	string newname;	\/\/!< new file name$/;"	m	struct:KFS::MetaRename
newpath	cc/libkfsClient/KfsOps.h	/^    const char *newpath;  \/\/ new path to be renamed to$/;"	m	struct:KFS::RenameOp
next	cc/chunk/KfsOps.h	/^    BeginMakeChunkStableOp* next;$/;"	m	struct:KFS::BeginMakeChunkStableOp
next	cc/chunk/KfsOps.h	/^    MakeChunkStableOp* next;$/;"	m	struct:KFS::MakeChunkStableOp
next	cc/meta/LayoutManager.h	/^		iterator next() {$/;"	f	class:KFS::CSMap
next	cc/meta/kfstree.h	/^	Node *next;			\/\/!< following peer node$/;"	m	class:KFS::Node
next	cc/meta/kfstree.h	/^	void next()$/;"	f	class:KFS::LeafIter
next	cc/meta/request.h	/^        MetaAllocate* next;$/;"	m	struct:KFS::MetaAllocate
nextChunkOffset	cc/meta/meta.h	/^	off_t nextChunkOffset;$/;"	m	class:KFS::MetaFattr
nextCommitOffset	cc/chunk/KfsOps.h	/^    int64_t      nextCommitOffset;$/;"	m	struct:KFS::GetRecordAppendOpStatus
nextCommitOffset	cc/libkfsClient/KfsOps.h	/^    int64_t      nextCommitOffset;$/;"	m	struct:KFS::GetRecordAppendOpStatus
nextSeq	cc/chunk/MetaServerSM.h	/^    kfsSeq_t nextSeq() {$/;"	f	class:KFS::MetaServerSM
nextSeq	cc/libkfsClient/KfsClientInt.h	/^    kfsSeq_t nextSeq() { return mCmdSeqNum++; }$/;"	f	class:KFS::KfsClientImpl
nextseq	cc/meta/logger.h	/^	seq_t nextseq;		\/\/!< next request sequence no.$/;"	m	class:KFS::Logger
nonzero_files	python/flogger/flogger.py	/^def nonzero_files(dirlist):$/;"	f
notStableAppendChunks	cc/chunk/KfsOps.h	/^    std::vector<ChunkInfo_t> notStableAppendChunks;$/;"	m	struct:KFS::HelloMetaOp
notStableAppendChunks	cc/meta/request.h	/^	vector<ChunkInfo> notStableAppendChunks;$/;"	m	struct:KFS::MetaHello
notStableChunks	cc/chunk/KfsOps.h	/^    std::vector<ChunkInfo_t> notStableChunks;$/;"	m	struct:KFS::HelloMetaOp
notStableChunks	cc/meta/request.h	/^	vector<ChunkInfo> notStableChunks;$/;"	m	struct:KFS::MetaHello
note_mutation	cc/meta/checkpoint.h	/^	void note_mutation() { ++mutations; }$/;"	f	class:KFS::Checkpoint
notifyDone	cc/libkfsIO/DiskEvent.h	/^    bool 		notifyDone;$/;"	m	struct:KFS::DiskEvent_t
now	cc/chunk/LeaseClerk.cc	/^    const time_t       now;$/;"	m	class:LeaseRenewer	file:
now	cc/meta/LayoutManager.cc	/^	time_t now;$/;"	m	class:LeaseExpired	file:
null_fte	cc/libkfsClient/KfsClient.cc	/^null_fte(const FileTableEntry *ft)$/;"	f	file:
numAckMsg	cc/meta/LayoutManager.h	/^		int               numAckMsg;$/;"	m	struct:KFS::MakeChunkStableInfo
numAppendersInChunk	cc/meta/LayoutManager.h	/^			int  numAppendersInChunk;$/;"	m	struct:KFS::ARAChunkCache::Entry
numAppendsWithWid	cc/meta/request.h	/^        int64_t numAppendsWithWid;$/;"	m	struct:KFS::MetaHello
numBytes	cc/chunk/KfsOps.h	/^    size_t 	   numBytes;          \/* input *\/$/;"	m	struct:KFS::WriteIdAllocOp
numBytes	cc/chunk/KfsOps.h	/^    size_t 	 numBytes;              \/* input *\/$/;"	m	struct:KFS::RecordAppendOp
numBytes	cc/chunk/KfsOps.h	/^    size_t 	 numBytes; \/* input *\/$/;"	m	struct:KFS::ReadOp
numBytes	cc/chunk/KfsOps.h	/^    size_t 	 numBytes; \/* input *\/$/;"	m	struct:KFS::WriteOp
numBytes	cc/chunk/KfsOps.h	/^    size_t 	 numBytes; \/* input *\/$/;"	m	struct:KFS::WritePrepareOp
numBytes	cc/chunk/KfsOps.h	/^    size_t numBytes; \/* input *\/$/;"	m	struct:KFS::WriteSyncOp
numBytes	cc/libkfsClient/KfsOps.h	/^    size_t 	 numBytes; \/* input *\/$/;"	m	struct:KFS::ChunkSpaceReleaseOp
numBytes	cc/libkfsClient/KfsOps.h	/^    size_t 	 numBytes; \/* input *\/$/;"	m	struct:KFS::ChunkSpaceReserveOp
numBytes	cc/libkfsClient/KfsOps.h	/^    size_t 	 numBytes; \/* input *\/$/;"	m	struct:KFS::ReadOp
numBytes	cc/libkfsClient/KfsOps.h	/^    size_t 	 numBytes; \/* input *\/$/;"	m	struct:KFS::WriteIdAllocOp
numBytes	cc/libkfsClient/KfsOps.h	/^    size_t 	 numBytes; \/* input *\/$/;"	m	struct:KFS::WritePrepareOp
numBytes	cc/libkfsClient/KfsOps.h	/^    size_t  numBytes; \/* input *\/$/;"	m	struct:KFS::WriteSyncOp
numBytes	cc/libkfsClient/KfsOps.h	/^    uint64_t numBytes; \/\/ output$/;"	m	struct:KFS::GetDirSummaryOp
numBytes	cc/libkfsIO/DiskConnection.h	/^    size_t  numBytes; \/\/\/ # of bytes in this request$/;"	m	struct:KFS::DiskIORequest
numBytesIO	cc/chunk/KfsOps.h	/^    size_t numBytesIO;$/;"	m	struct:KFS::GetChunkMetadataOp
numBytesIO	cc/chunk/KfsOps.h	/^    ssize_t	 numBytesIO; \/* output: # of bytes actually read *\/$/;"	m	struct:KFS::ReadOp
numBytesIO	cc/chunk/KfsOps.h	/^    ssize_t	 numBytesIO; \/* output: # of bytes actually written *\/$/;"	m	struct:KFS::WriteOp
numChunks	cc/libkfsClient/KfsOps.h	/^    int numChunks;$/;"	m	struct:KFS::GetLayoutOp
numChunks	cc/meta/request.h	/^	int numChunks; \/\/!< # of chunks hosted on this server$/;"	m	struct:KFS::MetaHello
numDone	cc/chunk/KfsOps.h	/^    uint32_t numDone; \/\/ if we did forwarding, we wait for$/;"	m	struct:KFS::WritePrepareOp
numDone	cc/chunk/KfsOps.h	/^    uint32_t numDone; \/\/ if we did forwarding, we wait for$/;"	m	struct:KFS::WriteSyncOp
numDone	cc/libkfsClient/KfsAsyncRW.h	/^        ssize_t     numDone;$/;"	m	struct:KFS::AsyncReq
numEntries	cc/libkfsClient/KfsOps.h	/^    int numEntries; \/\/ # of entries in the directory$/;"	m	struct:KFS::ReaddirOp
numEntries	cc/libkfsClient/KfsOps.h	/^    int numEntries; \/\/ # of entries in the directory$/;"	m	struct:KFS::ReaddirPlusOp
numEntries	cc/meta/request.h	/^	int numEntries; \/\/!< # of entries in the directory$/;"	m	struct:KFS::MetaReaddirPlus
numFiles	cc/libkfsClient/KfsOps.h	/^    uint64_t numFiles; \/\/ output$/;"	m	struct:KFS::GetDirSummaryOp
numNodes	cc/telemetry/packet.h	/^        int numNodes;$/;"	m	struct:KFS::TelemetryServerPacket_t
numNotStableAppendChunks	cc/meta/request.h	/^        int numNotStableAppendChunks; \/\/!< # of not stable append chunks hosted on this server$/;"	m	struct:KFS::MetaHello
numNotStableChunks	cc/meta/request.h	/^	int numNotStableChunks; \/\/!< # of not stable chunks hosted on this server$/;"	m	struct:KFS::MetaHello
numReads	cc/chunk/Chunk.h	/^    uint32_t numReads;$/;"	m	struct:KFS::ChunkInfo_t
numReads	cc/chunk/Chunk.h	/^    uint32_t numReads;$/;"	m	struct:KFS::DiskChunkInfo_t
numReads	cc/chunk/chunkupgrade_main.cc	/^    uint32_t numReads;$/;"	m	struct:DiskChunkInfoV1_t	file:
numReplicas	cc/libkfsClient/KfsAttr.h	/^    int16_t numReplicas;$/;"	m	struct:KFS::FileAttr
numReplicas	cc/libkfsClient/KfsAttr.h	/^    int16_t numReplicas;$/;"	m	struct:KFS::FileChunkInfo
numReplicas	cc/libkfsClient/KfsAttr.h	/^    int16_t numReplicas;$/;"	m	struct:KFS::KfsFileAttr
numReplicas	cc/libkfsClient/KfsAttr.h	/^    int16_t numReplicas;$/;"	m	struct:KFS::KfsServerAttr
numReplicas	cc/libkfsClient/KfsOps.h	/^    int numReplicas; \/\/ desired degree of replication$/;"	m	struct:KFS::CreateOp
numReplicas	cc/libkfsClient/KfsOps.h	/^    int16_t numReplicas; \/\/ desired replication$/;"	m	struct:KFS::ChangeFileReplicationOp
numReplicas	cc/meta/meta.h	/^	int16_t numReplicas;    \/\/!< Desired number of replicas for a file$/;"	m	class:KFS::MetaFattr
numReplicas	cc/meta/request.h	/^	int16_t  numReplicas;	\/\/!< inherited from file's fattr$/;"	m	struct:KFS::MetaAllocate
numReplicas	cc/meta/request.h	/^	int16_t numReplicas; \/\/!< desired degree of replication$/;"	m	struct:KFS::MetaChangeFileReplication
numReplicas	cc/meta/request.h	/^	int16_t numReplicas; \/\/!< desired degree of replication$/;"	m	struct:KFS::MetaCreate
numReplicas	cc/tests/KfsPerfWriter_main.cc	/^int numReplicas = 3;$/;"	v
numReplicas	cc/tests/KfsRecordAppend_main.cc	/^int numReplicas = 3;$/;"	v
numSamplesInPeriod	cc/telemetry/telemetry_server.h	/^        int numSamplesInPeriod;$/;"	m	struct:KFS::NodeState_t
numServerReplies	cc/meta/request.h	/^	uint32_t numServerReplies;$/;"	m	struct:KFS::MetaAllocate
numServers	cc/chunk/KfsOps.h	/^    uint32_t       numServers;        \/* input *\/$/;"	m	struct:KFS::WriteIdAllocOp
numServers	cc/chunk/KfsOps.h	/^    uint32_t     numServers;            \/* input *\/$/;"	m	struct:KFS::RecordAppendOp
numServers	cc/chunk/KfsOps.h	/^    uint32_t     numServers;      \/\/ input$/;"	m	struct:KFS::CloseOp
numServers	cc/chunk/KfsOps.h	/^    uint32_t     numServers; \/* input *\/$/;"	m	struct:KFS::ChunkSpaceReleaseOp
numServers	cc/chunk/KfsOps.h	/^    uint32_t     numServers; \/* input *\/$/;"	m	struct:KFS::ChunkSpaceReserveOp
numServers	cc/chunk/KfsOps.h	/^    uint32_t     numServers; \/* input *\/$/;"	m	struct:KFS::WritePrepareOp
numServers	cc/chunk/KfsOps.h	/^    uint32_t numServers;$/;"	m	struct:KFS::AllocChunkOp
numServers	cc/chunk/KfsOps.h	/^    uint32_t numServers;$/;"	m	struct:KFS::WriteSyncOp
numServers	cc/meta/LayoutManager.h	/^		int               numServers;$/;"	m	struct:KFS::MakeChunkStableInfo
numStaleChunks	cc/chunk/KfsOps.h	/^    int numStaleChunks; \/* what the server tells us *\/$/;"	m	struct:KFS::StaleChunksOp
number	cc/meta/replay.h	/^	int number;		\/\/!< sequence number for log file$/;"	m	class:KFS::Replay
offset	cc/chunk/KfsOps.h	/^    off_t 	   offset;            \/* input *\/$/;"	m	struct:KFS::WriteIdAllocOp
offset	cc/chunk/KfsOps.h	/^    off_t 	 offset;                \/* input: offset as far as the transaction is concerned *\/$/;"	m	struct:KFS::RecordAppendOp
offset	cc/chunk/KfsOps.h	/^    off_t 	 offset;   \/* input *\/$/;"	m	struct:KFS::ReadOp
offset	cc/chunk/KfsOps.h	/^    off_t 	 offset;   \/* input *\/$/;"	m	struct:KFS::WriteOp
offset	cc/chunk/KfsOps.h	/^    off_t 	 offset;   \/* input *\/$/;"	m	struct:KFS::WritePrepareOp
offset	cc/chunk/KfsOps.h	/^    off_t  offset; \/* input *\/$/;"	m	struct:KFS::WriteSyncOp
offset	cc/libkfsClient/KfsAsyncRW.h	/^        off_t    offset; \/\/ starting at this position in the chunk, read\/write nbytes$/;"	m	struct:KFS::AsyncReq
offset	cc/libkfsClient/KfsOps.h	/^    off_t	 offset; \/* input: this client's view of where it is writing in the file *\/$/;"	m	struct:KFS::RecordAppendOp
offset	cc/libkfsClient/KfsOps.h	/^    off_t 	 offset;   \/* input *\/$/;"	m	struct:KFS::ReadOp
offset	cc/libkfsClient/KfsOps.h	/^    off_t 	 offset;   \/* input *\/$/;"	m	struct:KFS::WriteIdAllocOp
offset	cc/libkfsClient/KfsOps.h	/^    off_t 	 offset;   \/* input *\/$/;"	m	struct:KFS::WritePrepareOp
offset	cc/libkfsClient/KfsOps.h	/^    off_t   offset; \/* input *\/$/;"	m	struct:KFS::WriteSyncOp
offset	cc/libkfsIO/DiskConnection.h	/^    off_t  offset;  \/\/\/ offset from the chunk at which I\/O should$/;"	m	struct:KFS::DiskIORequest
offset	cc/meta/LayoutManager.h	/^			off_t     offset;$/;"	m	struct:KFS::ARAChunkCache::Entry
offset	cc/meta/meta.h	/^	chunkOff_t offset;		\/\/!< offset of chunk within file$/;"	m	class:KFS::MetaChunkInfo
offset	cc/meta/request.h	/^	chunkOff_t offset;	\/\/!< offset of chunk within file$/;"	m	struct:KFS::MetaAllocate
offset	cc/meta/request.h	/^	chunkOff_t offset; \/\/!< offset of chunk within file$/;"	m	struct:KFS::ChunkLayoutInfo
offset	cc/meta/request.h	/^	chunkOff_t offset; \/\/!< offset of chunk within file$/;"	m	struct:KFS::MetaGetalloc
offset	cc/meta/request.h	/^	chunkOff_t offset; \/\/!< offset to truncate the file to$/;"	m	struct:KFS::MetaTruncate
ofs	cc/meta/LayoutManager.cc	/^	ofstream &ofs;$/;"	m	class:MapDumper	file:
ofs	cc/meta/LayoutManager.cc	/^	ofstream &ofs;$/;"	m	class:PrintChunkServerInfo	file:
ofs	cc/meta/LayoutManager.cc	/^	ostringstream &ofs;$/;"	m	class:MapDumperStream	file:
oldname	cc/libkfsClient/KfsOps.h	/^    const char *oldname;  \/\/ old file name\/dir$/;"	m	struct:KFS::RenameOp
oldname	cc/meta/request.h	/^	string oldname;	\/\/!< old file name$/;"	m	struct:KFS::MetaRename
oldpath	cc/libkfsClient/KfsOps.h	/^    const char *oldpath;  \/\/ old path (starting from \/)$/;"	m	struct:KFS::RenameOp
oldpath	cc/meta/request.h	/^	string oldpath; \/\/!< fully-qualified old pathname$/;"	m	struct:KFS::MetaRename
oneMB	cc/chunk/chunktrimmer_main.cc	/^static const int oneMB = 1 << 20;$/;"	v	file:
ongoingReplications	cc/meta/LayoutManager.h	/^		int ongoingReplications;$/;"	m	struct:KFS::ChunkPlacementInfo
op	cc/chunk/ClientSM.h	/^        KfsOp *op;$/;"	m	struct:KFS::OpPair
op	cc/chunk/KfsOps.h	/^    const KfsOp_t   op;$/;"	m	struct:KFS::KfsOp
op	cc/libkfsClient/KfsOps.h	/^    KfsOp_t op;$/;"	m	struct:KFS::KfsOp
op	cc/libkfsIO/DiskConnection.h	/^    DiskEventOp_t op;  \/\/\/ what is this request about$/;"	m	struct:KFS::DiskIORequest
op	cc/libkfsIO/DiskEvent.h	/^    DiskEventOp_t	op;$/;"	m	struct:KFS::DiskEvent_t
op	cc/meta/request.h	/^	const MetaOp op; \/\/!< type of request$/;"	m	struct:KFS::MetaRequest
op	cc/tools/MonUtils.h	/^        KfsMonOp_t op;$/;"	m	struct:KFS_MON::KfsMonOp
opLength	cc/chunk/KfsOps.h	/^    size_t       opLength;$/;"	m	struct:KFS::GetRecordAppendOpStatus
opLength	cc/libkfsClient/KfsOps.h	/^    size_t       opLength;$/;"	m	struct:KFS::GetRecordAppendOpStatus
opOffset	cc/chunk/KfsOps.h	/^    int64_t      opOffset;$/;"	m	struct:KFS::GetRecordAppendOpStatus
opOffset	cc/libkfsClient/KfsOps.h	/^    int64_t      opOffset;$/;"	m	struct:KFS::GetRecordAppendOpStatus
opSeq	cc/chunk/KfsOps.h	/^    kfsSeq_t     opSeq;            \/\/ output$/;"	m	struct:KFS::GetRecordAppendOpStatus
opSeq	cc/libkfsClient/KfsOps.h	/^    kfsSeq_t     opSeq;            \/\/ output$/;"	m	struct:KFS::GetRecordAppendOpStatus
opSeqno	cc/meta/request.h	/^	seq_t opSeqno;	\/\/!< command sequence # sent by the client$/;"	m	struct:KFS::MetaRequest
opStatus	cc/chunk/KfsOps.h	/^    int          opStatus;$/;"	m	struct:KFS::GetRecordAppendOpStatus
opStatus	cc/libkfsClient/KfsOps.h	/^    int          opStatus;$/;"	m	struct:KFS::GetRecordAppendOpStatus
open	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    int open(long ptr, String path, String mode, int numReplicas);$/;"	m	class:KfsAccess	file:
openFlags	cc/chunk/KfsOps.h	/^    int openFlags;  \/\/ either O_RDONLY, O_WRONLY$/;"	m	struct:KFS::OpenOp
openFlags	cc/libkfsClient/KfsOps.h	/^    int openFlags;  \/\/ either O_RDONLY, O_WRONLY or O_RDWR$/;"	m	struct:KFS::OpenOp
openForAppendFlag	cc/chunk/KfsOps.h	/^    bool         openForAppendFlag;$/;"	m	struct:KFS::GetRecordAppendOpStatus
openForAppendFlag	cc/libkfsClient/KfsOps.h	/^    bool         openForAppendFlag;$/;"	m	struct:KFS::GetRecordAppendOpStatus
openForRead	cc/meta/request.h	/^	string openForRead; \/\/!< result$/;"	m	struct:KFS::MetaOpenFiles
openForWrite	cc/meta/request.h	/^	string openForWrite; \/\/!< result$/;"	m	struct:KFS::MetaOpenFiles
openHole	cc/meta/kfstree.cc	/^Node::openHole(int pos, int skip)$/;"	f	class:Node
openMode	cc/libkfsClient/KfsClientInt.h	/^    int		openMode;$/;"	m	struct:KFS::FileTableEntry
openlog	cc/meta/replay.cc	/^Replay::openlog(const string &p)$/;"	f	class:Replay
operator !=	cc/common/kfsdecls.h	/^    bool operator != (const ServerLocation &other) const {$/;"	f	struct:KFS::ServerLocation
operator !=	cc/meta/base.h	/^	bool operator != (const Key &test) const { return compare(test) != 0; }$/;"	f	class:KFS::Key
operator ()	cc/chunk/ChunkManager.h	/^            bool operator()(const WriteIdEntry& x, const WriteIdEntry& y) const$/;"	f	struct:KFS::ChunkManager::PendingWrites::WriteIdCmp
operator ()	cc/chunk/KfsOps.cc	/^    void operator() (ChunkInfo_t &c) {$/;"	f	class:PrintChunkInfo
operator ()	cc/chunk/KfsOps.cc	/^    void operator()(KfsOp *op) {$/;"	f	class:ReadChunkMetaNotifier
operator ()	cc/chunk/KfsOps.h	/^    bool operator() (KfsOp *op) {$/;"	f	class:KFS::OpMatcher
operator ()	cc/chunk/LeaseClerk.cc	/^    void operator()(std::tr1::unordered_map <kfsChunkId_t, LeaseInfo_t>::value_type &v) {$/;"	f	class:LeaseRenewer
operator ()	cc/chunk/MetaServerSM.cc	/^    void operator() (KfsOp *op) {$/;"	f	class:OpDispatcher
operator ()	cc/chunk/RemoteSyncSM.cc	/^    bool operator() (RemoteSyncSMPtr other) {$/;"	f	class:RemoteSyncSMMatcher
operator ()	cc/chunk/RemoteSyncSM.cc	/^    void operator() (KfsOp *op) {$/;"	f	class:OpFailer
operator ()	cc/common/cxxutil.h	/^      std::size_t operator()(long long val) const { return static_cast<std::size_t>(val); }$/;"	f	struct:std::tr1::hash
operator ()	cc/common/hsieh_hash.cc	/^size_t Hsieh_hash_fcn::operator() (const char * data, int len) const$/;"	f	class:Hsieh_hash_fcn
operator ()	cc/common/hsieh_hash.cc	/^size_t Hsieh_hash_fcn::operator() (const string &data) const$/;"	f	class:Hsieh_hash_fcn
operator ()	cc/emulator/LayoutEmulator.cc	/^	bool operator() (ChunkServerPtr &s) {$/;"	f	class:MatchingServer
operator ()	cc/emulator/LayoutEmulator.cc	/^    bool operator() (MetaChunkInfo *c) {$/;"	f	class:ChunkIdMatcher
operator ()	cc/emulator/LayoutEmulator.cc	/^    void operator()(ChunkServerPtr &c) {$/;"	f	class:OpDispatcher
operator ()	cc/emulator/LayoutEmulator.cc	/^    void operator()(ChunkServerPtr &c) {$/;"	f	class:PrintBlockCount
operator ()	cc/emulator/LayoutEmulator.h	/^            std::size_t operator()(chunkId_t v) const$/;"	f	struct:KFS::LayoutEmulator::ChunkIdHash
operator ()	cc/libkfsClient/KfsClient.cc	/^    bool operator () (FileTableEntry *ft) {$/;"	f	class:FTMatcher
operator ()	cc/libkfsClient/KfsClient.cc	/^    bool operator() (ServerLocation loc)$/;"	f	struct:RespondingServer
operator ()	cc/libkfsClient/KfsClient.cc	/^    bool operator()(KfsClientPtr &clnt) const {$/;"	f	class:MatchingServer
operator ()	cc/libkfsClient/KfsClient.cc	/^    bool operator()(const ServerLocation &loc) const {$/;"	f	class:ChunkserverMatcher
operator ()	cc/libkfsClient/KfsClient.cc	/^    bool operator()(const ServerLocation &other) const {$/;"	f	class:MatchingServer
operator ()	cc/libkfsClient/KfsClient.cc	/^    bool operator()(in_addr &l) const {$/;"	f	class:ChunkserverMatcherByIp
operator ()	cc/libkfsClient/KfsClient.cc	/^    ssize_t operator() (ServerLocation loc)$/;"	f	struct:RespondingServer2
operator ()	cc/libkfsClient/KfsOps.h	/^    void operator() (WriteInfo w) {$/;"	f	class:KFS::ShowWriteInfo
operator ()	cc/libkfsIO/Counter.h	/^    void operator() (std::tr1::unordered_map<std::string, Counter *>::value_type v) {$/;"	f	class:KFS::ShowCounter
operator ()	cc/libkfsIO/IOBuffer.cc	/^    void operator()(char* buf) { delete [] buf; }$/;"	f	struct:IOBufferArrayDeallocator
operator ()	cc/libkfsIO/IOBuffer.cc	/^    void operator()(char* buf) { mAllocator.Deallocate(buf); }$/;"	f	struct:IOBufferDeallocatorCustom
operator ()	cc/libkfsIO/IOBuffer.cc	/^    void operator()(char* buf) { sIOBufferAllocator->Deallocate(buf); }$/;"	f	struct:IOBufferDeallocator
operator ()	cc/meta/ChunkServer.cc	/^	bool operator() (const MetaChunkRequest *r) {$/;"	f	class:OpMatch
operator ()	cc/meta/ChunkServer.cc	/^	void operator() (MetaChunkRequest *op) {$/;"	f	class:OpFailer
operator ()	cc/meta/ChunkServer.h	/^		bool operator() (const ChunkServerPtr &c) {$/;"	f	class:KFS::ChunkServerMatcher
operator ()	cc/meta/LayoutManager.cc	/^	bool operator () (const LeaseInfo &l) { return now >= l.expires; }$/;"	f	class:LeaseExpired
operator ()	cc/meta/LayoutManager.cc	/^	bool operator() (ChunkServerPtr &s) {$/;"	f	class:MatchServerByHost
operator ()	cc/meta/LayoutManager.cc	/^	bool operator() (MetaChunkInfo *c) {$/;"	f	class:ChunkIdMatcher
operator ()	cc/meta/LayoutManager.cc	/^	bool operator() (MetaChunkInfo *c) {$/;"	f	class:ValidLeaseIssued
operator ()	cc/meta/LayoutManager.cc	/^	bool operator() (const ChunkServerPtr &s) {$/;"	f	class:MatchingServer
operator ()	cc/meta/LayoutManager.cc	/^	bool operator() (const ChunkServerPtr& lhs, ChunkServerPtr& rhs) const {$/;"	f	struct:UptimeLess
operator ()	cc/meta/LayoutManager.cc	/^	bool operator() (const LeaseInfo &l) {$/;"	f	class:LeaseIdMatcher
operator ()	cc/meta/LayoutManager.cc	/^	bool operator()(const ChunkServerPtr &c) {$/;"	f	class:RetiringServerPred
operator ()	cc/meta/LayoutManager.cc	/^	bool operator()(const ChunkServerPtr &s) const {$/;"	f	class:LoadedServerPred
operator ()	cc/meta/LayoutManager.cc	/^	void operator () (CSMap::value_type& p) {$/;"	f	class:MapPurger
operator ()	cc/meta/LayoutManager.cc	/^	void operator () (ChunkServerPtr &c) { c->GetRetiringStatus(result); }$/;"	f	class:RetiringStatus
operator ()	cc/meta/LayoutManager.cc	/^	void operator () (ChunkServerPtr &c)$/;"	f	class:Pinger
operator ()	cc/meta/LayoutManager.cc	/^	void operator () (LeaseInfo& li) {$/;"	f	struct:ExpireLeaseIfOwner
operator ()	cc/meta/LayoutManager.cc	/^	void operator () (const CSMap::value_type p) {$/;"	f	class:ReReplicationCheckIniter
operator ()	cc/meta/LayoutManager.cc	/^	void operator () (const CSMap::value_type& p) {$/;"	f	class:MapDumper
operator ()	cc/meta/LayoutManager.cc	/^	void operator () (const CSMap::value_type& p) {$/;"	f	class:MapDumperStream
operator ()	cc/meta/LayoutManager.cc	/^	void operator () (const CSMap::value_type& p) {$/;"	f	class:MapRetirer
operator ()	cc/meta/LayoutManager.cc	/^	void operator () (const ChunkServerPtr &c) {$/;"	f	class:ChunkDeletor
operator ()	cc/meta/LayoutManager.cc	/^	void operator() (ChunkServerPtr &c) {$/;"	f	class:Dispatcher
operator ()	cc/meta/LayoutManager.cc	/^	void operator() (ChunkServerPtr &c) {$/;"	f	class:Heartbeater
operator ()	cc/meta/LayoutManager.cc	/^	void operator() (ChunkServerPtr &c) {$/;"	f	class:PrintChunkServerInfo
operator ()	cc/meta/LayoutManager.cc	/^	void operator() (const CSMap::value_type& p) {$/;"	f	class:OpenFileChecker
operator ()	cc/meta/LayoutManager.cc	/^	void operator() (const ChunkServerPtr &c) const {$/;"	f	class:MakeChunkStable
operator ()	cc/meta/LayoutManager.cc	/^	void operator() (const LeaseInfo &l) {$/;"	f	class:DecChunkWriteCount
operator ()	cc/meta/LayoutManager.cc	/^	void operator()(ChunkServerPtr &c) {$/;"	f	class:RebalancePlanExecutor
operator ()	cc/meta/LayoutManager.cc	/^	void operator()(ChunkServerPtr &s) {$/;"	f	class:ReplicationDoneNotifier
operator ()	cc/meta/LayoutManager.cc	/^	void operator()(ChunkServerPtr c) {$/;"	f	class:EvacuateChunkChecker
operator ()	cc/meta/LayoutManager.cc	/^	void operator()(const ChunkServerPtr &c) const {$/;"	f	class:BeginMakeChunkStable
operator ()	cc/meta/LayoutManager.cc	/^	void operator()(const ChunkServerPtr &s) {$/;"	f	class:RackSetter
operator ()	cc/meta/LayoutManager.cc	/^    void operator () (ChunkServerPtr &c) { c->TruncateChunk(chunkId, sz); }$/;"	f	class:Truncator
operator ()	cc/meta/LayoutManager.cc	/^    void operator () (ChunkServerPtr &c) {$/;"	f	class:UpServersList
operator ()	cc/meta/LayoutManager.h	/^		bool operator()(const RackInfo &rack) const {$/;"	f	class:KFS::RackMatcher
operator ()	cc/meta/kfsops.cc	/^	bool operator() (MetaChunkInfo *m) {$/;"	f	class:ChunkIdMatch
operator ()	cc/meta/kfsops.cc	/^	void operator() (MetaDentry *e) {$/;"	f	class:RemoveDumpsterEntry
operator ()	cc/meta/meta.h	/^	bool operator () (const MetaDentry *d)$/;"	f	class:KFS::DirMatch
operator ()	cc/meta/queue.h	/^	bool operator () (T *arg) {$/;"	f	class:KFS::PredWrapper
operator ()	cc/meta/queue.h	/^	void operator () (T *arg) {$/;"	f	class:KFS::FunctorWrapper
operator ()	cc/meta/request.cc	/^	void operator () (ChunkServerPtr &s)$/;"	f	class:KFS::PrintChunkServerLocations
operator ()	cc/meta/request.cc	/^	void operator () (ChunkServerPtr c)$/;"	f	class:KFS::EnumerateLocations
operator ()	cc/meta/request.cc	/^	void operator () (const ServerLocation &s)$/;"	f	class:KFS::ListServerLocations
operator ()	cc/meta/request.cc	/^	void operator() (ChunkServerPtr p) {$/;"	f	class:KFS::ChunkVersionChanger
operator ()	cc/meta/request.cc	/^	void operator()(MetaDentry *entry) {$/;"	f	class:KFS::EnumerateReaddirPlusInfo
operator <	cc/common/kfsdecls.h	/^    bool operator < (const ServerLocation &other) const {$/;"	f	struct:KFS::ServerLocation
operator <	cc/libkfsClient/KfsAttr.h	/^    bool operator < (const KfsFileAttr & other) const {$/;"	f	struct:KFS::KfsFileAttr
operator <	cc/meta/LayoutManager.cc	/^	bool operator < (const ServerSpace &other) const {$/;"	f	struct:ServerSpace
operator <	cc/meta/LayoutManager.cc	/^	bool operator < (const ServerSpaceUtil &other) const {$/;"	f	struct:ServerSpaceUtil
operator <	cc/meta/LayoutManager.h	/^		bool operator < (const RackInfo &other) const {$/;"	f	class:KFS::RackInfo
operator <	cc/meta/base.h	/^	bool operator < (const Key &test) const { return compare(test) < 0; }$/;"	f	class:KFS::Key
operator =	cc/chunk/Chunk.h	/^    ChunkInfo_t& operator= (const ChunkInfo_t &other) $/;"	f	struct:KFS::ChunkInfo_t
operator =	cc/chunk/ChunkManager.h	/^            LruIterator& operator=(const Lru::iterator& it)$/;"	f	class:KFS::ChunkManager::PendingWrites::LruIterator
operator =	cc/common/kfsdecls.h	/^    ServerLocation & operator = (const ServerLocation &other) {$/;"	f	struct:KFS::ServerLocation
operator =	cc/libkfsClient/KfsAttr.h	/^    FileAttr& operator= (const KfsServerAttr &other) {$/;"	f	struct:KFS::FileAttr
operator =	cc/libkfsClient/KfsAttr.h	/^    KfsFileAttr& operator= (const FileAttr &other) {$/;"	f	struct:KFS::KfsFileAttr
operator =	cc/libkfsClient/KfsAttr.h	/^    KfsFileAttr& operator= (const KfsServerAttr &other) {$/;"	f	struct:KFS::KfsFileAttr
operator =	cc/libkfsClient/KfsOps.h	/^    WriteInfo & operator = (const WriteInfo &other) {$/;"	f	struct:KFS::WriteInfo
operator =	cc/libkfsIO/IOBuffer.h	/^        IOBufferAllocator& operator=(const IOBufferAllocator&)$/;"	f	class:KFS::libkfsio::IOBufferAllocator
operator =	cc/meta/LayoutManager.h	/^		LeaseInfo& operator=(const LeaseInfo& lease)$/;"	f	struct:KFS::LeaseInfo
operator ==	cc/chunk/ClientSM.h	/^        bool operator==(const ChunkSpaceReservationKey_t &other) const {$/;"	f	struct:KFS::ChunkSpaceReservationKey_t
operator ==	cc/common/kfsdecls.h	/^    bool operator == (const ServerLocation &other) const {$/;"	f	struct:KFS::ServerLocation
operator ==	cc/libkfsClient/KfsClientInt.h	/^    bool operator == (const ServerLocation &other) const {$/;"	f	struct:KFS::ChunkServerConn
operator ==	cc/libkfsIO/DiskConnection.h	/^    bool operator == (DiskIORequest &other) const {$/;"	f	struct:KFS::DiskIORequest
operator ==	cc/meta/base.h	/^	bool operator == (const Key &test) const { return compare(test) == 0; }$/;"	f	class:KFS::Key
operator []	cc/meta/LayoutManager.h	/^		mapped_type& operator[](const key_type& key) {$/;"	f	class:KFS::CSMap
opname	cc/telemetry/packet.h	/^        char opname[OPNAME_LEN];$/;"	m	struct:KFS::TelemetryClntPacket_t
ops	cc/fuse/kfs_fuse_main.cc	/^struct fuse_operations ops = {$/;"	v	typeref:struct:fuse_operations
optionalHandler	cc/libkfsClient/KfsAttr.h	/^    std::string optionalHandler;$/;"	m	struct:KFS::FileAttr
optionalHandler	cc/libkfsClient/KfsAttr.h	/^    std::string optionalHandler;$/;"	m	struct:KFS::KfsFileAttr
optionalHandler	cc/libkfsClient/KfsAttr.h	/^    std::string optionalHandler;$/;"	m	struct:KFS::KfsServerAttr
optionalHandler	cc/libkfsClient/KfsOps.h	/^    std::string optionalHandler;   \/\/ optional handler$/;"	m	struct:KFS::CreateOp
optionalHandler	cc/meta/meta.h	/^	std::string optionalHandler;$/;"	m	class:KFS::MetaFattr
optionalHandler	cc/meta/request.h	/^	string optionalHandler;$/;"	m	struct:KFS::MetaCreate
org.kosmix.kosmosfs.access	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^package org.kosmix.kosmosfs.access;$/;"	p
org.kosmix.kosmosfs.access	java/org/kosmix/kosmosfs/access/KfsFileAttr.java	/^package org.kosmix.kosmosfs.access;$/;"	p
org.kosmix.kosmosfs.access	java/org/kosmix/kosmosfs/access/KfsInputChannel.java	/^package org.kosmix.kosmosfs.access;$/;"	p
org.kosmix.kosmosfs.access	java/org/kosmix/kosmosfs/access/KfsOutputChannel.java	/^package org.kosmix.kosmosfs.access;$/;"	p
org.kosmix.kosmosfs.access	java/org/kosmix/kosmosfs/access/KfsTest.java	/^package org.kosmix.kosmosfs.access;$/;"	p
org.kosmix.kosmosfs.access	java/org/kosmix/kosmosfs/access/Positionable.java	/^package org.kosmix.kosmosfs.access;$/;"	p
origClnt	cc/chunk/KfsOps.h	/^    KfsCallbackObj* origClnt;$/;"	m	struct:KFS::RecordAppendOp
origSeq	cc/chunk/KfsOps.h	/^    kfsSeq_t        origSeq;$/;"	m	struct:KFS::RecordAppendOp
os	cc/chunk/KfsOps.cc	/^    ostringstream &os;$/;"	m	class:PrintChunkInfo	file:
os	cc/common/buildVers.py	/^import os,sys$/;"	i
os	cc/libkfsClient/KfsOps.h	/^    std::ostringstream &os;$/;"	m	class:KFS::ShowWriteInfo
os	cc/libkfsIO/Counter.h	/^    std::ostringstream &os;$/;"	m	class:KFS::ShowCounter
os	cc/meta/LayoutManager.cc	/^    ostringstream &os;$/;"	m	class:UpServersList	file:
os	cc/meta/request.cc	/^	ostream &os;$/;"	m	class:KFS::EnumerateReaddirPlusInfo	file:
os	cc/meta/request.cc	/^	ostream &os;$/;"	m	class:KFS::ListServerLocations	file:
os	cc/meta/request.cc	/^	ostream &os;$/;"	m	class:KFS::PrintChunkServerLocations	file:
os	python/rw/rw.py	/^import os$/;"	i
os	python/unittests/dirops.py	/^import os, os.path$/;"	i
os	python/unittests/worm.py	/^import os, os.path$/;"	i
os	python/unittests/write-flush.py	/^import os, os.path$/;"	i
os	python/unittests/write.py	/^import os, os.path, socket$/;"	i
overflow	cc/libkfsIO/IOBuffer.cc	/^int IOBuffer::StreamBuffer::overflow(int c)$/;"	f	class:IOBuffer::StreamBuffer
overwrite	cc/libkfsClient/KfsOps.h	/^    bool overwrite; \/\/ set if the rename can overwrite newpath$/;"	m	struct:KFS::RenameOp
overwrite	cc/meta/request.h	/^	bool overwrite; \/\/!< overwrite newname if it exists$/;"	m	struct:KFS::MetaRename
owner	cc/chunk/KfsOps.h	/^    WritePrepareOp *owner;$/;"	m	struct:KFS::WritePrepareFwdOp
ownerWasDownFlag	cc/meta/LayoutManager.h	/^                bool       ownerWasDownFlag:1;$/;"	m	struct:KFS::LeaseInfo
package_fattr	cc/access/KfsModulePy.cc	/^package_fattr(KfsFileAttr &fa)$/;"	f	file:
panic	cc/meta/util.cc	/^KFS::panic(const string msg, bool use_perror)$/;"	f	class:KFS
param_section	python/flogger/flogger.py	/^param_section = "Test parameters"	# section heading in file$/;"	v
param_section	python/rw/rw.py	/^param_section = "Test parameters"	# section heading in file$/;"	v
param_section	python/unittests/dirops.py	/^param_section = "Test parameters"	# section heading in file$/;"	v
param_section	python/unittests/worm.py	/^param_section = "Test parameters"	# section heading in file$/;"	v
param_section	python/unittests/write-flush.py	/^param_section = "Test parameters"	# section heading in file$/;"	v
param_section	python/unittests/write.py	/^param_section = "Test parameters"	# section heading in file$/;"	v
parent	cc/meta/kfstree.h	/^	Node *parent() const { return dad; }$/;"	f	class:KFS::LeafIter
parentFid	cc/libkfsClient/KfsClient.cc	/^    kfsFileId_t parentFid;$/;"	m	class:FTMatcher	file:
parentFid	cc/libkfsClient/KfsClientInt.h	/^    kfsFileId_t parentFid;$/;"	m	struct:KFS::FileTableEntry
parentFid	cc/libkfsClient/KfsOps.h	/^    kfsFileId_t parentFid; \/\/ fid of the parent dir$/;"	m	struct:KFS::LookupOp
parentFid	cc/libkfsClient/KfsOps.h	/^    kfsFileId_t parentFid; \/\/ input parent file-id$/;"	m	struct:KFS::CreateOp
parentFid	cc/libkfsClient/KfsOps.h	/^    kfsFileId_t parentFid; \/\/ input parent file-id$/;"	m	struct:KFS::MkdirOp
parentFid	cc/libkfsClient/KfsOps.h	/^    kfsFileId_t parentFid; \/\/ input parent file-id$/;"	m	struct:KFS::RemoveOp
parentFid	cc/libkfsClient/KfsOps.h	/^    kfsFileId_t parentFid; \/\/ input parent file-id$/;"	m	struct:KFS::RenameOp
parentFid	cc/libkfsClient/KfsOps.h	/^    kfsFileId_t parentFid; \/\/ input parent file-id$/;"	m	struct:KFS::RmdirOp
parse	cc/meta/entry.cc	/^DiskEntry::parse(char *line)$/;"	f	class:DiskEntry
parseCommon	cc/chunk/KfsOps.cc	/^parseCommon(Properties &prop, kfsSeq_t &seq)$/;"	f
parseHandlerAllocChunk	cc/chunk/KfsOps.cc	/^parseHandlerAllocChunk(Properties &prop, KfsOp **c)$/;"	f
parseHandlerAllocate	cc/meta/request.cc	/^parseHandlerAllocate(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerBeginMakeChunkStableOp	cc/chunk/KfsOps.cc	/^parseHandlerBeginMakeChunkStableOp(Properties &prop, KfsOp **c)$/;"	f
parseHandlerChangeChunkVers	cc/chunk/KfsOps.cc	/^parseHandlerChangeChunkVers(Properties &prop, KfsOp **c)$/;"	f
parseHandlerChangeFileReplication	cc/meta/request.cc	/^parseHandlerChangeFileReplication(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerCheckLeases	cc/meta/request.cc	/^parseHandlerCheckLeases(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerChunkCorrupt	cc/meta/request.cc	/^parseHandlerChunkCorrupt(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerChunkSpaceRelease	cc/chunk/KfsOps.cc	/^parseHandlerChunkSpaceRelease(Properties &prop, KfsOp **c)$/;"	f
parseHandlerChunkSpaceReserve	cc/chunk/KfsOps.cc	/^parseHandlerChunkSpaceReserve(Properties &prop, KfsOp **c)$/;"	f
parseHandlerClose	cc/chunk/KfsOps.cc	/^parseHandlerClose(Properties &prop, KfsOp **c)$/;"	f
parseHandlerCoalesceBlock	cc/chunk/KfsOps.cc	/^parseHandlerCoalesceBlock(Properties &prop, KfsOp **c)$/;"	f
parseHandlerCoalesceBlocks	cc/meta/request.cc	/^parseHandlerCoalesceBlocks(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerCreate	cc/meta/request.cc	/^parseHandlerCreate(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerDeleteChunk	cc/chunk/KfsOps.cc	/^parseHandlerDeleteChunk(Properties &prop, KfsOp **c)$/;"	f
parseHandlerDumpChunkMap	cc/chunk/KfsOps.cc	/^parseHandlerDumpChunkMap(Properties &prop, KfsOp **c)$/;"	f
parseHandlerDumpChunkReplicationCandidates	cc/meta/request.cc	/^parseHandlerDumpChunkReplicationCandidates(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerDumpChunkToServerMap	cc/meta/request.cc	/^parseHandlerDumpChunkToServerMap(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerExecuteRebalancePlan	cc/meta/request.cc	/^parseHandlerExecuteRebalancePlan(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerFsck	cc/meta/request.cc	/^parseHandlerFsck(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerGetChunkMetadata	cc/chunk/KfsOps.cc	/^parseHandlerGetChunkMetadata(Properties &prop, KfsOp **c)$/;"	f
parseHandlerGetChunkServerCounters	cc/meta/request.cc	/^parseHandlerGetChunkServerCounters(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerGetRecordAppendStatus	cc/chunk/KfsOps.cc	/^parseHandlerGetRecordAppendStatus(Properties &prop, KfsOp **c)$/;"	f
parseHandlerGetalloc	cc/meta/request.cc	/^parseHandlerGetalloc(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerGetlayout	cc/meta/request.cc	/^parseHandlerGetlayout(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerHeartbeat	cc/chunk/KfsOps.cc	/^parseHandlerHeartbeat(Properties &prop, KfsOp **c)$/;"	f
parseHandlerHello	cc/meta/request.cc	/^parseHandlerHello(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerLeaseAcquire	cc/meta/request.cc	/^parseHandlerLeaseAcquire(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerLeaseRelinquish	cc/meta/request.cc	/^parseHandlerLeaseRelinquish(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerLeaseRenew	cc/meta/request.cc	/^parseHandlerLeaseRenew(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerLookup	cc/meta/request.cc	/^parseHandlerLookup(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerLookupPath	cc/meta/request.cc	/^parseHandlerLookupPath(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerMakeChunkStable	cc/chunk/KfsOps.cc	/^parseHandlerMakeChunkStable(Properties &prop, KfsOp **c)$/;"	f
parseHandlerMkdir	cc/meta/request.cc	/^parseHandlerMkdir(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerOpen	cc/chunk/KfsOps.cc	/^parseHandlerOpen(Properties &prop, KfsOp **c)$/;"	f
parseHandlerOpenFiles	cc/meta/request.cc	/^parseHandlerOpenFiles(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerPing	cc/chunk/KfsOps.cc	/^parseHandlerPing(Properties &prop, KfsOp **c)$/;"	f
parseHandlerPing	cc/meta/request.cc	/^parseHandlerPing(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerRead	cc/chunk/KfsOps.cc	/^parseHandlerRead(Properties &prop, KfsOp **c)$/;"	f
parseHandlerReadConfig	cc/meta/request.cc	/^parseHandlerReadConfig(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerReaddir	cc/meta/request.cc	/^parseHandlerReaddir(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerReaddirPlus	cc/meta/request.cc	/^parseHandlerReaddirPlus(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerRecomputeDirsize	cc/meta/request.cc	/^parseHandlerRecomputeDirsize(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerRecordAppend	cc/chunk/KfsOps.cc	/^parseHandlerRecordAppend(Properties &prop, KfsOp **c)$/;"	f
parseHandlerRemove	cc/meta/request.cc	/^parseHandlerRemove(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerRename	cc/meta/request.cc	/^parseHandlerRename(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerReplicateChunk	cc/chunk/KfsOps.cc	/^parseHandlerReplicateChunk(Properties &prop, KfsOp **c)$/;"	f
parseHandlerRetire	cc/chunk/KfsOps.cc	/^parseHandlerRetire(Properties &prop, KfsOp **c)$/;"	f
parseHandlerRetireChunkserver	cc/meta/request.cc	/^parseHandlerRetireChunkserver(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerRmdir	cc/meta/request.cc	/^parseHandlerRmdir(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerSetChunkServersProperties	cc/meta/request.cc	/^parseHandlerSetChunkServersProperties(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerSetMtime	cc/meta/request.cc	/^parseHandlerSetMtime(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerSetProperties	cc/chunk/KfsOps.cc	/^parseHandlerSetProperties(Properties &prop, KfsOp **c)$/;"	f
parseHandlerSize	cc/chunk/KfsOps.cc	/^parseHandlerSize(Properties &prop, KfsOp **c)$/;"	f
parseHandlerStaleChunks	cc/chunk/KfsOps.cc	/^parseHandlerStaleChunks(Properties &prop, KfsOp **c)$/;"	f
parseHandlerStats	cc/chunk/KfsOps.cc	/^parseHandlerStats(Properties &prop, KfsOp **c)$/;"	f
parseHandlerStats	cc/meta/request.cc	/^parseHandlerStats(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerToggleRebalancing	cc/meta/request.cc	/^parseHandlerToggleRebalancing(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerToggleWORM	cc/meta/request.cc	/^parseHandlerToggleWORM(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerTruncate	cc/meta/request.cc	/^parseHandlerTruncate(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerTruncateChunk	cc/chunk/KfsOps.cc	/^parseHandlerTruncateChunk(Properties &prop, KfsOp **c)$/;"	f
parseHandlerUpServers	cc/meta/request.cc	/^parseHandlerUpServers(Properties &prop, MetaRequest **r)$/;"	f	namespace:KFS
parseHandlerWriteIdAlloc	cc/chunk/KfsOps.cc	/^parseHandlerWriteIdAlloc(Properties &prop, KfsOp **c)$/;"	f
parseHandlerWritePrepare	cc/chunk/KfsOps.cc	/^parseHandlerWritePrepare(Properties &prop, KfsOp **c)$/;"	f
parseHandlerWriteSync	cc/chunk/KfsOps.cc	/^parseHandlerWriteSync(Properties &prop, KfsOp **c)$/;"	f
parsePath	cc/tools/KfsToolsCommon.cc	/^KFS::tools::parsePath(const string & pathDesc, string & serverHost,$/;"	f	class:KFS::tools
parseRestartChunkServer	cc/chunk/KfsOps.cc	/^int parseRestartChunkServer(Properties &prop, KfsOp **c)$/;"	f
parseServer	cc/tools/KfsToolsCommon.cc	/^KFS::tools::parseServer(const string & serverDesc, string & serverHost, int & serverPort)$/;"	f	class:KFS::tools
parser	cc/meta/entry.h	/^	typedef bool (*parser)(deque <string> &c); \/\/!< a parsing function$/;"	t	class:KFS::DiskEntry
parsetab	cc/meta/entry.h	/^	typedef map <string, parser> parsetab;	\/\/!< map type to parser$/;"	t	class:KFS::DiskEntry
path	cc/meta/handler.cc	/^const string ZincHandler::path = "\/usr\/local\/";$/;"	m	class:ZincHandler	file:
path	cc/meta/handler.h	/^       static const std::string       path;$/;"	m	class:ZincHandler
path	cc/meta/replay.h	/^	string path;		\/\/!< path name for log file$/;"	m	class:KFS::Replay
path	cc/meta/request.h	/^	string path;	\/\/!< path to look up$/;"	m	struct:KFS::MetaLookupPath
path	python/unittests/dirops.py	/^import os, os.path$/;"	i
path	python/unittests/worm.py	/^import os, os.path$/;"	i
path	python/unittests/write-flush.py	/^import os, os.path$/;"	i
path	python/unittests/write.py	/^import os, os.path, socket$/;"	i
path_exists	cc/meta/request.cc	/^path_exists(const string &pathname)$/;"	f	namespace:KFS
pathlink	cc/meta/kfstree.h	/^		pathlink(): n(0), pos(-1) { }$/;"	f	struct:KFS::Tree::pathlink
pathlink	cc/meta/kfstree.h	/^		pathlink(Node *nn, int p): n(nn), pos(p) {}$/;"	f	struct:KFS::Tree::pathlink
pathlink	cc/meta/kfstree.h	/^	struct pathlink {		\/\/!< for recording descent path$/;"	s	class:KFS::Tree
pathname	cc/libkfsClient/KfsClientInt.h	/^    std::string pathname;$/;"	m	struct:KFS::FileTableEntry
pathname	cc/libkfsClient/KfsOps.h	/^    const char *pathname; \/\/ input    $/;"	m	struct:KFS::LeaseAcquireOp
pathname	cc/libkfsClient/KfsOps.h	/^    const char *pathname; \/\/ input    $/;"	m	struct:KFS::LeaseRenewOp
pathname	cc/libkfsClient/KfsOps.h	/^    const char *pathname; \/\/ input: full pathname$/;"	m	struct:KFS::RmdirOp
pathname	cc/libkfsClient/KfsOps.h	/^    const char *pathname;$/;"	m	struct:KFS::RemoveOp
pathname	cc/libkfsClient/KfsOps.h	/^    const char *pathname;$/;"	m	struct:KFS::SetMtimeOp
pathname	cc/libkfsClient/KfsOps.h	/^    const char *pathname;$/;"	m	struct:KFS::TruncateOp
pathname	cc/libkfsClient/KfsOps.h	/^    std::string pathname; \/\/ input: the full pathname corresponding to fid$/;"	m	struct:KFS::AllocateOp
pathname	cc/meta/LayoutManager.h	/^		const std::string pathname;$/;"	m	struct:KFS::LeaseInfo
pathname	cc/meta/LayoutManager.h	/^		const std::string pathname;$/;"	m	struct:KFS::MakeChunkStableInfo
pathname	cc/meta/request.h	/^	std::string pathname;   \/\/!< full pathname of the file that owns chunk$/;"	m	struct:KFS::MetaLeaseAcquire
pathname	cc/meta/request.h	/^	std::string pathname;   \/\/!< full pathname of the file that owns chunk$/;"	m	struct:KFS::MetaLeaseRenew
pathname	cc/meta/request.h	/^	std::string pathname;   \/\/!< full pathname that corresponds to fid$/;"	m	struct:KFS::MetaAllocate
pathname	cc/meta/request.h	/^	std::string pathname; $/;"	m	struct:KFS::MetaChunkSize
pathname	cc/meta/request.h	/^	std::string pathname; \/\/!< pathname of the file (useful to print in debug msgs)$/;"	m	struct:KFS::MetaGetalloc
pathname	cc/meta/request.h	/^	string pathname;	\/\/!< absolute path for which we want to set the mtime$/;"	m	struct:KFS::MetaSetMtime
pathname	cc/meta/request.h	/^	string pathname; \/\/!< full pathname for file being truncated$/;"	m	struct:KFS::MetaTruncate
pathname	cc/meta/request.h	/^	string pathname; \/\/!< full pathname to remove$/;"	m	struct:KFS::MetaRemove
pathname	cc/meta/request.h	/^	string pathname; \/\/!< full pathname to remove$/;"	m	struct:KFS::MetaRmdir
pclient	cc/access/KfsModulePy.cc	/^	PyObject *pclient;		\/\/ Python object for KFS client$/;"	m	struct:kfs_File	file:
peer	cc/meta/kfstree.h	/^	Node *peer() const { return next; }	\/\/!< return adjacent node$/;"	f	class:KFS::Node
peerName	cc/meta/request.h	/^	std::string peerName;$/;"	m	struct:KFS::MetaHello
pendingChunkRead	cc/libkfsClient/KfsClientInt.h	/^    PendingChunkRead* pendingChunkRead;$/;"	m	struct:KFS::FilePosition
pick_one	python/flogger/flogger.py	/^def pick_one(namelist):$/;"	f
pick_op	python/rw/rw.py	/^def pick_op(r, maxr, w, maxw):$/;"	f
pick_region	python/rw/rw.py	/^def pick_region(mapping):$/;"	f
placeChild	cc/meta/kfstree.h	/^	void placeChild(Key k, MetaNode *n, int p)$/;"	f	class:KFS::Node
planPathname	cc/meta/request.h	/^	std::string planPathname; \/\/<! full path to the file with the plan$/;"	m	struct:KFS::MetaExecuteRebalancePlan
playAllLogs	cc/meta/replay.cc	/^Replay::playAllLogs()$/;"	f	class:Replay
playlog	cc/meta/replay.cc	/^Replay::playlog()$/;"	f	class:Replay
pop_back	cc/chunk/ChunkManager.h	/^        bool pop_back()$/;"	f	class:KFS::ChunkManager::PendingWrites
pop_fid	cc/meta/entry.cc	/^KFS::pop_fid(fid_t &fid, const string tag, deque <string> &c, bool ok)$/;"	f	class:KFS
pop_front	cc/chunk/ChunkManager.h	/^        bool pop_front()$/;"	f	class:KFS::ChunkManager::PendingWrites
pop_handler	cc/meta/entry.cc	/^KFS::pop_handler(string& optionalHandler,const string tag, deque <string> &c, bool ok)$/;"	f	class:KFS
pop_name	cc/meta/entry.cc	/^KFS::pop_name(string &name, const string tag, deque <string> &c, bool ok)$/;"	f	class:KFS
pop_offset	cc/meta/entry.cc	/^KFS::pop_offset(off_t &o, const string tag, deque <string> &c, bool ok)$/;"	f	class:KFS
pop_parent	cc/meta/replay.cc	/^pop_parent(fid_t &id, deque <string> &c)$/;"	f	file:
pop_path	cc/meta/entry.cc	/^KFS::pop_path(string &path, const string tag, deque <string> &c, bool ok)$/;"	f	class:KFS
pop_short	cc/meta/entry.cc	/^KFS::pop_short(int16_t &num, const string tag, deque <string> &c, bool ok)$/;"	f	class:KFS
pop_size	cc/meta/entry.cc	/^KFS::pop_size(size_t &sz, const string tag, deque <string> &c, bool ok)$/;"	f	class:KFS
pop_time	cc/meta/entry.cc	/^KFS::pop_time(struct timeval &tv, const string tag, deque <string> &c, bool ok)$/;"	f	class:KFS
pop_type	cc/meta/entry.cc	/^KFS::pop_type(FileType &t, const string tag, deque <string> &c, bool ok)$/;"	f	class:KFS
poproot	cc/meta/kfstree.cc	/^Tree::poproot()$/;"	f	class:Tree
port	cc/common/kfsdecls.h	/^    int port; \/\/!< Location of the server: port to connect to$/;"	m	struct:KFS::ServerLocation
port_notify	cc/libkfsIO/DiskEvent.h	/^    port_notify_t	port_notify;$/;"	m	struct:KFS::DiskEvent_t
pos	cc/meta/kfstree.h	/^		int pos;		\/\/!< index of child$/;"	m	struct:KFS::Tree::pathlink
pos	cc/meta/kfstree.h	/^	int pos;	\/\/!< index of current child$/;"	m	class:KFS::LeafIter
preferredServer	cc/libkfsClient/KfsClientInt.h	/^    TcpSocket *preferredServer;$/;"	m	struct:KFS::FilePosition
preferredServerLocation	cc/libkfsClient/KfsClientInt.h	/^    ServerLocation preferredServerLocation;$/;"	m	struct:KFS::FilePosition
prefetchReq	cc/libkfsClient/KfsClientInt.h	/^    AsyncReadReq *prefetchReq;$/;"	m	struct:KFS::FilePosition
printCmds	cc/tools/kfsshell_main.cc	/^void printCmds()$/;"	f
printFileInfo	cc/tools/KfsLs.cc	/^printFileInfo(const string &filename, time_t mtime, off_t filesize, bool humanReadable, bool timeInSecs)$/;"	f
printFileInfo	cc/tools/KfsToolsCommon.cc	/^printFileInfo(const string &filename, time_t mtime, off_t filesize, bool humanReadable, bool timeInSecs)$/;"	f	file:
printStats	cc/rebalancer/rebalancer_main.cc	/^ChunkServer::printStats() $/;"	f	class:ChunkServer
printStats	cc/rebalancer/rebalancer_main.cc	/^Rebalancer::printStats()$/;"	f	class:Rebalancer
printleaves	cc/meta/kfstree.cc	/^Tree::printleaves()$/;"	f	class:Tree
printleaves	cc/meta/request.cc	/^printleaves()$/;"	f	namespace:KFS
prioritySet	cc/meta/LayoutManager.cc	/^	CRCandidateSet &prioritySet;$/;"	m	class:ReReplicationCheckIniter	file:
processCmds	cc/tools/kfsshell_main.cc	/^int processCmds(bool quietMode, int nargs, const char **cmdLine)$/;"	f
process_request	cc/meta/request.cc	/^process_request(MetaRequest *r)$/;"	f	namespace:KFS
properties	cc/chunk/KfsOps.h	/^    Properties properties; \/\/ input$/;"	m	struct:KFS::SetProperties
properties	cc/meta/request.h	/^	Properties properties; \/\/ input$/;"	m	struct:KFS::MetaSetChunkServersProperties
propfile	cc/access/KfsModulePy.cc	/^	PyObject *propfile;		\/\/ Properties file$/;"	m	struct:kfs_Client	file:
propmap	cc/common/properties.h	/^    PropMap propmap; $/;"	m	class:KFS::Properties
pruneBlksFromHead	cc/libkfsClient/KfsOps.h	/^    bool pruneBlksFromHead;$/;"	m	struct:KFS::TruncateOp
pruneBlksFromHead	cc/meta/request.h	/^	bool pruneBlksFromHead; $/;"	m	struct:KFS::MetaTruncate
pruneFromHead	cc/meta/kfsops.cc	/^Tree::pruneFromHead(fid_t file, chunkOff_t offset)$/;"	f	class:Tree
pthread_mutex_timedlock	cc/qcdio/qcmutex.cpp	31;"	d	file:
publish	cc/libkfsIO/TelemetryClient.cc	/^TelemetryClient::publish(TelemetryClntPacket_t &tpkt)$/;"	f	class:TelemetryClient
publish	cc/libkfsIO/TelemetryClient.cc	/^TelemetryClient::publish(double timetaken, string opname)$/;"	f	class:TelemetryClient
publish	cc/libkfsIO/TelemetryClient.cc	/^TelemetryClient::publish(struct in_addr &target, double timetaken, string opname)$/;"	f	class:TelemetryClient
publish	cc/libkfsIO/TelemetryClient.cc	/^TelemetryClient::publish(struct in_addr &target, double timetaken, string opname,$/;"	f	class:TelemetryClient
push_back	cc/chunk/ChunkManager.h	/^        bool push_back(WriteOp* op)$/;"	f	class:KFS::ChunkManager::PendingWrites
push_front	cc/chunk/ChunkManager.h	/^        bool push_front(WriteOp* op)$/;"	f	class:KFS::ChunkManager::PendingWrites
pushroot	cc/meta/kfstree.cc	/^Tree::pushroot(Node *brother)$/;"	f	class:Tree
put_lib_handler	cc/meta/handler.h	/^       char* put_lib_handler(const std::string &app) {$/;"	f	class:ZincHandler
queue	cc/meta/queue.h	/^	Queue queue;$/;"	m	class:KFS::MetaQueue
rackId	cc/chunk/KfsOps.h	/^    int rackId;$/;"	m	struct:KFS::HelloMetaOp
rackId	cc/meta/request.h	/^	int rackId; \/\/!< the rack on which the server is located$/;"	m	struct:KFS::MetaHello
racks	cc/meta/LayoutManager.cc	/^	set<int> &racks;$/;"	m	class:RackSetter	file:
randGen	java/org/kosmix/kosmosfs/access/KfsTest.java	/^    private static Random randGen = new Random(100);$/;"	f	class:KfsTest	file:
random	python/flogger/flogger.py	/^import random$/;"	i
random	python/rw/rw.py	/^import random$/;"	i
rd_id	python/flogger/readdirplus.py	/^def rd_id(rdtuple):$/;"	f
rd_isdir	python/flogger/readdirplus.py	/^def rd_isdir(rdtuple):$/;"	f
rd_isreg	python/flogger/readdirplus.py	/^def rd_isreg(rdtuple):$/;"	f
rd_name	python/flogger/readdirplus.py	/^def rd_name(rdtuple):$/;"	f
rd_size	python/flogger/readdirplus.py	/^def rd_size(rdtuple):$/;"	f
re	python/kfscp/kfscp.py	/^import re$/;"	i
re	python/rw/rw.py	/^import re$/;"	i
read	java/org/kosmix/kosmosfs/access/KfsInputChannel.java	/^    int read(long cPtr, int fd, ByteBuffer buf, int begin, int end);$/;"	m	class:KfsInputChannel	file:
read	java/org/kosmix/kosmosfs/access/KfsInputChannel.java	/^    public int read(ByteBuffer dst) throws IOException$/;"	m	class:KfsInputChannel
read	python/kfscp/kfscp.py	/^	def read(self, cpfile):$/;"	m	class:cp
readBuffer	java/org/kosmix/kosmosfs/access/KfsInputChannel.java	/^    private ByteBuffer readBuffer;$/;"	f	class:KfsInputChannel	file:
readChunkMetaOp	cc/chunk/ChunkManager.cc	/^    ReadChunkMetaOp *readChunkMetaOp;$/;"	m	class:KFS::ChunkInfoHandle	file:
readDirect	java/org/kosmix/kosmosfs/access/KfsInputChannel.java	/^    private void readDirect(ByteBuffer buf) throws IOException$/;"	m	class:KfsInputChannel	file:
readFd	cc/meta/LayoutManager.cc	/^	set<fid_t> &readFd, &writeFd;$/;"	m	class:OpenFileChecker	file:
readNodesFn	cc/rebalancer/rebalancer_main.cc	/^Rebalancer::readNodesFn(const string nodesFn)$/;"	f	class:Rebalancer
readTelemetryTargets	cc/telemetry/telemetry_server_main.cc	/^static void readTelemetryTargets(const char *machinesFn)$/;"	f	file:
read_op	python/flogger/flogger.py	/^class read_op(test_op):$/;"	c
readdir	cc/meta/kfsops.cc	/^Tree::readdir(fid_t dir, vector <MetaDentry *> &v)$/;"	f	class:Tree
readdir	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    String[] readdir(long ptr, String path, boolean prefetchAttr);$/;"	m	class:KfsAccess	file:
readdirplus	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    String[] readdirplus(long ptr, String path);$/;"	m	class:KfsAccess	file:
rebalance	cc/rebalancer/rebalancer_main.cc	/^Rebalancer::rebalance(ChunkServerPtr &source)$/;"	f	class:Rebalancer
rebalance	cc/rebalancer/rebalancer_main.cc	/^Rebalancer::rebalance(string outputFn)$/;"	f	class:Rebalancer
rebuild	cc/meta/restore.cc	/^Restorer::rebuild(const string cpname, int16_t minReplicas)$/;"	f	class:Restorer
recomputeDirSize	cc/meta/kfsops.cc	/^Tree::recomputeDirSize()$/;"	f	class:Tree
recomputeDirSize	cc/meta/kfsops.cc	/^Tree::recomputeDirSize(fid_t dir, off_t &dirsz)$/;"	f	class:Tree
refine	cc/meta/meta.h	/^refine(Meta *m)$/;"	f	namespace:KFS
release	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    public void release()$/;"	m	class:KfsAccess
relinquishedFlag	cc/meta/LayoutManager.h	/^                bool       relinquishedFlag:1;$/;"	m	struct:KFS::LeaseInfo
remainingLeaseTime	cc/chunk/KfsOps.h	/^    int64_t      remainingLeaseTime;$/;"	m	struct:KFS::GetRecordAppendOpStatus
remainingLeaseTime	cc/libkfsClient/KfsOps.h	/^    int64_t      remainingLeaseTime;$/;"	m	struct:KFS::GetRecordAppendOpStatus
remove	cc/meta/kfsops.cc	/^Tree::remove(fid_t dir, const string &fname, const string &pathname, off_t *filesize)$/;"	f	class:Tree
remove	cc/meta/kfstree.cc	/^Node::remove(int pos)$/;"	f	class:Node
remove	cc/meta/queue.h	/^MetaQueue <T>::remove(PredWrapper<T> &f)$/;"	f	class:KFS::MetaQueue
remove	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    int remove(long ptr, String path);$/;"	m	class:KfsAccess	file:
removeChunk	cc/rebalancer/rebalancer.h	/^        void removeChunk(kfsChunkId_t cid, size_t chunksize) {$/;"	f	class:KFS::ChunkServer
removeLTSpaces	cc/common/properties.cc	/^inline void removeLTSpaces(std::string& str){$/;"	f
removeServer	cc/meta/LayoutManager.h	/^		void removeServer(ChunkServer *server) {$/;"	f	class:KFS::RackInfo
remove_op	python/flogger/flogger.py	/^class remove_op(test_op):$/;"	c
rename	cc/meta/kfsops.cc	/^Tree::rename(fid_t parent, const string &oldname, string &newname,$/;"	f	class:Tree
rename	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    int rename(long ptr, String oldpath, String newpath, boolean overwrite);$/;"	m	class:KfsAccess	file:
renewTime	cc/libkfsClient/LeaseClerk.h	/^    time_t renewTime;$/;"	m	struct:KFS::LeaseInfo_t
replayLogs	cc/emulator/EmulatorSetup.cc	/^int replayLogs()$/;"	f	file:
replayLogs	cc/meta/filelister_main.cc	/^static int replayLogs()$/;"	f	file:
replayLogs	cc/meta/kfsfsck_main.cc	/^static int replayLogs()$/;"	f	file:
replayLogs	cc/meta/logcompactor_main.cc	/^static int replayLogs()$/;"	f	file:
replayLogs	cc/meta/restoremtime_main.cc	/^static int replayLogs()$/;"	f	file:
replay_allocate	cc/meta/replay.cc	/^replay_allocate(deque <string> &c)$/;"	f	file:
replay_coalesce	cc/meta/replay.cc	/^replay_coalesce(deque <string> &c)$/;"	f	file:
replay_create	cc/meta/replay.cc	/^replay_create(deque <string> &c)$/;"	f	file:
replay_mkdir	cc/meta/replay.cc	/^replay_mkdir(deque <string> &c)$/;"	f	file:
replay_pruneFromHead	cc/meta/replay.cc	/^replay_pruneFromHead(deque <string> &c)$/;"	f	file:
replay_remove	cc/meta/replay.cc	/^replay_remove(deque <string> &c)$/;"	f	file:
replay_rename	cc/meta/replay.cc	/^replay_rename(deque <string> &c)$/;"	f	file:
replay_rmdir	cc/meta/replay.cc	/^replay_rmdir(deque <string> &c)$/;"	f	file:
replay_setmtime	cc/meta/replay.cc	/^replay_setmtime(deque <string> &c)$/;"	f	file:
replay_setrep	cc/meta/replay.cc	/^replay_setrep(deque <string> &c)$/;"	f	file:
replay_size	cc/meta/replay.cc	/^replay_size(deque <string> &c)$/;"	f	file:
replay_truncate	cc/meta/replay.cc	/^replay_truncate(deque <string> &c)$/;"	f	file:
replay_version	cc/meta/replay.cc	/^replay_version(deque <string> &c)$/;"	f	file:
replication	java/org/kosmix/kosmosfs/access/KfsFileAttr.java	/^    public int replication;$/;"	f	class:KfsFileAttr
replicationStartTime	cc/chunk/KfsOps.h	/^    time_t          replicationStartTime;$/;"	m	struct:KFS::RecordAppendOp
replicator	cc/chunk/KfsOps.h	/^    ReplicatorPtr replicator;$/;"	m	struct:KFS::ReplicateChunkOp
req	cc/meta/request.h	/^	MetaAllocate * const req;$/;"	m	struct:KFS::MetaChunkAllocate
req	cc/meta/request.h	/^	MetaRequest *req; \/\/!< req that triggered allocation (e.g., truncate)$/;"	m	struct:KFS::MetaAllocate
req	cc/meta/request.h	/^	MetaRequest *req;$/;"	m	struct:KFS::MetaChangeChunkVersionInc
request	cc/meta/request.cc	/^MetaBeginMakeChunkStable::request(ostream &os)$/;"	f	class:KFS::MetaBeginMakeChunkStable
request	cc/meta/request.cc	/^MetaChunkAllocate::request(ostream &os)$/;"	f	class:KFS::MetaChunkAllocate
request	cc/meta/request.cc	/^MetaChunkDelete::request(ostream &os)$/;"	f	class:KFS::MetaChunkDelete
request	cc/meta/request.cc	/^MetaChunkHeartbeat::request(ostream &os)$/;"	f	class:KFS::MetaChunkHeartbeat
request	cc/meta/request.cc	/^MetaChunkMakeStable::request(ostream &os)$/;"	f	class:KFS::MetaChunkMakeStable
request	cc/meta/request.cc	/^MetaChunkReplicate::request(ostream &os)$/;"	f	class:KFS::MetaChunkReplicate
request	cc/meta/request.cc	/^MetaChunkRetire::request(ostream &os)$/;"	f	class:KFS::MetaChunkRetire
request	cc/meta/request.cc	/^MetaChunkServerRestart::request(ostream &os)$/;"	f	class:KFS::MetaChunkServerRestart
request	cc/meta/request.cc	/^MetaChunkSetProperties::request(ostream &os)$/;"	f	class:KFS::MetaChunkSetProperties
request	cc/meta/request.cc	/^MetaChunkSize::request(ostream &os)$/;"	f	class:KFS::MetaChunkSize
request	cc/meta/request.cc	/^MetaChunkStaleNotify::request(ostream &os)$/;"	f	class:KFS::MetaChunkStaleNotify
request	cc/meta/request.cc	/^MetaChunkTruncate::request(ostream &os)$/;"	f	class:KFS::MetaChunkTruncate
request	cc/meta/request.cc	/^MetaChunkVersChange::request(ostream &os)$/;"	f	class:KFS::MetaChunkVersChange
res	cc/chunk/KfsOps.cc	/^    int res;$/;"	m	class:ReadChunkMetaNotifier	file:
reset	cc/meta/kfstree.h	/^	void reset(Node *d, int p) {$/;"	f	class:KFS::LeafIter
reset	python/kfscp/kfscp.py	/^	def reset(self):$/;"	m	class:cp
resetKey	cc/meta/kfstree.cc	/^Node::resetKey(int pos)$/;"	f	class:Node
resetMutationCount	cc/meta/checkpoint.h	/^	void resetMutationCount() { mutations = 0; }$/;"	f	class:KFS::Checkpoint
resolve_collisions	python/rw/rw.py	/^def resolve_collisions(rlist, newr, collision):$/;"	f
resp	cc/meta/request.h	/^	std::string resp; $/;"	m	struct:KFS::MetaGetChunkServersCounters
response	cc/chunk/KfsOps.h	/^    std:: ostringstream response;$/;"	m	struct:KFS::HeartbeatOp
response	cc/meta/request.cc	/^MetaAllocate::response(ostream &os)$/;"	f	class:KFS::MetaAllocate
response	cc/meta/request.cc	/^MetaChangeFileReplication::response(ostream &os)$/;"	f	class:KFS::MetaChangeFileReplication
response	cc/meta/request.cc	/^MetaCheckLeases::response(ostream &os)$/;"	f	class:KFS::MetaCheckLeases
response	cc/meta/request.cc	/^MetaChunkCorrupt::response(ostream &os)$/;"	f	class:KFS::MetaChunkCorrupt
response	cc/meta/request.cc	/^MetaCoalesceBlocks::response(ostream &os)$/;"	f	class:KFS::MetaCoalesceBlocks
response	cc/meta/request.cc	/^MetaCreate::response(ostream &os)$/;"	f	class:KFS::MetaCreate
response	cc/meta/request.cc	/^MetaDumpChunkReplicationCandidates::response(ostream &os)$/;"	f	class:KFS::MetaDumpChunkReplicationCandidates
response	cc/meta/request.cc	/^MetaDumpChunkToServerMap::response(ostream &os)$/;"	f	class:KFS::MetaDumpChunkToServerMap
response	cc/meta/request.cc	/^MetaExecuteRebalancePlan::response(ostream &os)$/;"	f	class:KFS::MetaExecuteRebalancePlan
response	cc/meta/request.cc	/^MetaFsck::response(ostream &os)$/;"	f	class:KFS::MetaFsck
response	cc/meta/request.cc	/^MetaGetChunkServersCounters::response(ostream &os)$/;"	f	class:KFS::MetaGetChunkServersCounters
response	cc/meta/request.cc	/^MetaGetalloc::response(ostream &os)$/;"	f	class:KFS::MetaGetalloc
response	cc/meta/request.cc	/^MetaGetlayout::response(ostream &os)$/;"	f	class:KFS::MetaGetlayout
response	cc/meta/request.cc	/^MetaHello::response(ostream &os)$/;"	f	class:KFS::MetaHello
response	cc/meta/request.cc	/^MetaLeaseAcquire::response(ostream &os)$/;"	f	class:KFS::MetaLeaseAcquire
response	cc/meta/request.cc	/^MetaLeaseRelinquish::response(ostream &os)$/;"	f	class:KFS::MetaLeaseRelinquish
response	cc/meta/request.cc	/^MetaLeaseRenew::response(ostream &os)$/;"	f	class:KFS::MetaLeaseRenew
response	cc/meta/request.cc	/^MetaLookup::response(ostream &os)$/;"	f	class:KFS::MetaLookup
response	cc/meta/request.cc	/^MetaLookupPath::response(ostream &os)$/;"	f	class:KFS::MetaLookupPath
response	cc/meta/request.cc	/^MetaMkdir::response(ostream &os)$/;"	f	class:KFS::MetaMkdir
response	cc/meta/request.cc	/^MetaOpenFiles::response(ostream &os)$/;"	f	class:KFS::MetaOpenFiles
response	cc/meta/request.cc	/^MetaPing::response(ostream &os)$/;"	f	class:KFS::MetaPing
response	cc/meta/request.cc	/^MetaReadConfig::response(ostream &os)$/;"	f	class:KFS::MetaReadConfig
response	cc/meta/request.cc	/^MetaReaddir::response(ostream &os)$/;"	f	class:KFS::MetaReaddir
response	cc/meta/request.cc	/^MetaReaddirPlus::response(ostream &os)$/;"	f	class:KFS::MetaReaddirPlus
response	cc/meta/request.cc	/^MetaRecomputeDirsize::response(ostream &os)$/;"	f	class:KFS::MetaRecomputeDirsize
response	cc/meta/request.cc	/^MetaRemove::response(ostream &os)$/;"	f	class:KFS::MetaRemove
response	cc/meta/request.cc	/^MetaRename::response(ostream &os)$/;"	f	class:KFS::MetaRename
response	cc/meta/request.cc	/^MetaRetireChunkserver::response(ostream &os)$/;"	f	class:KFS::MetaRetireChunkserver
response	cc/meta/request.cc	/^MetaRmdir::response(ostream &os)$/;"	f	class:KFS::MetaRmdir
response	cc/meta/request.cc	/^MetaSetChunkServersProperties::response(ostream &os)$/;"	f	class:KFS::MetaSetChunkServersProperties
response	cc/meta/request.cc	/^MetaSetMtime::response(ostream &os)$/;"	f	class:KFS::MetaSetMtime
response	cc/meta/request.cc	/^MetaStats::response(ostream &os)$/;"	f	class:KFS::MetaStats
response	cc/meta/request.cc	/^MetaToggleRebalancing::response(ostream &os)$/;"	f	class:KFS::MetaToggleRebalancing
response	cc/meta/request.cc	/^MetaToggleWORM::response(ostream &os)$/;"	f	class:KFS::MetaToggleWORM
response	cc/meta/request.cc	/^MetaTruncate::response(ostream &os)$/;"	f	class:KFS::MetaTruncate
response	cc/meta/request.cc	/^MetaUpServers::response(ostream &os)$/;"	f	class:KFS::MetaUpServers
response	cc/meta/request.h	/^	virtual void response(ostream &os)$/;"	f	struct:KFS::MetaRequest
restoreCheckpoint	cc/emulator/EmulatorSetup.cc	/^restoreCheckpoint()$/;"	f	file:
restoreCheckpoint	cc/meta/filelister_main.cc	/^static int restoreCheckpoint(const string &lockfn)$/;"	f	file:
restoreCheckpoint	cc/meta/kfsfsck_main.cc	/^static int restoreCheckpoint(const string &lockFn)$/;"	f	file:
restoreCheckpoint	cc/meta/logcompactor_main.cc	/^static int restoreCheckpoint(const string &lockFn)$/;"	f	file:
restoreCheckpoint	cc/meta/restoremtime_main.cc	/^static int restoreCheckpoint()$/;"	f	file:
restoreMtime	cc/meta/restoremtime_main.cc	/^void restoreMtime(string pathname)$/;"	f
restore_chunkVersionInc	cc/meta/restore.cc	/^KFS::restore_chunkVersionInc(deque <string> &c)$/;"	f	class:KFS
restore_chunkinfo	cc/meta/restore.cc	/^restore_chunkinfo(deque <string> &c)$/;"	f	file:
restore_dentry	cc/meta/restore.cc	/^restore_dentry(deque <string> &c)$/;"	f	file:
restore_fattr	cc/meta/restore.cc	/^restore_fattr(deque <string> &c)$/;"	f	file:
restore_makechunkstable	cc/meta/replay.cc	/^restore_makechunkstable(deque <string> &c, bool addFlag)$/;"	f	file:
restore_makestable	cc/meta/restore.cc	/^restore_makestable(deque <string> &c)$/;"	f	file:
restore_mkstable	cc/meta/replay.cc	/^restore_mkstable(deque <string> &c)$/;"	f	file:
restore_mkstabledone	cc/meta/replay.cc	/^restore_mkstabledone(deque <string> &c)$/;"	f	file:
restore_time	cc/meta/replay.cc	/^restore_time(deque <string> &c)$/;"	f	file:
result	cc/meta/LayoutManager.cc	/^	string &result;$/;"	m	class:Pinger	file:
result	cc/meta/LayoutManager.cc	/^	string &result;$/;"	m	class:RetiringStatus	file:
result	cc/meta/request.h	/^	std::string result; \/\/!< reply$/;"	m	struct:KFS::MetaLookup
result	cc/meta/request.h	/^	std::string result; \/\/!< reply$/;"	m	struct:KFS::MetaLookupPath
resume	cc/meta/request.cc	/^MetaChunkAllocate::resume()$/;"	f	class:KFS::MetaChunkAllocate
resume	cc/meta/request.h	/^        virtual void resume()$/;"	f	struct:KFS::MetaBeginMakeChunkStable
resume	cc/meta/request.h	/^        virtual void resume()$/;"	f	struct:KFS::MetaChunkDelete
resume	cc/meta/request.h	/^        virtual void resume()$/;"	f	struct:KFS::MetaChunkHeartbeat
resume	cc/meta/request.h	/^        virtual void resume()$/;"	f	struct:KFS::MetaChunkMakeStable
resume	cc/meta/request.h	/^        virtual void resume()$/;"	f	struct:KFS::MetaChunkReplicate
resume	cc/meta/request.h	/^        virtual void resume()$/;"	f	struct:KFS::MetaChunkRetire
resume	cc/meta/request.h	/^        virtual void resume()$/;"	f	struct:KFS::MetaChunkServerRestart
resume	cc/meta/request.h	/^        virtual void resume()$/;"	f	struct:KFS::MetaChunkSetProperties
resume	cc/meta/request.h	/^        virtual void resume()$/;"	f	struct:KFS::MetaChunkSize
resume	cc/meta/request.h	/^        virtual void resume()$/;"	f	struct:KFS::MetaChunkStaleNotify
resume	cc/meta/request.h	/^        virtual void resume()$/;"	f	struct:KFS::MetaChunkTruncate
resume	cc/meta/request.h	/^        virtual void resume()$/;"	f	struct:KFS::MetaChunkVersChange
retiringServer	cc/meta/LayoutManager.cc	/^	ChunkServer *retiringServer;$/;"	m	class:MapRetirer	file:
retiringServers	cc/meta/request.h	/^	string retiringServers; \/\/!< info about servers that are being retired$/;"	m	struct:KFS::MetaPing
retval	cc/libkfsIO/DiskEvent.h	/^    ssize_t		retval;$/;"	m	struct:KFS::DiskEvent_t
rightNeighbor	cc/meta/kfstree.h	/^	Node *rightNeighbor(int pos)$/;"	f	class:KFS::Node
rmdir	cc/meta/kfsops.cc	/^Tree::rmdir(fid_t dir, const string &dname, const string &pathname)$/;"	f	class:Tree
rmdir	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    int rmdir(long ptr, String  path);$/;"	m	class:KfsAccess	file:
rmdir_op	python/flogger/flogger.py	/^class rmdir_op(test_op):$/;"	c
rmdirs	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    int rmdirs(long ptr, String  path);$/;"	m	class:KfsAccess	file:
rmr	python/rmr/rmr.py	/^def rmr(client, path):$/;"	f
rollOver	cc/common/DailyRollingFileAppender.cc	/^void DailyRollingFileAppender::rollOver()$/;"	f	class:log4cpp::DailyRollingFileAppender
root	cc/meta/kfstree.h	/^	Node *root;			\/\/!< root node$/;"	m	class:KFS::Tree
root	cc/meta/request.h	/^	fid_t root;	\/\/!< fid of starting directory$/;"	m	struct:KFS::MetaLookupPath
rootFid	cc/libkfsClient/KfsOps.h	/^    kfsFileId_t rootFid; \/\/ fid of the root dir$/;"	m	struct:KFS::LookupPathOp
rop	cc/chunk/KfsOps.h	/^    ReadOp *rop;$/;"	m	struct:KFS::WriteOp
runHandler	cc/meta/handler.cc	/^ZincHandler:: runHandler (const std::string handler_key)  {$/;"	f	class:ZincHandler
run_test	python/flogger/flogger.py	/^def run_test(config_file = default_config_file):$/;"	f
run_test	python/rw/rw.py	/^def run_test(config_file = default_config_file):$/;"	f
runtime_library_dirs	cc/access/kfs_setup.py	/^        runtime_library_dirs = ['\/home\/qmr_ksort\/sortmaster\/lib'],$/;"	v
sAllocatorForGdbToFind	cc/meta/metaserver_main.cc	/^static const BufferAllocator* sAllocatorForGdbToFind = 0;$/;"	v	file:
sDefaultBufferSize	cc/libkfsIO/IOBuffer.cc	/^int IOBufferData::sDefaultBufferSize = 4 << 10;$/;"	m	class:IOBufferData	file:
sDefaultBufferSize	cc/libkfsIO/IOBuffer.h	/^    static int sDefaultBufferSize;$/;"	m	class:KFS::IOBufferData
sDiskIoQueuesPtr	cc/chunk/DiskIo.cc	/^static DiskIoQueues* sDiskIoQueuesPtr;$/;"	m	namespace:KFS	file:
sForGdbToFindInstance	cc/libkfsClient/KfsClient.cc	/^KfsClientFactory* KfsClientFactory::sForGdbToFindInstance = 0;$/;"	m	class:KfsClientFactory	file:
sForGdbToFindInstance	cc/libkfsClient/KfsClient.h	/^    static KfsClientFactory* sForGdbToFindInstance;$/;"	m	class:KFS::KfsClientFactory
sForGdbToFindInstance	cc/libkfsIO/Globals.cc	/^Globals_t* Globals_t::sForGdbToFindInstance = 0;$/;"	m	class:KFS::libkfsio::Globals_t	file:
sForGdbToFindInstance	cc/libkfsIO/Globals.h	/^            static Globals_t* sForGdbToFindInstance;$/;"	m	struct:KFS::libkfsio::Globals_t
sHeartbeatInterval	cc/meta/ChunkServer.cc	/^int ChunkServer::sHeartbeatInterval    = 30;$/;"	m	class:ChunkServer	file:
sHeartbeatInterval	cc/meta/ChunkServer.h	/^                static int sHeartbeatInterval;$/;"	m	class:KFS::ChunkServer
sHeartbeatLogInterval	cc/meta/ChunkServer.cc	/^int ChunkServer::sHeartbeatLogInterval = 100;$/;"	m	class:ChunkServer	file:
sHeartbeatLogInterval	cc/meta/ChunkServer.h	/^                static int sHeartbeatLogInterval;$/;"	m	class:KFS::ChunkServer
sHeartbeatTimeout	cc/meta/ChunkServer.cc	/^int ChunkServer::sHeartbeatTimeout     = 60;$/;"	m	class:ChunkServer	file:
sHeartbeatTimeout	cc/meta/ChunkServer.h	/^                static int sHeartbeatTimeout;$/;"	m	class:KFS::ChunkServer
sIOBufferAllocator	cc/libkfsIO/IOBuffer.cc	/^static libkfsio::IOBufferAllocator* sIOBufferAllocator = 0;$/;"	v	file:
sInFlightReplications	cc/chunk/Replicator.cc	/^static InFlightReplications sInFlightReplications;$/;"	v	file:
sInactivityTimeout	cc/meta/ClientSM.cc	/^int ClientSM::sInactivityTimeout  = 8 * 60;$/;"	m	class:ClientSM	file:
sInactivityTimeout	cc/meta/ClientSM.h	/^	static int sInactivityTimeout;$/;"	m	class:KFS::ClientSM
sInstance	cc/chunk/ChunkServer_main.cc	/^    static Restarter* sInstance;$/;"	m	class:Restarter	file:
sInstance	cc/chunk/ChunkServer_main.cc	/^Restarter* Restarter::sInstance = 0;$/;"	m	class:Restarter	file:
sInstanceNum	cc/chunk/AtomicRecordAppender.cc	/^    static uint64_t          sInstanceNum;$/;"	m	class:KFS::AtomicRecordAppender	file:
sInstanceNum	cc/chunk/AtomicRecordAppender.cc	/^uint64_t AtomicRecordAppender::sInstanceNum = 10000;$/;"	m	class:KFS::AtomicRecordAppender	file:
sInstanceNum	cc/chunk/ClientSM.cc	/^uint64_t ClientSM::sInstanceNum = 10000;$/;"	m	class:ClientSM	file:
sInstanceNum	cc/chunk/ClientSM.h	/^    static uint64_t            sInstanceNum;$/;"	m	class:KFS::ClientSM
sIppStatus	cc/libkfsIO/Checksum.cc	/^static const IppStatus sIppStatus       = ippStaticInit();$/;"	m	namespace:KFS	file:
sIsIOBufferAllocatorUsed	cc/libkfsIO/IOBuffer.cc	/^static volatile bool sIsIOBufferAllocatorUsed = false;$/;"	v	file:
sMaxPendingLength	cc/meta/ClientSM.cc	/^int ClientSM::sMaxPendingLength   = 16;$/;"	m	class:ClientSM	file:
sMaxPendingLength	cc/meta/ClientSM.h	/^        static int sMaxPendingLength;$/;"	m	class:KFS::ClientSM
sMaxReadAhead	cc/meta/ClientSM.cc	/^int ClientSM::sMaxReadAhead       = 3 << 10;$/;"	m	class:ClientSM	file:
sMaxReadAhead	cc/meta/ClientSM.h	/^	static int sMaxReadAhead;$/;"	m	class:KFS::ClientSM
sMaxWriteBehind	cc/meta/ClientSM.cc	/^int ClientSM::sMaxWriteBehind     = 3 << 10;$/;"	m	class:ClientSM	file:
sMaxWriteBehind	cc/meta/ClientSM.h	/^        static int sMaxWriteBehind;$/;"	m	class:KFS::ClientSM
sOpResponseTimeoutSec	cc/chunk/RemoteSyncSM.cc	/^int  RemoteSyncSM::sOpResponseTimeoutSec = 5 * 60; \/\/ 5 min op response timeout$/;"	m	class:RemoteSyncSM	file:
sOpResponseTimeoutSec	cc/chunk/RemoteSyncSM.h	/^    static int  sOpResponseTimeoutSec;$/;"	m	class:KFS::RemoteSyncSM
sReplicationCount	cc/chunk/Replicator.cc	/^static size_t sReplicationCount = 0;$/;"	v	file:
sReqStatsGatherer	cc/meta/ClientSM.cc	/^} sReqStatsGatherer;$/;"	v	typeref:class:RequestStatsGatherer	file:
sRestarter	cc/chunk/ChunkServer_main.cc	/^static Restarter sRestarter;$/;"	v	file:
sStateNames	cc/chunk/AtomicRecordAppender.cc	/^    static const char* const sStateNames[kNumStates];$/;"	m	class:KFS::AtomicRecordAppender	file:
sStateNames	cc/chunk/AtomicRecordAppender.cc	/^const char* const AtomicRecordAppender::sStateNames[kNumStates] =$/;"	m	class:KFS::AtomicRecordAppender	file:
sThreadList	cc/qcdio/qcthread.cpp	/^static QCStartedThreadList sThreadList;$/;"	v	file:
sTraceRequestResponse	cc/chunk/ClientSM.cc	/^bool ClientSM::sTraceRequestResponse = false;$/;"	m	class:ClientSM	file:
sTraceRequestResponse	cc/chunk/ClientSM.h	/^    static bool                sTraceRequestResponse;$/;"	m	class:KFS::ClientSM
sTraceRequestResponse	cc/chunk/RemoteSyncSM.cc	/^bool RemoteSyncSM::sTraceRequestResponse = false;$/;"	m	class:RemoteSyncSM	file:
sTraceRequestResponse	cc/chunk/RemoteSyncSM.h	/^    static bool sTraceRequestResponse;$/;"	m	class:KFS::RemoteSyncSM
sameRack	cc/emulator/LayoutEmulator.cc	/^    int &sameRack;$/;"	m	class:RackAwareReplicationVerifier	file:
sample	python/rw/rw.py	/^def sample(s, n):$/;"	f
sampleData	cc/telemetry/telemetry_server.h	/^        void sampleData(double timespent) {$/;"	f	struct:KFS::NodeState_t
scrubFile	cc/chunk/chunkscrubber_main.cc	/^static void scrubFile(string &fn, bool verbose)$/;"	f	file:
searchname	cc/meta/meta.h	/^	const string searchname;$/;"	m	class:KFS::DirMatch
seed	cc/meta/meta.h	/^	seqid_t seed;		\/\/!< seed for generator$/;"	m	class:KFS::UniqueID
seek	java/org/kosmix/kosmosfs/access/KfsInputChannel.java	/^    int seek(long cPtr, int fd, long offset);$/;"	m	class:KfsInputChannel	file:
seek	java/org/kosmix/kosmosfs/access/KfsInputChannel.java	/^    public int seek(long offset) throws IOException$/;"	m	class:KfsInputChannel
seek	java/org/kosmix/kosmosfs/access/KfsOutputChannel.java	/^    int seek(long ptr, int fd, long offset);$/;"	m	class:KfsOutputChannel	file:
seek	java/org/kosmix/kosmosfs/access/KfsOutputChannel.java	/^    public int seek(long offset) throws IOException$/;"	m	class:KfsOutputChannel
seek	java/org/kosmix/kosmosfs/access/Positionable.java	/^    int seek(long offset) throws IOException;$/;"	m	interface:Positionable
sendtime	cc/meta/util.cc	/^KFS::sendtime(ostream &os, const string &prefix, $/;"	f	class:KFS
seq	cc/chunk/KfsOps.h	/^    kfsSeq_t        seq;$/;"	m	struct:KFS::KfsOp
seq	cc/libkfsClient/KfsOps.h	/^    kfsSeq_t   seq;$/;"	m	struct:KFS::KfsOp
seq	cc/tools/MonUtils.h	/^        int32_t  seq;$/;"	m	struct:KFS_MON::KfsMonOp
seqNo	cc/libkfsClient/KfsAsyncRW.h	/^        kfsSeq_t    seqNo;  \/\/ seq # to use in the RPCs$/;"	m	struct:KFS::AsyncReq
seqNum	cc/chunk/KfsOps.h	/^    kfsSeq_t seqNum;$/;"	m	class:KFS::OpMatcher
seq_t	cc/common/kfstypes.h	/^typedef long long seq_t;        \/\/!< request sequence no. for logging$/;"	t	namespace:KFS
seqid_t	cc/common/kfstypes.h	/^typedef long long seqid_t;      \/\/!< sequence number id's for file\/chunks$/;"	t	namespace:KFS
seqno	cc/meta/request.h	/^	seq_t seqno;	\/\/!< sequence no. in log$/;"	m	struct:KFS::MetaRequest
server	cc/meta/request.h	/^	ChunkServerPtr server;  \/\/!< "dest" on which we put a copy$/;"	m	struct:KFS::MetaChunkReplicate
server	cc/meta/request.h	/^	ChunkServerPtr server; \/\/!< The chunkserver that sent the hello message$/;"	m	struct:KFS::MetaHello
server	cc/meta/request.h	/^	ChunkServerPtr server; \/\/!< The chunkserver that sent us this message$/;"	m	struct:KFS::MetaChunkCorrupt
server	cc/meta/request.h	/^	ChunkServerPtr server; \/\/!< The chunkserver that went down$/;"	m	struct:KFS::MetaBye
server	cc/meta/request.h	/^	const ChunkServer * const server; \/\/ The chunkserver to send this RPC to debug only$/;"	m	struct:KFS::MetaChunkRequest
server	cc/meta/request.h	/^	const ChunkServerPtr server;        \/\/!< The chunkserver that sent us this message$/;"	m	struct:KFS::MetaChunkMakeStable
serverAddedFlag	cc/meta/LayoutManager.h	/^		bool              serverAddedFlag:1;$/;"	m	struct:KFS::MakeChunkStableInfo
serverIdx	cc/meta/LayoutManager.cc	/^	uint32_t serverIdx;$/;"	m	struct:ServerSpace	file:
serverIdx	cc/meta/LayoutManager.cc	/^	uint32_t serverIdx;$/;"	m	struct:ServerSpaceUtil	file:
serverLoc	cc/libkfsClient/KfsOps.h	/^    ServerLocation serverLoc;$/;"	m	struct:KFS::WriteInfo
serverLoc	cc/meta/request.h	/^        const ServerLocation serverLoc;     \/\/ processing this cmd$/;"	m	struct:KFS::MetaBeginMakeChunkStable
serverProps	cc/meta/request.h	/^	const string serverProps;$/;"	m	struct:KFS::MetaChunkSetProperties
servers	cc/chunk/KfsOps.h	/^    std::string    servers;           \/* input: set of servers on which to write *\/$/;"	m	struct:KFS::WriteIdAllocOp
servers	cc/chunk/KfsOps.h	/^    std::string  servers;               \/* input: set of servers on which to write *\/$/;"	m	struct:KFS::RecordAppendOp
servers	cc/chunk/KfsOps.h	/^    std::string  servers;         \/\/ input: set of servers on which to chunk is to be closed$/;"	m	struct:KFS::CloseOp
servers	cc/chunk/KfsOps.h	/^    std::string  servers; \/* input: set of servers on which to write *\/$/;"	m	struct:KFS::ChunkSpaceReleaseOp
servers	cc/chunk/KfsOps.h	/^    std::string  servers; \/* input: set of servers on which to write *\/$/;"	m	struct:KFS::ChunkSpaceReserveOp
servers	cc/chunk/KfsOps.h	/^    std::string  servers; \/* input: set of servers on which to write *\/$/;"	m	struct:KFS::WritePrepareOp
servers	cc/chunk/KfsOps.h	/^    std::string servers; \/\/ input$/;"	m	struct:KFS::AllocChunkOp
servers	cc/chunk/KfsOps.h	/^    std::string servers;$/;"	m	struct:KFS::WriteSyncOp
servers	cc/meta/request.h	/^	string servers; \/\/!< result that contains info about chunk servers$/;"	m	struct:KFS::MetaPing
servers	cc/meta/request.h	/^	vector <ChunkServerPtr> servers;$/;"	m	struct:KFS::MetaAllocate
setCPDir	cc/meta/checkpoint.h	/^	void setCPDir(const string &d) $/;"	f	class:KFS::Checkpoint
setChunkmapDumpDir	cc/meta/request.cc	/^setChunkmapDumpDir(string d)$/;"	f	namespace:KFS
setClusterKey	cc/meta/request.cc	/^setClusterKey(const char *key)$/;"	f	namespace:KFS
setDefaultIoBufferSize	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    long setDefaultIoBufferSize(long size);$/;"	m	class:KfsAccess
setDefaultReadAheadSize	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    long setDefaultReadAheadSize(long size);$/;"	m	class:KfsAccess
setIoBufferSize	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    long setIoBufferSize(int fd, long size);$/;"	m	class:KfsAccess	file:
setLog	cc/meta/logger.cc	/^Logger::setLog(int seqno)$/;"	f	class:Logger
setLogDir	cc/meta/logger.h	/^	void setLogDir(const string &d)$/;"	f	class:KFS::Logger
setMD5SumFn	cc/meta/request.cc	/^setMD5SumFn(const char *md5sumFn)$/;"	f	namespace:KFS
setMaxDaysToKeep	cc/common/DailyRollingFileAppender.cc	/^void DailyRollingFileAppender::setMaxDaysToKeep(unsigned int maxDaysToKeep)$/;"	f	class:log4cpp::DailyRollingFileAppender
setMaxReplicasPerFile	cc/meta/request.cc	/^setMaxReplicasPerFile(int16_t val)$/;"	f	namespace:KFS
setModificationTime	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    int setModificationTime(long ptr, String path, long msecs);$/;"	m	class:KfsAccess	file:
setReadAheadSize	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    long setReadAheadSize(int fd, long size);$/;"	m	class:KfsAccess	file:
setReplication	cc/meta/meta.h	/^	void setReplication(int16_t val) {$/;"	f	class:KFS::MetaFattr
setReplication	java/org/kosmix/kosmosfs/access/KfsAccess.java	/^    short setReplication(long ptr, String path, int numReplicas);$/;"	m	class:KfsAccess	file:
setStr	cc/access/KfsAccessJni.cc	/^    inline void setStr(string & dst, JNIEnv * jenv, jstring src)$/;"	f	namespace:__anon24
setUp	python/unittests/dirops.py	/^    def setUp(self):$/;"	m	class:DirOpsTestCase
setUp	python/unittests/worm.py	/^    def setUp(self):$/;"	m	class:WORMTestCase
setUp	python/unittests/write-flush.py	/^    def setUp(self):$/;"	m	class:WriteFlushTestCase
setUp	python/unittests/write.py	/^    def setUp(self):$/;"	m	class:WritePlacementTestCase
setValue	cc/common/properties.cc	/^void Properties::setValue(const std::string key, const std::string value) {$/;"	f	class:Properties
setWORMMode	cc/meta/request.cc	/^setWORMMode(bool value)$/;"	f	namespace:KFS
set_file_members	cc/access/KfsModulePy.cc	/^set_file_members($/;"	f	file:
set_seqno	cc/meta/logger.h	/^	void set_seqno(seq_t last)$/;"	f	class:KFS::Logger
set_state	python/flogger/flogger.py	/^def set_state(name, value):$/;"	f
setflag	cc/meta/base.h	/^	void setflag(int bit) { flagbits |= bit; }$/;"	f	class:KFS::MetaNode
setseed	cc/meta/meta.h	/^	void setseed(seqid_t s) { seed = s; }$/;"	f	class:KFS::UniqueID
setup	cc/access/kfs_setup.py	/^from distutils.core import setup, Extension$/;"	i
setupHandlers	cc/tools/kfsshell_main.cc	/^void setupHandlers()$/;"	f
setup_handlers	cc/meta/request.cc	/^setup_handlers()$/;"	f	namespace:KFS
setup_initial_tree	cc/meta/startup.cc	/^setup_initial_tree(uint32_t minNumReplicasPerFile)$/;"	f	file:
setup_params	python/flogger/flogger.py	/^def setup_params(config_file):$/;"	f
setup_params	python/rw/rw.py	/^def setup_params(config_file):$/;"	f
setup_params	python/unittests/dirops.py	/^def setup_params(config_file):$/;"	f
setup_params	python/unittests/worm.py	/^def setup_params(config_file):$/;"	f
setup_params	python/unittests/write-flush.py	/^def setup_params(config_file):$/;"	f
setup_params	python/unittests/write.py	/^def setup_params(config_file):$/;"	f
shiftLeft	cc/meta/kfstree.cc	/^Node::shiftLeft(Node *dest, int nshift)$/;"	f	class:Node
shiftRight	cc/meta/kfstree.cc	/^Node::shiftRight(Node *dest, int nshift)$/;"	f	class:Node
shift_path	cc/meta/kfstree.cc	/^Tree::shift_path(vector <pathlink> &path)$/;"	f	class:Tree
show	cc/meta/kfstree.cc	/^Node::show() const$/;"	f	class:Node
show	cc/meta/meta.cc	/^MetaChunkInfo::show() const$/;"	f	class:MetaChunkInfo
show	cc/meta/meta.cc	/^MetaDentry::show() const$/;"	f	class:MetaDentry
show	cc/meta/meta.cc	/^MetaFattr::show() const$/;"	f	class:MetaFattr
showChildren	cc/meta/kfstree.cc	/^Node::showChildren() const$/;"	f	class:Node
showNode	cc/meta/kfstree.cc	/^showNode(MetaNode *n)$/;"	f
showtime	cc/meta/meta.cc	/^KFS::showtime(struct timeval t)$/;"	f	class:KFS
size	cc/chunk/ChunkManager.h	/^        size_t size() const$/;"	f	class:KFS::ChunkManager::PendingWrites
size	cc/chunk/KfsOps.h	/^    off_t     size; \/* result *\/$/;"	m	struct:KFS::SizeOp
size	cc/common/properties.h	/^    size_t size() const { return propmap.size(); }$/;"	f	class:KFS::Properties
size	cc/libkfsClient/KfsClient.cc	/^    off_t *size;$/;"	m	struct:RespondingServer	file:
size	cc/libkfsClient/KfsOps.h	/^    off_t     size; \/* result *\/$/;"	m	struct:KFS::SizeOp
size	cc/meta/LayoutManager.h	/^		size_type size() const {$/;"	f	class:KFS::CSMap
size_type	cc/meta/LayoutManager.h	/^		typedef Map::size_type      size_type;$/;"	t	class:KFS::CSMap
skip	cc/meta/meta.h	/^	bool skip() const { return testflag(META_SKIP); }$/;"	f	class:KFS::Meta
skipHoles	cc/libkfsClient/KfsClientInt.h	/^    bool skipHoles;$/;"	m	struct:KFS::FileTableEntry
skipHoles	cc/tools/cpfromkfs_main.cc	/^bool skipHoles = false;$/;"	v
sleep	cc/meta/thread.h	/^	void sleep()$/;"	f	class:KFS::MetaThread
sleepEndTime	cc/meta/LayoutManager.h	/^		time_t sleepEndTime;$/;"	m	struct:KFS::HibernatingServerInfo_t
slowNodes	cc/telemetry/packet.h	/^        struct in_addr slowNodes[MAX_NODES_PER_PKT];$/;"	m	struct:KFS::TelemetryServerPacket_t	typeref:struct:KFS::TelemetryServerPacket_t::in_addr
sock	cc/libkfsClient/KfsAsyncRW.h	/^        TcpSocketPtr  sock; \/\/ socket connected to chunkserver$/;"	m	struct:KFS::AsyncReq
sock	cc/libkfsClient/KfsClientInt.h	/^    TcpSocketPtr   sock;$/;"	m	struct:KFS::ChunkServerConn
socket	python/unittests/write.py	/^import os, os.path, socket$/;"	i
source	cc/telemetry/packet.h	/^        struct in_addr source;$/;"	m	struct:KFS::TelemetryClntPacket_t	typeref:struct:KFS::TelemetryClntPacket_t::in_addr
sources	cc/access/kfs_setup.py	/^		sources = ['KfsModulePy.cc'])$/;"	v
spaceReservationSize	cc/libkfsClient/KfsOps.h	/^    int spaceReservationSize;$/;"	m	struct:KFS::AllocateOp
spaceReservationSize	cc/meta/LayoutManager.h	/^			int  spaceReservationSize;$/;"	m	struct:KFS::ARAChunkCache::Entry
spaceReservationSize	cc/meta/request.h	/^        int spaceReservationSize;$/;"	m	struct:KFS::MetaAllocate
special	python/flogger/flogger.py	/^def special(dir):$/;"	f
specialDirEntry	python/unittests/dirops.py	/^def specialDirEntry(entry):$/;"	f
specialDirEntry	python/unittests/write.py	/^def specialDirEntry(entry):$/;"	f
split	cc/chunk/Utils.cc	/^void KFS::split(std::vector<std::string> &component, const string &path, char separator)$/;"	f	class:KFS
split	cc/meta/kfstree.cc	/^Node::split(Tree *t, Node *father, int pos)$/;"	f	class:Node
split	cc/meta/util.cc	/^KFS::split(deque <string> &component, const string path, char sep)$/;"	f	class:KFS
split	cc/rebalancer/rebalancer_main.cc	/^void split(const string &str, vector<string> &parts, char sep)$/;"	f
split	python/rw/rw.py	/^def split(oldr, newr):$/;"	f
src	cc/meta/LayoutManager.h	/^		char src[hostnamelen];$/;"	m	struct:KFS::RebalancePlanInfo_t
src	cc/rebalancer/rebalancer.h	/^        char src[hostnamelen];$/;"	m	struct:KFS::RebalancePlanInfo_t
srcChunkId	cc/chunk/KfsOps.h	/^    kfsChunkId_t srcChunkId; \/\/ input$/;"	m	struct:KFS::CoalesceBlockOp
srcChunks	cc/meta/request.h	/^	vector<chunkId_t> srcChunks;$/;"	m	struct:KFS::MetaCoalesceBlocks
srcFid	cc/meta/request.h	/^	fid_t  srcFid;$/;"	m	struct:KFS::MetaCoalesceBlocks
srcFileId	cc/chunk/KfsOps.h	/^    kfsFileId_t srcFileId; \/\/ input$/;"	m	struct:KFS::CoalesceBlockOp
srcLocation	cc/meta/request.h	/^	ServerLocation srcLocation; \/\/!< where to get a copy from$/;"	m	struct:KFS::MetaChunkReplicate
srcPath	cc/libkfsClient/KfsOps.h	/^    std::string srcPath; \/\/ input$/;"	m	struct:KFS::CoalesceBlocksOp
srcPath	cc/meta/request.h	/^	string srcPath; \/\/!< fully-qualified pathname$/;"	m	struct:KFS::MetaCoalesceBlocks
srcRevision	cc/common/buildVers.py	/^srcRevision = "100"$/;"	v
stableFlag	cc/chunk/KfsOps.h	/^    bool         stableFlag;$/;"	m	struct:KFS::GetRecordAppendOpStatus
stableFlag	cc/libkfsClient/KfsOps.h	/^    bool         stableFlag;$/;"	m	struct:KFS::GetRecordAppendOpStatus
staleChunkIds	cc/chunk/KfsOps.h	/^    std::vector<kfsChunkId_t> staleChunkIds; \/* data we parse out *\/$/;"	m	struct:KFS::StaleChunksOp
staleChunkIds	cc/meta/request.h	/^	vector<chunkId_t> staleChunkIds; \/\/!< chunk ids that are stale$/;"	m	struct:KFS::MetaChunkStaleNotify
start	cc/libkfsClient/KfsClientInt.h	/^    off_t start;		\/\/ offset with chunk$/;"	m	struct:KFS::ChunkBuffer
start	cc/meta/thread.h	/^	void start(thread_start_t func, void *arg)$/;"	f	class:KFS::MetaThread
start	cc/tools/cpfromkfs_main.cc	/^off_t start = -1, stop = -1;$/;"	v
startLog	cc/meta/logger.cc	/^Logger::startLog(int seqno)$/;"	f	class:Logger
startPeriod	cc/telemetry/telemetry_server.h	/^        void startPeriod() {$/;"	f	struct:KFS::NodeState_t
startTime	cc/chunk/KfsOps.h	/^    struct timeval  startTime;$/;"	m	struct:KFS::KfsOp	typeref:struct:KFS::KfsOp::timeval
start_client	python/flogger/flogger.py	/^def start_client(props):$/;"	f
start_client	python/rw/rw.py	/^def start_client(props):$/;"	f
start_client	python/unittests/dirops.py	/^def start_client(props):$/;"	f
start_client	python/unittests/worm.py	/^def start_client(props):$/;"	f
start_client	python/unittests/write-flush.py	/^def start_client(props):$/;"	f
start_client	python/unittests/write.py	/^def start_client(props):$/;"	f
stat	python/unittests/write-flush.py	/^import mmap, stat$/;"	i
stats	cc/chunk/KfsOps.h	/^    std::string stats; \/\/ result$/;"	m	struct:KFS::StatsOp
stats	cc/meta/request.h	/^	string stats; \/\/!< result$/;"	m	struct:KFS::MetaStats
stats	cc/tools/MonUtils.h	/^        KFS::Properties stats; \/\/ result$/;"	m	struct:KFS_MON::ChunkStatsOp
stats	cc/tools/MonUtils.h	/^        KFS::Properties stats; \/\/ result$/;"	m	struct:KFS_MON::MetaStatsOp
status	cc/chunk/KfsOps.h	/^    int32_t         status;$/;"	m	struct:KFS::KfsOp
status	cc/libkfsClient/KfsClient.cc	/^    int *status;$/;"	m	struct:RespondingServer	file:
status	cc/libkfsClient/KfsOps.h	/^    int32_t   status;$/;"	m	struct:KFS::KfsOp
status	cc/libkfsIO/DiskEvent.h	/^    EventStatus_t	status;$/;"	m	struct:KFS::DiskEvent_t
status	cc/meta/request.h	/^	int status;	\/\/!< returned status$/;"	m	struct:KFS::MetaRequest
status	cc/tools/MonUtils.h	/^        ssize_t  status;$/;"	m	struct:KFS_MON::KfsMonOp
statusMsg	cc/chunk/KfsOps.h	/^    std::string     statusMsg; \/\/ output, optional, mostly for debugging$/;"	m	struct:KFS::KfsOp
statusMsg	cc/libkfsClient/KfsOps.h	/^    std::string statusMsg; \/\/ optional, mostly for debugging$/;"	m	struct:KFS::KfsOp
statusMsg	cc/meta/request.h	/^        std::string statusMsg;$/;"	m	struct:KFS::MetaRequest
std	cc/common/cxxutil.h	/^namespace std$/;"	n
stop	cc/meta/thread.h	/^	void stop()$/;"	f	class:KFS::MetaThread
stop	cc/tools/cpfromkfs_main.cc	/^off_t start = -1, stop = -1;$/;"	v
stringStream	cc/meta/request.h	/^	ostringstream stringStream;$/;"	m	struct:KFS::MetaUpServers
strip_dots	cc/access/KfsModulePy.cc	/^strip_dots(string path)$/;"	f	file:
strip_dots	cc/libkfsClient/Utils.cc	/^KFS::strip_dots(string path)$/;"	f	class:KFS
strip_dots	python/kfscp/kfscp.py	/^def strip_dots(path):$/;"	f
subdirs	python/flogger/flogger.py	/^def subdirs(dirlist):$/;"	f
submitTime	cc/libkfsClient/KfsOps.h	/^    struct timeval submitTime; \/* when the client sent the request to the server *\/$/;"	m	struct:KFS::ReadOp	typeref:struct:KFS::ReadOp::timeval
submit_request	cc/meta/request.cc	/^submit_request(MetaRequest *r)$/;"	f	namespace:KFS
suite	python/unittests/worm.py	/^def suite():$/;"	f
suspended	cc/meta/request.h	/^	bool suspended;  \/\/!< is this request suspended somewhere$/;"	m	struct:KFS::MetaRequest
swap	cc/common/properties.h	/^    void swap(Properties& props)$/;"	f	class:KFS::Properties
swap	cc/meta/queue.h	/^MetaQueue <T>::swap(Queue &q)$/;"	f	class:KFS::MetaQueue
sync	java/org/kosmix/kosmosfs/access/KfsOutputChannel.java	/^    int sync(long ptr, int fd);$/;"	m	class:KfsOutputChannel	file:
sync	java/org/kosmix/kosmosfs/access/KfsOutputChannel.java	/^    public int sync() throws IOException$/;"	m	class:KfsOutputChannel
sys	cc/access/kfs_setup.py	/^import sys$/;"	i
sys	cc/common/buildVers.py	/^import os,sys$/;"	i
sys	python/flogger/flogger.py	/^import sys$/;"	i
sys	python/rw/rw.py	/^import sys$/;"	i
sys	python/unittests/dirops.py	/^import sys$/;"	i
sys	python/unittests/worm.py	/^import sys$/;"	i
sys	python/unittests/write-flush.py	/^import sys$/;"	i
sys	python/unittests/write.py	/^import sys$/;"	i
systemInfo	cc/meta/request.h	/^	string systemInfo; \/\/!< result that describes system info (space etc)$/;"	m	struct:KFS::MetaPing
sz	cc/meta/LayoutManager.cc	/^    off_t sz;$/;"	m	class:Truncator	file:
table	cc/meta/entry.h	/^	parsetab table;$/;"	m	class:KFS::DiskEntry
target	cc/meta/ChunkServer.h	/^		const ChunkServer * const target;$/;"	m	class:KFS::ChunkServerMatcher
target	cc/meta/LayoutManager.cc	/^	const ChunkServer * const target;$/;"	m	struct:ExpireLeaseIfOwner	file:
target	cc/meta/LayoutManager.cc	/^	const ChunkServer* const target;$/;"	m	class:MapPurger	file:
target	cc/telemetry/packet.h	/^        struct in_addr target;$/;"	m	struct:KFS::TelemetryClntPacket_t	typeref:struct:KFS::TelemetryClntPacket_t::in_addr
targets	cc/telemetry/telemetry_server_main.cc	/^vector<struct sockaddr_in> targets;$/;"	v
tearDown	python/unittests/dirops.py	/^    def tearDown(self):$/;"	m	class:DirOpsTestCase
tearDown	python/unittests/worm.py	/^    def tearDown(self):$/;"	m	class:WORMTestCase
tearDown	python/unittests/write-flush.py	/^    def tearDown(self):$/;"	m	class:WriteFlushTestCase
tearDown	python/unittests/write.py	/^    def tearDown(self):$/;"	m	class:WritePlacementTestCase
tell	java/org/kosmix/kosmosfs/access/KfsInputChannel.java	/^    long tell(long cPtr, int fd);$/;"	m	class:KfsInputChannel	file:
tell	java/org/kosmix/kosmosfs/access/KfsInputChannel.java	/^    public long tell() throws IOException$/;"	m	class:KfsInputChannel
tell	java/org/kosmix/kosmosfs/access/KfsOutputChannel.java	/^    long tell(long ptr, int fd);$/;"	m	class:KfsOutputChannel	file:
tell	java/org/kosmix/kosmosfs/access/KfsOutputChannel.java	/^    public long tell() throws IOException$/;"	m	class:KfsOutputChannel
tell	java/org/kosmix/kosmosfs/access/Positionable.java	/^    long tell() throws IOException;$/;"	m	interface:Positionable
test	cc/qcdio/iovperf.c	/^static int test(int argc, char** argv, int t)$/;"	f	file:
testAppend	python/unittests/write.py	/^    def testAppend(self):$/;"	m	class:WritePlacementTestCase
testBlockPlacement	python/unittests/write.py	/^    def testBlockPlacement(self):$/;"	m	class:WritePlacementTestCase
testFileRename	python/unittests/worm.py	/^    def testFileRename(self):$/;"	m	class:WORMTestCase
testFileRm	python/unittests/worm.py	/^    def testFileRm(self):$/;"	m	class:WORMTestCase
testFlush	python/unittests/write-flush.py	/^    def testFlush(self):$/;"	m	class:WriteFlushTestCase
testReaddir	python/unittests/dirops.py	/^    def testReaddir(self):$/;"	m	class:DirOpsTestCase
testReaddirPlus	python/unittests/dirops.py	/^    def testReaddirPlus(self):$/;"	m	class:DirOpsTestCase
testSmallWrite	python/unittests/write-flush.py	/^    def testSmallWrite(self):$/;"	m	class:WriteFlushTestCase
testTmpDirRename	python/unittests/worm.py	/^    def testTmpDirRename(self):$/;"	m	class:WORMTestCase
testTmpDirRm	python/unittests/worm.py	/^    def testTmpDirRm(self):$/;"	m	class:WORMTestCase
testTmpFileRename	python/unittests/worm.py	/^    def testTmpFileRename(self):$/;"	m	class:WORMTestCase
testTmpFileRm	python/unittests/worm.py	/^    def testTmpFileRm(self):$/;"	m	class:WORMTestCase
test_file	python/rw/rw.py	/^class test_file:$/;"	c
test_op	python/flogger/flogger.py	/^class test_op:$/;"	c
testflag	cc/meta/base.h	/^	bool testflag(int bit) const { return (flagbits & bit) != 0; }$/;"	f	class:KFS::MetaNode
theProps	cc/libkfsClient/KfsClient.cc	/^    Properties & theProps()$/;"	f	namespace:__anon13
thread	cc/meta/queue.h	/^	MetaThread thread;$/;"	m	class:KFS::MetaQueue
thread	cc/meta/thread.h	/^	pthread_t thread;$/;"	m	class:KFS::MetaThread
threadInited	cc/meta/thread.h	/^	bool threadInited;$/;"	m	class:KFS::MetaThread
thread_start_t	cc/meta/thread.h	/^	typedef void *(*thread_start_t)(void *);$/;"	t	class:KFS::MetaThread
time	python/rw/rw.py	/^import time$/;"	i
time	python/unittests/dirops.py	/^import time$/;"	i
time	python/unittests/worm.py	/^import time$/;"	i
time	python/unittests/write-flush.py	/^import time$/;"	i
time	python/unittests/write.py	/^import time$/;"	i
timeToStr	cc/meta/util.cc	/^KFS::timeToStr(time_t val)$/;"	f	class:KFS
time_parse	python/kfscp/kfscp.py	/^	def time_parse(self, parts):$/;"	m	class:cp
timetaken	cc/telemetry/packet.h	/^        double timetaken;$/;"	m	struct:KFS::TelemetryClntPacket_t
toNumber	cc/meta/util.cc	/^KFS::toNumber(string s)$/;"	f	class:KFS
toString	cc/meta/request.h	/^	string toString()$/;"	f	struct:KFS::ChunkLayoutInfo
toString	cc/meta/util.cc	/^KFS::toString(long long n)$/;"	f	class:KFS
tools	cc/tools/KfsShell.h	/^    namespace tools$/;"	n	namespace:KFS
tools	cc/tools/KfsToolsCommon.h	/^    namespace tools$/;"	n	namespace:KFS
totalSpace	cc/chunk/KfsOps.h	/^    int64_t totalSpace;$/;"	m	struct:KFS::HelloMetaOp
totalSpace	cc/chunk/KfsOps.h	/^    int64_t totalSpace;$/;"	m	struct:KFS::PingOp
totalSpace	cc/meta/LayoutManager.cc	/^	uint64_t &totalSpace;$/;"	m	class:Pinger	file:
totalSpace	cc/meta/request.h	/^	uint64_t totalSpace; \/\/!< How much storage space does the$/;"	m	struct:KFS::MetaHello
totalSpace	cc/tools/MonUtils.h	/^        int64_t totalSpace;$/;"	m	struct:KFS_MON::ChunkPingOp
totalTimeInPeriod	cc/telemetry/telemetry_server.h	/^        double totalTimeInPeriod;$/;"	m	struct:KFS::NodeState_t
tr1	cc/common/cxxutil.h	/^namespace tr1$/;"	n	namespace:std
transactionId	cc/chunk/ClientSM.h	/^        int64_t transactionId; \/\/ unique for each chunkserver$/;"	m	struct:KFS::ChunkSpaceReservationKey_t
trimFile	cc/chunk/chunktrimmer_main.cc	/^static void trimFile(string &fn, off_t filesz, bool verbose)$/;"	f	file:
trimPart	cc/chunk/chunktrimmer_main.cc	/^trimPart(int fd, off_t startP, off_t endP, int blkSz, int &numFreed, int &numKept)$/;"	f	file:
truncate	cc/meta/kfsops.cc	/^Tree::truncate(fid_t file, chunkOff_t offset, chunkOff_t *allocOffset)$/;"	f	class:Tree
truncate_op	python/flogger/flogger.py	/^class truncate_op(test_op):$/;"	c
type	cc/chunk/KfsOps.h	/^    OpType_t        type;$/;"	m	struct:KFS::KfsOp
type	cc/meta/base.h	/^	MetaType type;$/;"	m	class:KFS::MetaNode
type	cc/meta/meta.h	/^	FileType type;		\/\/!< file or directory$/;"	m	class:KFS::MetaFattr
underReplicated	cc/emulator/LayoutEmulator.cc	/^    int &underReplicated;$/;"	m	class:RackAwareReplicationVerifier	file:
underflow	cc/libkfsIO/IOBuffer.cc	/^int IOBuffer::StreamBuffer::underflow()$/;"	f	class:IOBuffer::StreamBuffer
unittest	python/unittests/dirops.py	/^import unittest$/;"	i
unittest	python/unittests/worm.py	/^import unittest$/;"	i
unittest	python/unittests/write-flush.py	/^import unittest$/;"	i
unittest	python/unittests/write.py	/^import unittest$/;"	i
unlink	cc/meta/kfsops.cc	/^Tree::unlink(fid_t dir, const string fname, MetaFattr *fa, bool save_fa)$/;"	f	class:Tree
unlock	cc/meta/thread.h	/^	void unlock()$/;"	f	class:KFS::MetaThread
upServers	cc/tools/MonUtils.h	/^        std::vector<std::string> upServers; \/\/\/ result$/;"	m	struct:KFS_MON::MetaPingOp
update	cc/meta/LayoutManager.h	/^		void update() {$/;"	f	class:KFS::CSMap
updateNodeState	cc/telemetry/telemetry_server_main.cc	/^KFS::updateNodeState(TelemetryClntPacket_t &tpkt)$/;"	f	class:KFS
updateSeed	cc/meta/replay.cc	/^updateSeed(UniqueID &id, seqid_t seed)$/;"	f	file:
updateSpaceUsageForPath	cc/meta/kfsops.cc	/^Tree::updateSpaceUsageForPath(const string &path, off_t nbytes)$/;"	f	class:Tree
updateState	cc/telemetry/telemetry_server_main.cc	/^KFS::updateState()$/;"	f	class:KFS
upgradeChunkFile	cc/chunk/chunkupgrade_main.cc	/^static void upgradeChunkFile(string chunkDir, string chunkfn, bool verbose)$/;"	f	file:
upper_bound	cc/meta/LayoutManager.h	/^		const_iterator upper_bound(const key_type& key) const {$/;"	f	class:KFS::CSMap
upper_bound	cc/meta/LayoutManager.h	/^		iterator upper_bound(const key_type& key) {$/;"	f	class:KFS::CSMap
uptime	cc/meta/request.h	/^        int64_t uptime; \/\/!< Chunk server uptime.$/;"	m	struct:KFS::MetaHello
usedSpace	cc/chunk/ChunkManager.h	/^        int64_t usedSpace;$/;"	m	struct:KFS::ChunkManager::ChunkDirInfo_t
usedSpace	cc/chunk/ChunkManager.h	/^    int64_t usedSpace;$/;"	m	struct:KFS::ChunkDirInfo_t
usedSpace	cc/chunk/KfsOps.h	/^    int64_t usedSpace;$/;"	m	struct:KFS::HelloMetaOp
usedSpace	cc/chunk/KfsOps.h	/^    int64_t usedSpace;$/;"	m	struct:KFS::PingOp
usedSpace	cc/meta/LayoutManager.cc	/^	uint64_t &usedSpace;$/;"	m	class:Pinger	file:
usedSpace	cc/meta/LayoutManager.cc	/^	uint64_t usedSpace;$/;"	m	struct:ServerSpace	file:
usedSpace	cc/meta/request.h	/^	uint64_t usedSpace; \/\/!< How much storage space is used up (in bytes)$/;"	m	struct:KFS::MetaHello
usedSpace	cc/rebalancer/rebalancer.h	/^        off_t usedSpace;$/;"	m	struct:KFS::DriveInfo
usedSpace	cc/tools/MonUtils.h	/^        int64_t usedSpace;$/;"	m	struct:KFS_MON::ChunkPingOp
utilization	cc/meta/LayoutManager.cc	/^	float utilization;$/;"	m	struct:ServerSpaceUtil	file:
v	cc/meta/request.cc	/^	vector <ServerLocation> &v;$/;"	m	class:KFS::EnumerateLocations	file:
v	cc/meta/request.h	/^	ostringstream v; \/\/!< results built out into a string$/;"	m	struct:KFS::MetaReaddirPlus
v	cc/meta/request.h	/^	vector <ChunkLayoutInfo> v; \/\/!< vector of results$/;"	m	struct:KFS::MetaGetlayout
v	cc/meta/request.h	/^	vector <MetaDentry *> v; \/\/!< vector of results$/;"	m	struct:KFS::MetaReaddir
valid_fd	cc/libkfsClient/KfsClientInt.h	/^    bool valid_fd(int fd) { return (fd >= 0 && fd < MAX_FILES && (size_t)fd < mFileTable.size() && mFileTable[fd]); }$/;"	f	class:KFS::KfsClientImpl
validate	python/kfscp/kfscp.py	/^	def validate(self, parts, re_list):$/;"	m	class:cp
validatedTime	cc/libkfsClient/KfsClientInt.h	/^    time_t	validatedTime;$/;"	m	struct:KFS::FileTableEntry
value	cc/meta/request.h	/^	bool value; \/\/ !< Enable\/disable WORM$/;"	m	struct:KFS::MetaToggleWORM
value	cc/meta/request.h	/^	bool value; \/\/ !< Enable\/disable rebalancing$/;"	m	struct:KFS::MetaToggleRebalancing
value	cc/tools/MonUtils.h	/^        int value;$/;"	m	struct:KFS_MON::MetaToggleWORMOp
value_type	cc/meta/LayoutManager.h	/^		typedef Map::value_type     value_type;$/;"	t	class:KFS::CSMap
verbose	cc/emulator/LayoutEmulator.cc	/^    bool verbose;$/;"	m	class:RackAwareReplicationVerifier	file:
verify	cc/emulator/LayoutEmulator.cc	/^    void verify (const map<chunkId_t, ChunkPlacementInfo >::value_type p, ofstream &ofs) {$/;"	f	class:RackAwareReplicationVerifier
verifyChecksums	cc/tools/kfsdataverify_main.cc	/^static int verifyChecksums(const char *cksumFn)$/;"	f	file:
verifyExecutingOnEventProcessor	cc/chunk/KfsOps.cc	/^KFS::verifyExecutingOnEventProcessor()$/;"	f	class:KFS
verifyExecutingOnNetProcessor	cc/chunk/ChunkServer.cc	/^KFS::verifyExecutingOnNetProcessor()$/;"	f	class:KFS
verifyFile	cc/tools/kfsdataverify_main.cc	/^static int verifyFile(const char *srcFn, const char *kfsFn, ofstream &cksumS)$/;"	f	file:
version_parse	python/kfscp/kfscp.py	/^	def version_parse(self, parts):$/;"	m	class:cp
waitForSyncDone	cc/chunk/KfsOps.h	/^    bool waitForSyncDone;$/;"	m	struct:KFS::WriteOp
waiters	cc/chunk/KfsOps.h	/^    std::list<KfsOp *> waiters;$/;"	m	struct:KFS::ReadChunkMetaOp
waiters	cc/meta/queue.h	/^	int waiters;		\/\/!< threads waiting for results$/;"	m	class:KFS::MetaQueue
wakeup	cc/meta/thread.h	/^	void wakeup()$/;"	f	class:KFS::MetaThread
warn	cc/meta/util.cc	/^KFS::warn(const string msg, bool use_perror)$/;"	f	class:KFS
weight	python/flogger/flogger.py	/^	def weight(self, dirlist):$/;"	m	class:ascend_op
weight	python/flogger/flogger.py	/^	def weight(self, dirlist):$/;"	m	class:create_op
weight	python/flogger/flogger.py	/^	def weight(self, dirlist):$/;"	m	class:descend_op
weight	python/flogger/flogger.py	/^	def weight(self, dirlist):$/;"	m	class:mkdir_op
weight	python/flogger/flogger.py	/^	def weight(self, dirlist):$/;"	m	class:read_op
weight	python/flogger/flogger.py	/^	def weight(self, dirlist):$/;"	m	class:remove_op
weight	python/flogger/flogger.py	/^	def weight(self, dirlist):$/;"	m	class:rmdir_op
weight	python/flogger/flogger.py	/^	def weight(self, dirlist):$/;"	m	class:test_op
weight	python/flogger/flogger.py	/^	def weight(self, dirlist):$/;"	m	class:truncate_op
weight	python/flogger/flogger.py	/^	def weight(self, dirlist):$/;"	m	class:write_op
weighted_pick	python/flogger/flogger.py	/^def weighted_pick(weights):$/;"	f
widAppendCount	cc/chunk/KfsOps.h	/^    size_t       widAppendCount;$/;"	m	struct:KFS::GetRecordAppendOpStatus
widAppendCount	cc/libkfsClient/KfsOps.h	/^    size_t       widAppendCount;$/;"	m	struct:KFS::GetRecordAppendOpStatus
widBytesReserved	cc/chunk/KfsOps.h	/^    size_t       widBytesReserved;$/;"	m	struct:KFS::GetRecordAppendOpStatus
widBytesReserved	cc/libkfsClient/KfsOps.h	/^    size_t       widBytesReserved;$/;"	m	struct:KFS::GetRecordAppendOpStatus
widReadOnlyFlag	cc/chunk/KfsOps.h	/^    bool         widReadOnlyFlag;$/;"	m	struct:KFS::GetRecordAppendOpStatus
widReadOnlyFlag	cc/libkfsClient/KfsOps.h	/^    bool         widReadOnlyFlag;$/;"	m	struct:KFS::GetRecordAppendOpStatus
widWasReadOnlyFlag	cc/chunk/KfsOps.h	/^    bool         widWasReadOnlyFlag;$/;"	m	struct:KFS::GetRecordAppendOpStatus
widWasReadOnlyFlag	cc/libkfsClient/KfsOps.h	/^    bool         widWasReadOnlyFlag;$/;"	m	struct:KFS::GetRecordAppendOpStatus
wop	cc/chunk/KfsOps.h	/^    WriteOp *wop;$/;"	m	struct:KFS::ReadOp
wpop	cc/chunk/KfsOps.h	/^    WritePrepareOp *wpop;$/;"	m	struct:KFS::WriteOp
write	java/org/kosmix/kosmosfs/access/KfsOutputChannel.java	/^    int write(long ptr, int fd, ByteBuffer buf, int begin, int end);$/;"	m	class:KfsOutputChannel	file:
write	java/org/kosmix/kosmosfs/access/KfsOutputChannel.java	/^    public int write(ByteBuffer src) throws IOException$/;"	m	class:KfsOutputChannel
writeBuffer	java/org/kosmix/kosmosfs/access/KfsOutputChannel.java	/^    private ByteBuffer writeBuffer;$/;"	f	class:KfsOutputChannel	file:
writeDirect	java/org/kosmix/kosmosfs/access/KfsOutputChannel.java	/^    private void writeDirect(ByteBuffer buf) throws IOException$/;"	m	class:KfsOutputChannel	file:
writeFd	cc/meta/LayoutManager.cc	/^	set<fid_t> &readFd, &writeFd;$/;"	m	class:OpenFileChecker	file:
writeFwdOp	cc/chunk/KfsOps.h	/^    WritePrepareFwdOp *writeFwdOp; \/* op that tracks the data we$/;"	m	struct:KFS::WritePrepareOp
writeId	cc/chunk/KfsOps.h	/^    int64_t        writeId;           \/* output *\/$/;"	m	struct:KFS::WriteIdAllocOp
writeId	cc/chunk/KfsOps.h	/^    int64_t      writeId;               \/* value for the local parsed out of servers string *\/$/;"	m	struct:KFS::RecordAppendOp
writeId	cc/chunk/KfsOps.h	/^    int64_t      writeId;          \/\/ input$/;"	m	struct:KFS::GetRecordAppendOpStatus
writeId	cc/chunk/KfsOps.h	/^    int64_t      writeId; \/* value for the local server *\/$/;"	m	struct:KFS::ChunkSpaceReleaseOp
writeId	cc/chunk/KfsOps.h	/^    int64_t      writeId; \/* value for the local server *\/$/;"	m	struct:KFS::ChunkSpaceReserveOp
writeId	cc/chunk/KfsOps.h	/^    int64_t      writeId; \/* value for the local server *\/$/;"	m	struct:KFS::WritePrepareOp
writeId	cc/chunk/KfsOps.h	/^    int64_t      writeId;$/;"	m	struct:KFS::WriteOp
writeId	cc/chunk/KfsOps.h	/^    int64_t writeId; \/* corresponds to the local write *\/$/;"	m	struct:KFS::WriteSyncOp
writeId	cc/libkfsClient/KfsClientInt.h	/^    std::vector<WriteInfo> writeId;$/;"	m	struct:KFS::FilePosition
writeId	cc/libkfsClient/KfsOps.h	/^    int64_t	 writeId;$/;"	m	struct:KFS::WriteInfo
writeId	cc/libkfsClient/KfsOps.h	/^    int64_t      writeId;          \/\/ input$/;"	m	struct:KFS::GetRecordAppendOpStatus
writeIdStr	cc/chunk/KfsOps.h	/^    std::string    writeIdStr;        \/* output *\/$/;"	m	struct:KFS::WriteIdAllocOp
writeIdStr	cc/chunk/KfsOps.h	/^    std::string  writeIdStr; \/* input *\/$/;"	m	struct:KFS::WritePrepareFwdOp
writeIdStr	cc/libkfsClient/KfsOps.h	/^    std::string	 writeIdStr;  \/* output *\/$/;"	m	struct:KFS::WriteIdAllocOp
writeInfo	cc/libkfsClient/KfsOps.h	/^    std::vector<WriteInfo> writeInfo; \/* input *\/$/;"	m	struct:KFS::ChunkSpaceReleaseOp
writeInfo	cc/libkfsClient/KfsOps.h	/^    std::vector<WriteInfo> writeInfo; \/* input *\/$/;"	m	struct:KFS::ChunkSpaceReserveOp
writeInfo	cc/libkfsClient/KfsOps.h	/^    std::vector<WriteInfo> writeInfo; \/* input *\/$/;"	m	struct:KFS::RecordAppendOp
writeInfo	cc/libkfsClient/KfsOps.h	/^    std::vector<WriteInfo> writeInfo; \/* input *\/$/;"	m	struct:KFS::WritePrepareOp
writeInfo	cc/libkfsClient/KfsOps.h	/^    std::vector<WriteInfo> writeInfo;$/;"	m	struct:KFS::CloseOp
writeInfo	cc/libkfsClient/KfsOps.h	/^    std::vector<WriteInfo> writeInfo;$/;"	m	struct:KFS::WriteSyncOp
writeLeaseCount	cc/meta/LayoutManager.cc	/^	int             writeLeaseCount;$/;"	m	class:DecChunkWriteCount	file:
writeMaster	cc/chunk/KfsOps.h	/^    bool writeMaster; \/\/ infer from the server list if we are the "master" for doing the writes$/;"	m	struct:KFS::WriteSyncOp
writeOp	cc/chunk/KfsOps.h	/^    WriteOp *writeOp; \/* the underlying write that is queued up locally *\/$/;"	m	struct:KFS::WritePrepareOp
writeOp	cc/chunk/KfsOps.h	/^    WriteOp *writeOp; \/\/ the underlying write that needs to be pushed to disk$/;"	m	struct:KFS::WriteSyncOp
write_leaves	cc/meta/checkpoint.cc	/^Checkpoint::write_leaves()$/;"	f	class:Checkpoint
write_op	python/flogger/flogger.py	/^class write_op(test_op):$/;"	c
xsputn	cc/libkfsIO/IOBuffer.cc	/^std::streamsize IOBuffer::StreamBuffer::xsputn(const char *s, std::streamsize n)$/;"	f	class:IOBuffer::StreamBuffer
zeroSizes	cc/emulator/LayoutEmulator.cc	/^    int &zeroSizes;$/;"	m	class:RackAwareReplicationVerifier	file:
~ARAChunkCache	cc/meta/LayoutManager.h	/^		~ARAChunkCache()$/;"	f	class:KFS::ARAChunkCache
~Acceptor	cc/libkfsIO/Acceptor.cc	/^Acceptor::~Acceptor()$/;"	f	class:Acceptor
~Appender	cc/libkfsClient/KfsProtocolWorker.cc	/^        ~Appender()$/;"	f	class:KFS::KfsProtocolWorker::Impl::Appender
~AsyncReadWorker	cc/libkfsClient/KfsAsyncRW.h	/^        virtual ~AsyncReadWorker() { }$/;"	f	class:KFS::AsyncReadWorker
~AsyncRequest	cc/libkfsClient/KfsProtocolWorker.cc	/^        virtual ~AsyncRequest()$/;"	f	class:KFS::KfsProtocolWorker::Impl::AsyncRequest	file:
~AsyncWorker	cc/libkfsClient/KfsAsyncRW.cc	/^AsyncWorker::~AsyncWorker()$/;"	f	class:AsyncWorker
~AsyncWriteWorker	cc/libkfsClient/KfsAsyncRW.h	/^        virtual ~AsyncWriteWorker() { }$/;"	f	class:KFS::AsyncWriteWorker
~Asyncer	cc/libkfsClient/KfsAsyncRW.h	/^        ~Asyncer() { Stop(); }$/;"	f	class:KFS::Asyncer
~AtomicRecordAppendManager	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppendManager::~AtomicRecordAppendManager()$/;"	f	class:KFS::AtomicRecordAppendManager
~AtomicRecordAppender	cc/chunk/AtomicRecordAppender.cc	/^AtomicRecordAppender::~AtomicRecordAppender()$/;"	f	class:KFS::AtomicRecordAppender
~BPClient	cc/qcdio/qcunittest.cpp	/^        virtual ~BPClient()$/;"	f	class:QCDiskQueueTest::BPClient
~BufferManager	cc/chunk/BufferManager.cc	/^BufferManager::~BufferManager()$/;"	f	class:KFS::BufferManager
~BufferedLogWriter	cc/common/BufferedLogWriter.cc	/^BufferedLogWriter::~BufferedLogWriter()$/;"	f	class:KFS::BufferedLogWriter
~CSMap	cc/meta/LayoutManager.h	/^		 ~CSMap() {}$/;"	f	class:KFS::CSMap
~Checkpoint	cc/meta/checkpoint.h	/^	~Checkpoint() { }$/;"	f	class:KFS::Checkpoint
~ChunkBuffer	cc/libkfsClient/KfsClientInt.h	/^    ~ChunkBuffer() { delete [] buf; }$/;"	f	struct:KFS::ChunkBuffer
~ChunkInfoHandle	cc/chunk/ChunkManager.cc	/^    virtual ~ChunkInfoHandle() {$/;"	f	class:KFS::ChunkInfoHandle	file:
~ChunkInfo_t	cc/chunk/Chunk.h	/^    ~ChunkInfo_t() {$/;"	f	struct:KFS::ChunkInfo_t
~ChunkManager	cc/chunk/ChunkManager.cc	/^ChunkManager::~ChunkManager()$/;"	f	class:KFS::ChunkManager
~ChunkReplicator	cc/meta/ChunkReplicator.cc	/^ChunkReplicator::~ChunkReplicator()$/;"	f	class:ChunkReplicator
~ChunkServer	cc/meta/ChunkServer.cc	/^ChunkServer::~ChunkServer()$/;"	f	class:ChunkServer
~ChunkServerFactory	cc/meta/ChunkServerFactory.h	/^                virtual ~ChunkServerFactory() {$/;"	f	class:KFS::ChunkServerFactory
~Client	cc/chunk/BufferManager.h	/^        virtual ~Client()$/;"	f	class:KFS::BufferManager::Client
~Client	cc/qcdio/qciobufferpool.h	/^        virtual ~Client()$/;"	f	class:QCIoBufferPool::Client
~ClientManager	cc/chunk/ClientManager.h	/^    virtual ~ClientManager() {$/;"	f	class:KFS::ClientManager
~ClientManager	cc/meta/ClientManager.h	/^        virtual ~ClientManager() {$/;"	f	class:KFS::ClientManager
~ClientSM	cc/chunk/ClientSM.cc	/^ClientSM::~ClientSM()$/;"	f	class:ClientSM
~ClientSM	cc/meta/ClientSM.cc	/^ClientSM::~ClientSM()$/;"	f	class:ClientSM
~Completion	cc/libkfsClient/WriteAppender.h	/^        virtual ~Completion()$/;"	f	class:KFS::WriteAppender::Completion
~Counter	cc/libkfsIO/Counter.h	/^    virtual ~Counter() { }$/;"	f	class:KFS::Counter
~CounterManager	cc/libkfsIO/Counter.h	/^    ~CounterManager() {$/;"	f	class:KFS::CounterManager
~DailyRollingFileAppender	cc/common/DailyRollingFileAppender.cc	/^DailyRollingFileAppender::~DailyRollingFileAppender()$/;"	f	class:log4cpp::DailyRollingFileAppender
~DiskEvent_t	cc/libkfsIO/DiskEvent.h	/^    ~DiskEvent_t() {$/;"	f	struct:KFS::DiskEvent_t
~DiskIo	cc/chunk/DiskIo.cc	/^DiskIo::~DiskIo()$/;"	f	class:KFS::DiskIo
~DiskIoQueues	cc/chunk/DiskIo.cc	/^    ~DiskIoQueues()$/;"	f	class:KFS::DiskIoQueues
~DiskQueue	cc/chunk/DiskIo.cc	/^     ~DiskQueue()$/;"	f	class:KFS::DiskQueue	file:
~Event	cc/libkfsIO/Event.h	/^    ~Event() {$/;"	f	class:KFS::Event
~EventManager	cc/libkfsIO/EventManager.cc	/^EventManager::~EventManager()$/;"	f	class:EventManager
~EventObserver	cc/libkfsClient/KfsNetClient.h	/^        virtual ~EventObserver() {}$/;"	f	class:KFS::KfsNetClient::EventObserver
~File	cc/chunk/DiskIo.h	/^        ~File()$/;"	f	class:KFS::DiskIo::File
~FileHandle_t	cc/libkfsIO/FileHandle.h	/^        ~FileHandle_t() {$/;"	f	struct:KFS::FileHandle_t
~FilePosition	cc/libkfsClient/KfsClientInt.h	/^    ~FilePosition() {$/;"	f	struct:KFS::FilePosition
~GetChunkMetadataOp	cc/chunk/KfsOps.h	/^    ~GetChunkMetadataOp() $/;"	f	struct:KFS::GetChunkMetadataOp
~Globals_t	cc/libkfsIO/Globals.cc	/^Globals_t::~Globals_t()$/;"	f	class:KFS::libkfsio::Globals_t
~Handler	cc/libkfsIO/NetManager.h	/^            ~Handler()$/;"	f	struct:KFS::NetManager::Timer::Handler
~IAcceptorOwner	cc/libkfsIO/Acceptor.h	/^    virtual ~IAcceptorOwner() { };$/;"	f	class:KFS::IAcceptorOwner
~IOBuffer	cc/libkfsIO/IOBuffer.cc	/^IOBuffer::~IOBuffer()$/;"	f	class:IOBuffer
~IOBufferAllocator	cc/libkfsIO/IOBuffer.h	/^        virtual ~IOBufferAllocator()$/;"	f	class:KFS::libkfsio::IOBufferAllocator
~IOBufferData	cc/libkfsIO/IOBuffer.cc	/^IOBufferData::~IOBufferData()$/;"	f	class:IOBufferData
~ITimeout	cc/libkfsIO/ITimeout.h	/^    virtual ~ITimeout() { }$/;"	f	class:KFS::ITimeout
~Impl	cc/common/BufferedLogWriter.cc	/^    virtual ~Impl()$/;"	f	class:KFS::BufferedLogWriter::Impl
~Impl	cc/libkfsClient/KfsNetClient.cc	/^    ~Impl()$/;"	f	class:KFS::KfsNetClient::Impl
~Impl	cc/libkfsClient/KfsProtocolWorker.cc	/^    virtual ~Impl()$/;"	f	class:KFS::KfsProtocolWorker::Impl
~Impl	cc/libkfsClient/WriteAppender.cc	/^    ~Impl()$/;"	f	class:KFS::WriteAppender::Impl
~Impl	cc/qcdio/qcfdpoll.cpp	/^    ~Impl()$/;"	f	class:QCFdPoll::Impl
~InputIterator	cc/qcdio/qciobufferpool.h	/^        virtual ~InputIterator()$/;"	f	class:QCIoBufferPool::InputIterator
~IoCompletion	cc/qcdio/qcdiskqueue.h	/^        virtual ~IoCompletion()$/;"	f	class:QCDiskQueue::IoCompletion
~IoThread	cc/qcdio/qcdiskqueue.cpp	/^        virtual ~IoThread()$/;"	f	class:QCDiskQueue::Queue::IoThread
~Iterator	cc/qcdio/qcdllist.h	/^        ~Iterator()$/;"	f	class:QCDLList::Iterator
~Iterator	cc/qcdio/qcunittest.cpp	/^        ~Iterator()$/;"	f	class:QCDiskQueueTest::Iterator
~KfsCallbackObj	cc/libkfsIO/KfsCallbackObj.h	/^    virtual ~KfsCallbackObj() {$/;"	f	class:KFS::KfsCallbackObj
~KfsClient	cc/libkfsClient/KfsClient.cc	/^KfsClient::~KfsClient()$/;"	f	class:KfsClient
~KfsClientFactory	cc/libkfsClient/KfsClient.cc	/^KfsClientFactory::~KfsClientFactory()$/;"	f	class:KfsClientFactory
~KfsClientImpl	cc/libkfsClient/KfsClient.cc	/^KfsClientImpl::~KfsClientImpl()$/;"	f	class:KfsClientImpl
~KfsMonOp	cc/tools/MonUtils.h	/^        virtual ~KfsMonOp() { };$/;"	f	struct:KFS_MON::KfsMonOp
~KfsNetClient	cc/libkfsClient/KfsNetClient.cc	/^KfsNetClient::~KfsNetClient()$/;"	f	class:KFS::KfsNetClient
~KfsOp	cc/chunk/KfsOps.cc	/^KfsOp::~KfsOp()$/;"	f	class:KfsOp
~KfsOp	cc/libkfsClient/KfsOps.h	/^    virtual ~KfsOp() {$/;"	f	struct:KFS::KfsOp
~KfsPendingOp	cc/libkfsClient/KfsPendingOp.cc	/^KfsPendingOp::~KfsPendingOp()$/;"	f	class:KfsPendingOp
~KfsProtocolWorker	cc/libkfsClient/KfsProtocolWorker.cc	/^KfsProtocolWorker::~KfsProtocolWorker()$/;"	f	class:KFS::KfsProtocolWorker
~LayoutManager	cc/meta/LayoutManager.h	/^		virtual ~LayoutManager() { }$/;"	f	class:KFS::LayoutManager
~LeaseCleaner	cc/meta/LeaseCleaner.cc	/^LeaseCleaner::~LeaseCleaner()$/;"	f	class:LeaseCleaner
~LeaseClerk	cc/chunk/LeaseClerk.h	/^    ~LeaseClerk(){ };$/;"	f	class:KFS::LeaseClerk
~LeaseClerk	cc/libkfsClient/LeaseClerk.h	/^    ~LeaseClerk(){ };$/;"	f	class:KFS::LeaseClerk
~Logger	cc/chunk/Logger.cc	/^Logger::~Logger()$/;"	f	class:Logger
~Logger	cc/meta/logger.h	/^	~Logger() { file.close(); }$/;"	f	class:KFS::Logger
~Meta	cc/meta/meta.h	/^	virtual ~Meta() { }$/;"	f	class:KFS::Meta
~MetaNode	cc/meta/base.h	/^	virtual ~MetaNode() { }$/;"	f	class:KFS::MetaNode
~MetaQueue	cc/meta/queue.h	/^	~MetaQueue() { }$/;"	f	class:KFS::MetaQueue
~MetaRequest	cc/meta/request.h	/^	virtual ~MetaRequest() { }$/;"	f	struct:KFS::MetaRequest
~MetaServerSM	cc/chunk/MetaServerSM.cc	/^MetaServerSM::~MetaServerSM()$/;"	f	class:MetaServerSM
~MetaThread	cc/meta/thread.h	/^	~MetaThread()$/;"	f	class:KFS::MetaThread
~MsgLogger	cc/common/log.cc	/^MsgLogger::~MsgLogger()$/;"	f	class:KFS::MsgLogger
~MutexLock	cc/libkfsClient/concurrency.h	/^    ~MutexLock()$/;"	f	class:KFS::MutexLock
~NetConnection	cc/libkfsIO/NetConnection.h	/^    ~NetConnection() {$/;"	f	class:KFS::NetConnection
~NetDispatch	cc/meta/NetDispatch.cc	/^NetDispatch::~NetDispatch()$/;"	f	class:NetDispatch
~NetErrorSimulator	cc/libkfsIO/NetErrorSimulator.cc	/^    virtual ~NetErrorSimulator()$/;"	f	class:KFS::NetErrorSimulator
~NetKicker	cc/libkfsIO/NetKicker.cc	/^NetKicker::~NetKicker()$/;"	f	class:NetKicker
~NetManager	cc/libkfsIO/NetManager.cc	/^NetManager::~NetManager()$/;"	f	class:NetManager
~ObjectMethodBase	cc/libkfsIO/KfsCallbackObj.h	/^    virtual ~ObjectMethodBase() {}$/;"	f	class:KFS::ObjectMethodBase
~OpCounterMap	cc/chunk/KfsOps.cc	/^    ~OpCounterMap()$/;"	f	struct:OpCounterMap
~OpListEntry	cc/chunk/ChunkManager.h	/^inline ChunkManager::PendingWrites::OpListEntry::~OpListEntry()$/;"	f	class:KFS::ChunkManager::PendingWrites::OpListEntry
~OpOwner	cc/libkfsClient/KfsNetClient.h	/^        virtual ~OpOwner() {}$/;"	f	class:KFS::KfsNetClient::OpOwner
~OutputIterator	cc/qcdio/qciobufferpool.h	/^        virtual ~OutputIterator()$/;"	f	class:QCIoBufferPool::OutputIterator
~Partition	cc/qcdio/qciobufferpool.cpp	/^    ~Partition()$/;"	f	class:QCIoBufferPool::Partition
~PendingChunkRead	cc/libkfsClient/KfsRead.cc	/^PendingChunkRead::~PendingChunkRead()$/;"	f	class:PendingChunkRead
~PollEventHook	cc/libkfsIO/NetManager.h	/^        virtual ~PollEventHook() {}$/;"	f	class:KFS::NetManager::PollEventHook
~Properties	cc/common/properties.cc	/^Properties::~Properties()$/;"	f	class:Properties
~QCCondVar	cc/qcdio/qcmutex.cpp	/^QCCondVar::~QCCondVar()$/;"	f	class:QCCondVar
~QCDiskQueue	cc/qcdio/qcdiskqueue.cpp	/^QCDiskQueue::~QCDiskQueue()$/;"	f	class:QCDiskQueue
~QCDiskQueueTest	cc/qcdio/qcunittest.cpp	/^    ~QCDiskQueueTest()$/;"	f	class:QCDiskQueueTest
~QCFdPoll	cc/qcdio/qcfdpoll.cpp	/^QCFdPoll::~QCFdPoll()$/;"	f	class:QCFdPoll
~QCIoBufferPool	cc/qcdio/qciobufferpool.cpp	/^QCIoBufferPool::~QCIoBufferPool()$/;"	f	class:QCIoBufferPool
~QCMutex	cc/qcdio/qcmutex.cpp	/^QCMutex::~QCMutex()$/;"	f	class:QCMutex
~QCRunnable	cc/qcdio/qcthread.h	/^    virtual ~QCRunnable()$/;"	f	class:QCRunnable
~QCStMutexLocker	cc/qcdio/qcstutils.h	/^    ~QCStMutexLocker()$/;"	f	class:QCStMutexLocker
~QCStMutexUnlocker	cc/qcdio/qcstutils.h	/^    ~QCStMutexUnlocker()$/;"	f	class:QCStMutexUnlocker
~QCStValueChanger	cc/qcdio/qcstutils.h	/^    ~QCStValueChanger()$/;"	f	class:QCStValueChanger
~QCStValueIncrementor	cc/qcdio/qcstutils.h	/^    ~QCStValueIncrementor()$/;"	f	class:QCStValueIncrementor
~QCStartedThreadList	cc/qcdio/qcthread.cpp	/^    ~QCStartedThreadList()$/;"	f	class:QCStartedThreadList
~QCThread	cc/qcdio/qcthread.cpp	/^QCThread::~QCThread()$/;"	f	class:QCThread::QCThread
~Queue	cc/qcdio/qcdiskqueue.cpp	/^    virtual ~Queue()$/;"	f	class:QCDiskQueue::Queue
~ReadOp	cc/chunk/KfsOps.h	/^    ~ReadOp() {$/;"	f	struct:KFS::ReadOp
~RecordAppendOp	cc/chunk/AtomicRecordAppender.cc	/^RecordAppendOp::~RecordAppendOp()$/;"	f	class:KFS::RecordAppendOp
~RemoteSyncSM	cc/chunk/RemoteSyncSM.cc	/^RemoteSyncSM::~RemoteSyncSM()$/;"	f	class:RemoteSyncSM
~Replay	cc/meta/replay.h	/^	~Replay() { };$/;"	f	class:KFS::Replay
~Replicator	cc/chunk/Replicator.cc	/^Replicator::~Replicator()$/;"	f	class:Replicator
~Request	cc/libkfsClient/KfsProtocolWorker.cc	/^KfsProtocolWorker::Request::~Request()$/;"	f	class:KFS::KfsProtocolWorker::Request
~Request	cc/qcdio/qcdiskqueue.cpp	/^        ~Request()$/;"	f	class:QCDiskQueue::Queue::Request
~RequestWaiter	cc/qcdio/qcdiskqueue.cpp	/^    virtual ~RequestWaiter()$/;"	f	class:QCDiskQueue::RequestWaiter
~RequestWaiter	cc/qcdio/qcunittest.cpp	/^        virtual ~RequestWaiter()$/;"	f	class:QCDiskQueueTest::RequestWaiter
~Restarter	cc/chunk/ChunkServer_main.cc	/^    ~Restarter()$/;"	f	class:Restarter
~SyncRequest	cc/libkfsClient/KfsProtocolWorker.cc	/^        virtual ~SyncRequest()$/;"	f	class:KFS::KfsProtocolWorker::Impl::SyncRequest
~TcpSocket	cc/libkfsIO/TcpSocket.cc	/^TcpSocket::~TcpSocket()$/;"	f	class:TcpSocket
~TelemetryClient	cc/libkfsIO/TelemetryClient.cc	/^TelemetryClient::~TelemetryClient()$/;"	f	class:TelemetryClient
~Waker	cc/libkfsIO/NetManager.cc	/^    ~Waker()$/;"	f	class:NetManager::Waker
~WriteAppender	cc/libkfsClient/WriteAppender.cc	/^WriteAppender::~WriteAppender()$/;"	f	class:KFS::WriteAppender
~WriteChunkMetaOp	cc/chunk/KfsOps.h	/^    ~WriteChunkMetaOp() {$/;"	f	struct:KFS::WriteChunkMetaOp
~WriteIdAllocOp	cc/chunk/KfsOps.cc	/^WriteIdAllocOp::~WriteIdAllocOp()$/;"	f	class:WriteIdAllocOp
~WriteOp	cc/chunk/KfsOps.cc	/^WriteOp::~WriteOp()$/;"	f	class:WriteOp
~WritePrepareFwdOp	cc/chunk/KfsOps.h	/^    ~WritePrepareFwdOp() {$/;"	f	struct:KFS::WritePrepareFwdOp
~WritePrepareOp	cc/chunk/KfsOps.cc	/^WritePrepareOp::~WritePrepareOp()$/;"	f	class:WritePrepareOp
~WriteSyncOp	cc/chunk/KfsOps.cc	/^WriteSyncOp::~WriteSyncOp()$/;"	f	class:WriteSyncOp
~ZincHandler	cc/meta/handler.h	/^       ~ZincHandler() {$/;"	f	class:ZincHandler
~_force_vfp_to_top	cc/libkfsIO/KfsCallbackObj.h	/^    virtual ~_force_vfp_to_top() { };$/;"	f	struct:KFS::_force_vfp_to_top
